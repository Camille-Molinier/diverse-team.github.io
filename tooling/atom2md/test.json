{"feed":{"xmlns":"http://www.w3.org/2005/Atom","generator":{"uri":"http://jekyllrb.com","version":"3.4.0","$t":"Jekyll"},"link":[{"href":"https://mleduc.xyz/blog/feed.xml","rel":"self","type":"application/atom+xml"},{"href":"https://mleduc.xyz/blog/","rel":"alternate","type":"text/html"}],"updated":"2018-06-20T02:25:09-05:00","id":"https://mleduc.xyz/blog/","title":{"type":"html","$t":"Manuel Leduc"},"entry":[{"title":{"type":"html","$t":"Xtext Serialization - Easier than I thought"},"link":{"href":"https://mleduc.xyz/blog/xtext/emf/2018/02/28/xtext-serialization.html","rel":"alternate","type":"text/html","title":"Xtext Serialization - Easier than I thought"},"published":"2018-02-28T03:54:00-06:00","updated":"2018-02-28T03:54:00-06:00","id":"https://mleduc.xyz/blog/xtext/emf/2018/02/28/xtext-serialization","content":{"type":"html","xml:base":"https://mleduc.xyz/blog/xtext/emf/2018/02/28/xtext-serialization.html","$t":"<h1 id=\"introduction\">Introduction</h1>\n\n<p>We often think of Xtext as a solution to transform text files into <a href=\"https://www.eclipse.org/modeling/emf/\">EMF</a> models.\nBut the opposite is also possible and one can transform a EMF model into a text file.\nSuch a transformation is and is called <em>serialization</em>.</p>\n\n<p>Serializing an EMF model has various use cases, from saving the intermediate representation of a compilation to\noperate transformations on a xtext program before transforming it back into text (e.g. optimization, obfuscation…).</p>\n\n<h1 id=\"implementation\">Implementation</h1>\n\n<p>I will not go into the details of what might go wrong during the serialization and how to fix it,\nbut shortly, if the model does not conform to the constraints defined in the xtext file, the serialization will fail.</p>\n\n<p>Solutions to solve such issues are possible but will not be explained here.</p>\n\n<p>Apart from those technical details, serializing a model is a surprisingly simple operation to implement despite the lack\nof working example available online.</p>\n\n<p>Let’s take an language name <strong>eoh</strong>, the following xtend example shows how to serialize an EMF model to\na valid string in the grammar of eoh.</p>\n\n<p>Three elements are important to the implementation of a serialization:</p>\n\n<ul>\n  <li>The injection must be done using the provider of the language. See the @InjectWith annotation. More details are given in the <a href=\"https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext\">Serializing EMF models with Xtext</a> presentation.</li>\n  <li><em>org.eclipse.xtext.serializer.impl.Serializer</em> is injected in the class (using the previously defined provider).</li>\n  <li>The serializer is called using the <em>serialize</em> method one any EObject instance. Check and generation are done based on the provided language.</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"n\">eho</span><span class=\"o\">.</span><span class=\"na\">tests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">com.google.inject.Inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">eho.eho.EhoFactory</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.serializer.impl.Serializer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.testing.InjectWith</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.testing.XtextRunner</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.junit.Test</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.junit.runner.RunWith</span>\n\n<span class=\"nd\">@RunWith</span><span class=\"o\">(</span><span class=\"n\">XtextRunner</span><span class=\"o\">)</span>\n<span class=\"nd\">@InjectWith</span><span class=\"o\">(</span><span class=\"n\">EhoInjectorProvider</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EhoParsingTest</span> <span class=\"o\">{</span>\n\n  <span class=\"nd\">@Inject</span> <span class=\"n\">Serializer</span> <span class=\"n\">serializer</span>\n\n  <span class=\"nd\">@Test</span>\n  <span class=\"n\">def</span> <span class=\"kt\">void</span> <span class=\"nf\">serializer</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">EhoFactory</span><span class=\"o\">.</span><span class=\"na\">eINSTANCE</span>\n    <span class=\"n\">val</span> <span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">createRoot</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"o\">]</span>\n\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"na\">serialize</span><span class=\"o\">(</span><span class=\"n\">policy</span><span class=\"o\">))</span>\n\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h1 id=\"useful-resources\">Useful resources</h1>\n\n<p>The result presented on this article are mainly an exemplified aggregation of the\nfollowing web resources:</p>\n\n<ul>\n  <li><a href=\"https://stackoverflow.com/questions/12302206/convert-object-to-xtext-dsl\">https://stackoverflow.com/questions/12302206/convert-object-to-xtext-dsl</a></li>\n  <li><a href=\"https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext\">https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext</a></li>\n  <li><a href=\"https://www.eclipse.org/Xtext/documentation/308_emf_integration.html\">https://www.eclipse.org/Xtext/documentation/308_emf_integration.html</a></li>\n</ul>"},"author":{"name":{}},"category":[{"term":"xtext"},{"term":"emf"},{"term":"serialization"}],"summary":{"type":"html","$t":"Introduction"}},{"title":{"type":"html","$t":"FeatureIDE Programmatically: Getting Started"},"link":{"href":"https://mleduc.xyz/blog/eclipse/2017/11/28/feature-ide-programmatically-getting-started.html","rel":"alternate","type":"text/html","title":"FeatureIDE Programmatically: Getting Started"},"published":"2017-11-28T09:36:00-06:00","updated":"2017-11-28T09:36:00-06:00","id":"https://mleduc.xyz/blog/eclipse/2017/11/28/feature-ide-programmatically-getting-started","content":{"type":"html","xml:base":"https://mleduc.xyz/blog/eclipse/2017/11/28/feature-ide-programmatically-getting-started.html","$t":"<hr />\n\n<p><strong>Update #1</strong> <em>Tuesday, December 12, 2017</em>: First update of the article with some improvement from my recent experiments with FeatureIDE API. The code is much cleaner and reasoning with the configurations is improved. I have added comments along the article explaining the changes.</p>\n\n<hr />\n\n<p>Part of my research and engineering activities are currently focused on the variability aspect of software languages.</p>\n\n<p>IMHO, <a href=\"https://featureide.github.io/\">FeatureIDE</a> is the best plugin to deal with the expression of the variability of software components, using <a href=\"https://en.wikipedia.org/wiki/Feature_model\">Feature Models</a>.</p>\n\n<p>It has been nicely refactored over the time in order to be modular and it is now possible to import only the Feature Model syntax and semantics without importing the UI dependencies.</p>\n\n<p>Nonetheless, I’ve spend enough time digging in the code this afternoon to feel like what I did could be helpful to others.</p>\n\n<p>The following piece of java code is an example of how to easily define a Feature Model and to check some simple properties on it.</p>\n\n<p>It depends on <code class=\"highlighter-rouge\">de.ovgu.featureide.fm.core;bundle-version=\"3.4.1\"</code> (FeatureIDE <a href=\"http://featureide.cs.ovgu.de/update/v3/\">update site</a> and <a href=\"https://github.com/FeatureIDE/FeatureIDE\">source code</a>)</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"na\">inria</span><span class=\"o\">.</span><span class=\"na\">diverse</span><span class=\"o\">.</span><span class=\"na\">melange</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.sat4j.specs.TimeoutException</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureModelStructure</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureStructure</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.DefaultFeatureModelFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.FMFactoryManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.Feature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.SelectableFeature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.Selection</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SimpleFeatureModel</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">TimeoutException</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureModel</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">FMFactoryManager</span><span class=\"o\">.</span><span class=\"na\">getEmptyFeatureModel</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">DefaultFeatureModelFactory</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">DefaultFeatureModelFactory</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fexp</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Expression\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fas</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"AS\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fadd</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Add\"</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fecl</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Ecl\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fa1</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"A1\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Feature</span> <span class=\"n\">fa2</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"A2\"</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">fexpStructure</span> <span class=\"o\">=</span> <span class=\"n\">fexp</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureModelStructure</span> <span class=\"n\">fmStructure</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">fasStructure</span> <span class=\"o\">=</span> <span class=\"n\">fas</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">feclStructure</span> <span class=\"o\">=</span> <span class=\"n\">fecl</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">faddStructure</span> <span class=\"o\">=</span> <span class=\"n\">fadd</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">fa1Structure</span> <span class=\"o\">=</span> <span class=\"n\">fa1</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"n\">IFeatureStructure</span> <span class=\"n\">fa2Structure</span> <span class=\"o\">=</span> <span class=\"n\">fa2</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n\n  <span class=\"n\">fmStructure</span><span class=\"o\">.</span><span class=\"na\">setRoot</span><span class=\"o\">(</span><span class=\"n\">fexpStructure</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fexp</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fas</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fadd</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fecl</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fa1</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fa2</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fasStructure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">faddStructure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">feclStructure</span><span class=\"o\">);</span>\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">setAlternative</span><span class=\"o\">();</span>\n\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fa1Structure</span><span class=\"o\">);</span>\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fa2Structure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fasStructure</span><span class=\"o\">.</span><span class=\"na\">setMandatory</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"n\">Configuration</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Configuration</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n  <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">setManual</span><span class=\"o\">(</span><span class=\"s\">\"A1\"</span><span class=\"o\">,</span> <span class=\"n\">Selection</span><span class=\"o\">.</span><span class=\"na\">SELECTED</span><span class=\"o\">);</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Can be valid: \"</span> <span class=\"o\">+</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">canBeValid</span><span class=\"o\">());</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Solutions: \"</span> <span class=\"o\">+</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">number</span><span class=\"o\">());</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">solutions</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getSolutions</span><span class=\"o\">(</span><span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">number</span><span class=\"o\">()).</span><span class=\"na\">intValue</span><span class=\"o\">());</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Free feature (SELECTED/UNSELECT choice left open): \"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">IFeature</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getUndefinedSelectedFeatures</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Status of the features\"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">SelectableFeature</span> <span class=\"n\">feature</span> <span class=\"o\">:</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getFeatures</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">feature</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"na\">getSelection</span><span class=\"o\">());</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Possible solutions so far:\"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">solution</span> <span class=\"o\">:</span> <span class=\"n\">solutions</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">solution</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/*\n   * Can be valid: true\n   * Solutions: 2\n   * Still free variables:\n   * Add\n   * Status of the features\n   * Expression SELECTED\n   * AS SELECTED\n   * Add UNDEFINED\n   * Ecl SELECTED\n   * A1 SELECTED\n   * A2 UNSELECTED\n   * Possible solutions\n   * [Expression, AS, Ecl, A1]\n   * [Expression, AS, Ecl, A1, Add]\n   */</span>\n\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre>\n</div>\n\n<p>The last lines, with the configuration analysis is really nice and allow to reason on the Feature Models easily.</p>\n\n<p><strong>Update #1 notes:</strong> I’m still hoping to find a pretty printing of the feature model somewhere in the API, to help me with the debugging.</p>\n\n<p>But the initialization of the Feature Model has a few code smells that I’d like to remove. For instance, in order to add a sub-feature to the Feature Model it is required to:</p>\n<ul>\n  <li>add the feature to the Feature Model (i.e. <code class=\"highlighter-rouge\">addFeature</code>)</li>\n  <li>attach the feature to its parent (i.e. <code class=\"highlighter-rouge\">setParent</code>)</li>\n  <li>add the child to the list of children of its parent (e.g. <code class=\"highlighter-rouge\">getChildren().add(fas.getStructure())</code>).</li>\n</ul>\n\n<p><strong>Update #1 notes:</strong> <code class=\"highlighter-rouge\">setParent</code> + <code class=\"highlighter-rouge\">getChildren().add(fas.getStructure())</code> can be nicely replace by a single <code class=\"highlighter-rouge\">parent.addChild(child)</code>.</p>\n\n<p>Also a lot of those operations requires a kind of lifting from the feature to its structure.</p>\n\n<p><del>The aggregation of all those small details makes the Feature Model instantiation hard to read and error prone. I’m sure it can be improved, either by a better use of the library (which is likely since I’ve only spend a few hours on it so far) or by defining some utility methods client side.</del></p>\n\n<p><strong>Update #1 notes:</strong> As expected, with a better knowledges of the API, the code quality, if not yet as good as hoped, improved significantly.</p>\n\n<p>I’ll keep updating this article whenever I manage to find useful FeatureIDE API tips.</p>"},"author":{"name":{}},"category":[{"term":"feature"},{"term":"ide"},{"term":"eclipse"},{"term":"model"},{"term":"programmatically"}],"summary":{"type":"html"}},{"title":{"type":"html","$t":"Eclipse Plugin Generation"},"link":{"href":"https://mleduc.xyz/blog/eclipse/2017/07/26/eclipse-plugin-generation.html","rel":"alternate","type":"text/html","title":"Eclipse Plugin Generation"},"published":"2017-07-26T10:53:00-05:00","updated":"2017-07-26T10:53:00-05:00","id":"https://mleduc.xyz/blog/eclipse/2017/07/26/eclipse-plugin-generation","content":{"type":"html","xml:base":"https://mleduc.xyz/blog/eclipse/2017/07/26/eclipse-plugin-generation.html","$t":"<p>I am currently working with eclipse projects. Lots of eclipse projects. So much that I want to generate eclipse projects using java code (I hope to write another article of the why of this soon).</p>\n\n<p>Surprisingly this task is not really complicated but requires an awful lot of\ncode to work.</p>\n\n<p>So once I made it work if felt the need to share it as I did not found much documentation.</p>\n\n<p>The following code is just an simplification of <a href=\"https://github.com/eclipse/eclipse.pde.ui/blob/master/ui/org.eclipse.pde.ui/src/org/eclipse/pde/internal/ui/wizards/plugin/NewProjectCreationOperation.java\">org.eclipse.pde.internal.ui.wizards.plugin.NewProjectCreationOperation</a> from the Plugin Development Environment (<a href=\"https://www.eclipse.org/pde/\">PDE</a>) project.</p>\n\n<p>In eclipse <code class=\"highlighter-rouge\">NewProjectCreationOperation</code> is called at the end of eclipse new plugin wizard (<a href=\"https://github.com/eclipse/eclipse.pde.ui/blob/master/ui/org.eclipse.pde.ui/src/org/eclipse/pde/ui/templates/NewPluginProjectFromTemplateWizard.java\">org.eclipse.pde.ui.templates.NewPluginProjectFromTemplateWizard</a>) and initialize a new eclipse plugin project according to the choices done by the user during the wizard steps.</p>\n\n<p>I just simplified the pde code by removing every UI related dependencies and replacing the object holding the\nwizard inputs by static fields directly in the class (for simplicity sake).</p>\n\n<p>The minimal set of dependencies needed to make the following code work is:</p>\n<ul>\n  <li>org.eclipse.core.runtime;bundle-version=”3.13.0”</li>\n  <li>org.eclipse.core.resources;bundle-version=”3.12.0”</li>\n  <li>org.eclipse.jdt.core;bundle-version=”3.13.0”</li>\n  <li>org.eclipse.pde.core;bundle-version=”3.11.100”</li>\n</ul>\n\n<p>The entry point is the <code class=\"highlighter-rouge\">execute</code> method that will create an minimal eclipse plugin project named “<em>myPlugin</em>”.</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.util.Iterator</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Set</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.TreeSet</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IFile</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IFolder</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IWorkspaceRoot</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.ResourcesPlugin</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.CoreException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.IPath</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.IProgressMonitor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IClasspathEntry</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IJavaElement</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IJavaProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IPackageFragment</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IPackageFragmentRoot</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.JavaCore</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.JavaModelException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.build.IBuildEntry</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.build.IBuildModelFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.plugin.IPluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.plugin.IPluginLibrary</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ClasspathComputer</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ICoreConstants</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.TargetPlatformHelper</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.build.WorkspaceBuildModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.BundlePluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundle</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundlePluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundlePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.natures.PDE</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.plugin.WorkspacePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.project.PDEProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.util.CoreUtility</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.osgi.framework.Constants</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">PluginApplicationCreator</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"n\">WorkspacePluginModelBase</span> <span class=\"n\">fModel</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.0.0\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">sourceFolderName</span> <span class=\"o\">=</span> <span class=\"s\">\"src\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">outputFolderName</span> <span class=\"o\">=</span> <span class=\"s\">\"bin\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">confExecutionEnvironment</span> <span class=\"o\">=</span> <span class=\"s\">\"JavaSE-1.8\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">bundleId</span> <span class=\"o\">=</span> <span class=\"s\">\"myPluginBundleId\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">configTargetVersion</span> <span class=\"o\">=</span> <span class=\"s\">\"3.8\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">projectName</span> <span class=\"o\">=</span> <span class=\"s\">\"myPlugin\"</span><span class=\"o\">;</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">new</span> <span class=\"nf\">PluginApplicationCreator</span><span class=\"o\">().</span><span class=\"na\">execute</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">execute</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">createProject</span><span class=\"o\">();</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">hasNature</span><span class=\"o\">(</span><span class=\"n\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">NATURE_ID</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">setClasspath</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\n\t\t<span class=\"n\">createManifest</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">createBuildPropertiesFile</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// not sure when this call is usefull.</span>\n\t\t<span class=\"n\">adjustManifests</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">());</span>\n\n\t\t<span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">();</span>\n\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">adjustManifests</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProgressMonitor</span> <span class=\"n\">monitor</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"n\">IPluginBase</span> <span class=\"n\">bundle</span><span class=\"o\">)</span>\n\t\t\t<span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IPluginLibrary</span><span class=\"o\">[]</span> <span class=\"n\">libs</span> <span class=\"o\">=</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">().</span><span class=\"na\">getLibraries</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">packages</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TreeSet</span><span class=\"o\">&lt;&gt;();</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IPluginLibrary</span> <span class=\"n\">lib</span> <span class=\"o\">:</span> <span class=\"n\">libs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"na\">getContentFilters</span><span class=\"o\">();</span>\n\t\t\t<span class=\"c1\">// if a library is fully exported, then export all source packages (since we</span>\n\t\t\t<span class=\"c1\">// don't know which source folders go with which library)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">filters</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"**\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">addAllSourcePackages</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">packages</span><span class=\"o\">);</span>\n\t\t\t\t<span class=\"k\">break</span><span class=\"o\">;</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">filter</span> <span class=\"o\">:</span> <span class=\"n\">filters</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"s\">\".*\"</span><span class=\"o\">))</span>\n\t\t\t\t\t<span class=\"n\">packages</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">));</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">packages</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IBundle</span> <span class=\"n\">iBundle</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"n\">WorkspaceBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"n\">fModel</span><span class=\"o\">).</span><span class=\"na\">getBundleModel</span><span class=\"o\">().</span><span class=\"na\">getBundle</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">iBundle</span><span class=\"o\">.</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">EXPORT_PACKAGE</span><span class=\"o\">,</span> <span class=\"n\">getCommaValuesFromPackagesSet</span><span class=\"o\">(</span><span class=\"n\">packages</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"o\">));</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">addAllSourcePackages</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IJavaProject</span> <span class=\"n\">javaProject</span> <span class=\"o\">=</span> <span class=\"n\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">getRawClasspath</span><span class=\"o\">();</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">classpath</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getEntryKind</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">.</span><span class=\"na\">CPE_SOURCE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getPath</span><span class=\"o\">().</span><span class=\"na\">removeFirstSegments</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">segmentCount</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IPackageFragmentRoot</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">getPackageFragmentRoot</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFolder</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IJavaElement</span><span class=\"o\">[]</span> <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getChildren</span><span class=\"o\">();</span>\n\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IJavaElement</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IPackageFragment</span> <span class=\"n\">frag</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">IPackageFragment</span><span class=\"o\">)</span> <span class=\"n\">element</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">frag</span><span class=\"o\">.</span><span class=\"na\">getChildren</span><span class=\"o\">().</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">frag</span><span class=\"o\">.</span><span class=\"na\">getNonJavaResources</span><span class=\"o\">().</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\t\t\t\t\t\t\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">getElementName</span><span class=\"o\">());</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">JavaModelException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">createBuildPropertiesFile</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IFile</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getBuildProperties</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">WorkspaceBuildModel</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">WorkspaceBuildModel</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IBuildModelFactory</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">getFactory</span><span class=\"o\">();</span>\n\n\t\t\t<span class=\"c1\">// BIN.INCLUDES</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IBuildEntry</span> <span class=\"n\">binEntry</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createEntry</span><span class=\"o\">(</span><span class=\"n\">IBuildEntry</span><span class=\"o\">.</span><span class=\"na\">BIN_INCLUDES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">fillBinIncludes</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">binEntry</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">getBuild</span><span class=\"o\">().</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">binEntry</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">fillBinIncludes</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"n\">IBuildEntry</span> <span class=\"n\">binEntry</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">binEntry</span><span class=\"o\">.</span><span class=\"na\">addToken</span><span class=\"o\">(</span><span class=\"n\">ICoreConstants</span><span class=\"o\">.</span><span class=\"na\">PLUGIN_FILENAME_DESCRIPTOR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">binEntry</span><span class=\"o\">.</span><span class=\"na\">addToken</span><span class=\"o\">(</span><span class=\"s\">\"META-INF/\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">setClasspath</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">JavaModelException</span><span class=\"o\">,</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IJavaProject</span> <span class=\"n\">javaProject</span> <span class=\"o\">=</span> <span class=\"n\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">// Set output folder</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">outputFolderName</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFullPath</span><span class=\"o\">().</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">outputFolderName</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">setOutputLocation</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">getClassPathEntries</span><span class=\"o\">(</span><span class=\"n\">javaProject</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">setRawClasspath</span><span class=\"o\">(</span><span class=\"n\">entries</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"n\">IProject</span> <span class=\"nf\">createProject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IWorkspaceRoot</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">ResourcesPlugin</span><span class=\"o\">.</span><span class=\"na\">getWorkspace</span><span class=\"o\">().</span><span class=\"na\">getRoot</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getProject</span><span class=\"o\">(</span><span class=\"n\">projectName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">open</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n\n\t\t<span class=\"n\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">addNatureToProject</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">PDE</span><span class=\"o\">.</span><span class=\"na\">PLUGIN_NATURE</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">addNatureToProject</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">NATURE_ID</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IFolder</span> <span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFolder</span><span class=\"o\">(</span><span class=\"n\">sourceFolderName</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">())</span>\n\t\t\t<span class=\"n\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">createFolder</span><span class=\"o\">(</span><span class=\"n\">folder</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"nf\">getClassPathEntries</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IJavaProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">internalClassPathEntries</span> <span class=\"o\">=</span> <span class=\"n\">getInternalClassPathEntries</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"n\">internalClassPathEntries</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n\t\t<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">internalClassPathEntries</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">entries</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">internalClassPathEntries</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// Set EE of new project</span>\n\t\t<span class=\"n\">String</span> <span class=\"n\">executionEnvironment</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">executionEnvironment</span> <span class=\"o\">=</span> <span class=\"n\">confExecutionEnvironment</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">setComplianceOptions</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">executionEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">createJREEntry</span><span class=\"o\">(</span><span class=\"n\">executionEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">createContainerEntry</span><span class=\"o\">();</span>\n\n\t\t<span class=\"k\">return</span> <span class=\"n\">entries</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"nf\">getInternalClassPathEntries</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IJavaProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sourceFolderName</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getProject</span><span class=\"o\">().</span><span class=\"na\">getFullPath</span><span class=\"o\">().</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">sourceFolderName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">newSourceEntry</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">entries</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">createManifest</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IFile</span> <span class=\"n\">fragmentXml</span> <span class=\"o\">=</span> <span class=\"n\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getFragmentXml</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IFile</span> <span class=\"n\">pluginXml</span> <span class=\"o\">=</span> <span class=\"n\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getPluginXml</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IFile</span> <span class=\"n\">manifest</span> <span class=\"o\">=</span> <span class=\"n\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getManifest</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">fModel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">WorkspaceBundlePluginModel</span><span class=\"o\">(</span><span class=\"n\">manifest</span><span class=\"o\">,</span> <span class=\"n\">pluginXml</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IPluginBase</span> <span class=\"n\">pluginBase</span> <span class=\"o\">=</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">targetVersion</span> <span class=\"o\">=</span> <span class=\"n\">configTargetVersion</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setSchemaVersion</span><span class=\"o\">(</span><span class=\"n\">TargetPlatformHelper</span><span class=\"o\">.</span><span class=\"na\">getSchemaVersionForTargetVersion</span><span class=\"o\">(</span><span class=\"n\">targetVersion</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setId</span><span class=\"o\">(</span><span class=\"n\">bundleId</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setVersion</span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"n\">projectName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setProviderName</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fModel</span> <span class=\"k\">instanceof</span> <span class=\"n\">IBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">IBundlePluginModelBase</span> <span class=\"n\">bmodel</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"n\">IBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"n\">fModel</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">((</span><span class=\"n\">IBundlePluginBase</span><span class=\"o\">)</span> <span class=\"n\">bmodel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">()).</span><span class=\"na\">setTargetVersion</span><span class=\"o\">(</span><span class=\"n\">targetVersion</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">bmodel</span><span class=\"o\">.</span><span class=\"na\">getBundleModel</span><span class=\"o\">().</span><span class=\"na\">getBundle</span><span class=\"o\">().</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">BUNDLE_MANIFESTVERSION</span><span class=\"o\">,</span> <span class=\"s\">\"2\"</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\n\t\t<span class=\"kd\">final</span> <span class=\"n\">IBundle</span> <span class=\"n\">bundle</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"n\">BundlePluginBase</span><span class=\"o\">)</span> <span class=\"n\">pluginBase</span><span class=\"o\">).</span><span class=\"na\">getBundle</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">exeEnvironment</span> <span class=\"o\">=</span> <span class=\"n\">confExecutionEnvironment</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">exeEnvironment</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">bundle</span><span class=\"o\">.</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"n\">Constants</span><span class=\"o\">.</span><span class=\"na\">BUNDLE_REQUIREDEXECUTIONENVIRONMENT</span><span class=\"o\">,</span> <span class=\"n\">exeEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"nf\">getCommaValuesFromPackagesSet</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">values</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">version</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">StringBuffer</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuffer</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"n\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">iterator</span><span class=\"o\">();</span>\n\t\t<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\",\\n \"</span><span class=\"o\">);</span> <span class=\"c1\">// space required for multiline headers</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">\";version=\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\";version=\\\"\"</span><span class=\"o\">).</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"o\">).</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\"\\\"\"</span><span class=\"o\">);</span> <span class=\"c1\">//$NON-NLS-2$</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>It feels like this code could be heavily simplified, but it does the job.</p>"},"author":{"name":{}},"category":[{"term":"pde"},{"term":"plugin"},{"term":"generation"},{"term":"programmatically"}],"summary":{"type":"html","$t":"I am currently working with eclipse projects. Lots of eclipse projects. So much that I want to generate eclipse projects using java code (I hope to write another article of the why of this soon)."}},{"title":{"type":"html","$t":"Object Algebras Composition"},"link":{"href":"https://mleduc.xyz/blog/scala/object/2016/10/20/object-algebra-composition.html","rel":"alternate","type":"text/html","title":"Object Algebras Composition"},"published":"2016-10-20T07:21:33-05:00","updated":"2016-10-20T07:21:33-05:00","id":"https://mleduc.xyz/blog/scala/object/2016/10/20/object-algebra-composition","content":{"type":"html","xml:base":"https://mleduc.xyz/blog/scala/object/2016/10/20/object-algebra-composition.html","$t":"<h1 id=\"introduction\">Introduction</h1>\n\n<p>This article is composed of two parts. The first part explains the concept of “object algebras” using a toy example. The second part reuse the same toy example and extends it.</p>\n\n<h1 id=\"object-algebras\">Object algebras</h1>\n\n<p>The expression problem, as presented in  <a href=\"https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/#sec-2\">Oleksandr Manzyuk’s blog</a>, is a way to offer the capability for a DSL to be extensible either in term of operations and in term of expression types.</p>\n\n<p>After reading <a href=\"http://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf\">Extensibility for the Masses - <em>Practical Extensibility with Object Algebras</em></a> I decided to give it a look and tried to add a few more features to the <a href=\"http://i.cs.hku.hk/~bruno/oa/\">example</a> provided by the authors.</p>\n\n<p>The architecture of the program is summarized in the following diagram :\n<img src=\"/blog/assets/2016-10-20-object-algebra-composition/object_algebra_example.svg\" alt=\"Schema Example Architecture\" /></p>\n\n<p><strong>PPrint</strong> and <strong>Eval</strong> are two operations which respectivelly pretty print a program and eval it to an integer.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">Eval</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">PPrint</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">print</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">String</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p><strong>ExpAlg</strong> and <strong>SubExpAlg</strong> are <em>object algebra interfaces</em> which can be used to define programs of the language. ExpAlg provides to operations <code class=\"highlighter-rouge\">lit(x: Int)</code> and <code class=\"highlighter-rouge\">add(e1: E, e2: E)</code> . SubExpAlg inherits from ExpAlg and add the notion of subtraction with the <code class=\"highlighter-rouge\">sub(e1: E, e2: E)</code> method.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">add</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">sub</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>The interpreters of the language are named <em>object algebras</em>. <strong>EvalExpAlg</strong> interprets  <strong>ExpAlg</strong> programs and evaluate an integer.</p>\n\n<p><strong>EvalSubExpAlg</strong> inherits of <strong>EvalExpAlg</strong> and evaluates <strong>SubExpAlg</strong> programs.</p>\n\n<p><strong>PrintExpAlg</strong> evaluates <strong>EvalExpAlg</strong> programs and return a string representation.</p>\n\n<p>Since both <strong>PrintExpAlg</strong> and <strong>EvalSubExpAlg</strong> are able to interpret <strong>SubExpAlg</strong> they are also able to interpret any language previously defined using <strong>ExpAlg</strong>.</p>\n\n<blockquote>\n  <p>This point is very important in language reuse. Using object algebras a developer</p>\n\n  <ul>\n    <li>is able to extend a language without modifications of the existing code base.</li>\n    <li>know that any program written with a current version of an algebra will be interpretable as well with any future extended interpreters of the language</li>\n  </ul>\n</blockquote>\n\n<p>In conclusion of this section, an example of the usage of our languages.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">object</span> <span class=\"nc\">Examples</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">exp1</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">](</span><span class=\"n\">alg</span> <span class=\"k\">:</span> <span class=\"kt\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n      <span class=\"n\">add</span><span class=\"o\">(</span><span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c1\">// An expression using subtraction too\n</span>  <span class=\"k\">def</span> <span class=\"n\">exp2</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">](</span><span class=\"n\">alg</span> <span class=\"k\">:</span> <span class=\"kt\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n      <span class=\"n\">sub</span><span class=\"o\">(</span><span class=\"n\">exp1</span><span class=\"o\">(</span><span class=\"n\">alg</span><span class=\"o\">),</span> <span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"n\">test</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"n\">ea</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"n\">esa</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalSubExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"n\">pa</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"n\">pa2</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpAlg2</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"Evaluation of exp1 \\\"\"</span> <span class=\"o\">+</span> <span class=\"n\">exp1</span><span class=\"o\">(</span><span class=\"n\">pa</span><span class=\"o\">).</span><span class=\"n\">print</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"\\\" is: \"</span> <span class=\"o\">+</span> <span class=\"n\">exp1</span><span class=\"o\">(</span><span class=\"n\">esa</span><span class=\"o\">).</span><span class=\"n\">eval</span><span class=\"o\">())</span>\n    <span class=\"c1\">// Evaluation of exp1 \"3 + 4\" is: 7\n</span>    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">\"Evaluation of exp2 \\\"\"</span> <span class=\"o\">+</span> <span class=\"n\">exp2</span><span class=\"o\">(</span><span class=\"n\">pa</span><span class=\"o\">).</span><span class=\"n\">print</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"\\\" is: \"</span> <span class=\"o\">+</span> <span class=\"n\">exp2</span><span class=\"o\">(</span><span class=\"n\">esa</span><span class=\"o\">).</span><span class=\"n\">eval</span><span class=\"o\">())</span>\n    <span class=\"c1\">// Evaluation of exp2 \"3 + 4 - 4\" is: 3\n</span>  <span class=\"o\">}</span>\n\n  <span class=\"n\">text</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h1 id=\"extending-an-object-algebra\">Extending an Object algebra</h1>\n\n<p>In order to study the advantages and limitation of this approach we are going to extend the previously explained use case with the notions of boolean operations (&amp;&amp;, ||, ==, !). We will also offer a way to guaranty that the left and side and right and side of the <code class=\"highlighter-rouge\">==</code> operator are of the same type.</p>\n\n<p><img src=\"/blog/assets/2016-10-20-object-algebra-composition/object_algebra_extended.svg\" alt=\"Schema Example Architecture\" /></p>\n\n<h2 id=\"boolean-operations\">Boolean operations</h2>\n\n<p>The first step is to create a language dedicated to the definition of boolean operation, the <em>object algebra interface</em> <strong>BoolExpAlg</strong> (the type definition might be hard to understand and will be detail in the next section).</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"n\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"n\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"n\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"n\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"n\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>We are now able to define the corresponding <em>object algebras</em> for boolean interpretation and pretty printing.</p>\n\n<p>But first we are going to update the definition of the <strong>Eval</strong> trait and add a parametrized type.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\t<span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">X</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>By doing so we allow the <em>object algebras</em> of integer and boolean to share a common type.</p>\n\n<p>Now that it done, here is the code of the <em>object algebras</em>.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">EvalBoolExpAlg</span> <span class=\"k\">extends</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"o\">=:=[</span><span class=\"kt\">F1</span>, <span class=\"kt\">F2</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">exp</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"n\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>For now we have a new language dedicated to the definition and interpretation of boolean expressions, completely decouple from our previous languages definitions.</p>\n\n<p>An example of program in this language :</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">program3</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"n\">equal</span><span class=\"o\">(</span><span class=\"n\">trueE</span><span class=\"o\">(),</span> <span class=\"n\">falseE</span><span class=\"o\">())</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">printB</span><span class=\"k\">:</span> <span class=\"kt\">PrintExpBoolAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpBoolAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n<span class=\"k\">val</span> <span class=\"n\">evalB</span><span class=\"k\">:</span> <span class=\"kt\">EvalBoolExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalBoolExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">\"\"\"${program3(printB).print()} ---&gt; ${program3(evalB).eval()}\"\"\"</span><span class=\"o\">)</span>\n<span class=\"c1\">// (true == false) ---&gt; false\n</span></code></pre>\n</div>\n\n<h2 id=\"language-composition\">Language composition</h2>\n\n<p>We are now at a point where we can ask ourselves, can I mix easily my integer language with my boolean ?</p>\n\n<p>I hope that the following program will proves you that the answer is yes !</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">program4</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span>, <span class=\"kt\">G</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">G</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"n\">equal</span><span class=\"o\">(</span><span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">sub</span><span class=\"o\">(</span><span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">printIB</span><span class=\"k\">:</span> <span class=\"kt\">PrintExpBoolAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">PrintExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpBoolAlg</span><span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"nc\">PrintExpAlg</span> <span class=\"o\">{}</span>\n<span class=\"k\">val</span> <span class=\"n\">evalIB</span><span class=\"k\">:</span> <span class=\"kt\">EvalBoolExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">EvalSubExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalBoolExpAlg</span><span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"nc\">EvalSubExpAlg</span> <span class=\"o\">{}</span>\n<span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">\"\"\"${program4(printIB).print()} ---&gt; ${program4(evalIB).eval()}\"\"\"</span><span class=\"o\">)</span>\n<span class=\"c1\">// (1 == 2 - 1) ---&gt; true\n</span></code></pre>\n</div>\n\n<p>Only by reusing the previously defined definitions and using <a href=\"http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html\">traits compositions</a>. We have defined a language supporting the evaluation of integer expressions, boolean expression and especially the evaluation of the equality of two integer using a boolean operator !</p>\n\n<h2 id=\"more-details-about-the-equality\">More details about the equality.</h2>\n\n<p>I wanted the equal operation of be type-safe. In other words in did not want the <code class=\"highlighter-rouge\">equal</code> operation to be able to compare apple and bananas (or integer and boolean).</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"n\">program4</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span>, <span class=\"kt\">G</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">G</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"k\">val</span> <span class=\"n\">p1</span> <span class=\"k\">=</span> <span class=\"n\">equal</span><span class=\"o\">(</span><span class=\"n\">trueE</span><span class=\"o\">(),</span> <span class=\"n\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">// does not compile !\n</span><span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>But in the other hand I wanted my <code class=\"highlighter-rouge\">equal</code> operation to be extensible. Any new language with comparable elements must be able to reuse this operation easily.</p>\n\n<p>To meet those two objectives the following pieces of code have been needed.</p>\n\n<div class=\"language-scala highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// object algebra interface :\n</span><span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"c1\">// knowing a type A, E is a subtype of A\n</span>  <span class=\"c1\">// [...]\n</span>\n  <span class=\"c1\">// knowing a type A, F1 and F2 are both subtype of A\n</span>  <span class=\"c1\">// the implicit enforce the type equality of F1 and F2 si both F1 and F2 are different subtypes of A, the scala refuses to compile.\n</span>  <span class=\"k\">def</span> <span class=\"n\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// Eval[_] defines that anything \"evaluable\" is accepted in the equal method.\n// Eval[Bool] defines the type of the object algebra itself.\n</span><span class=\"k\">trait</span> <span class=\"nc\">EvalBoolExpAlg</span> <span class=\"k\">extends</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n\n  <span class=\"c1\">// the signature of the equal method, derived from the previous type definition\n</span>  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"o\">=:=[</span><span class=\"kt\">F1</span>, <span class=\"kt\">F2</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">right</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>For now my opinion of object algebras is optimistic and even if the development of more complex DSL might lead to unexpected issues, the implementation of this small example have been surprisingly easy.</p>\n\n<p>We can still observe that in order to add more flexibility we had to edit once a previously defined code. This is not mandatory and more verbose solution might be envisioned to do the same thing without touching any previously defined source code.</p>\n\n<p>Also finding out a working definition of <strong>BoolExpAlg</strong> was not straightforward (but I am not an experienced Scala developer !).</p>\n\n<p>The full code of the snippets found in the article can be found here : <a href=\"https://gist.github.com/manuelleduc/2607f15407017daf0d6ae9a987ece243\">https://gist.github.com/manuelleduc/2607f15407017daf0d6ae9a987ece243</a></p>\n\n<p>I hope this article gave you a first insight of the advantages and limitations of this approach of DSL definition and reuse.</p>\n\n<h1 id=\"good-reads\">Good reads</h1>\n\n<p>I have been introduced to the concept of object algebras by this awesome talk :  “<a href=\"https://www.youtube.com/watch?v=snbsYyBS4Bs\">Using Object Algebras To Design Embedded Domain Specific Languages</a>” by <a href=\"http://julien.richard-foy.fr/\">Julien Richard-Foy</a> at <a href=\"http://curry-on.org/2016/\">Curry On’16</a>.</p>"},"author":{"name":{}},"category":[{"term":"object"},{"term":"algebras"},{"term":"composition"}],"summary":{"type":"html","$t":"Introduction"}}]}}