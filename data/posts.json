[{"title":"Secret Santa for Java Programmers","link":"https://mleduc.xyz/java/2019/11/28/secret-santa.html","pubDate":"2019-11-28T09:54:00.000Z","author":"Manuel Leduc","content":"<p>Probably a little naive, I first though writing a blog post about secret Santa would be fun and original. Turns out it might be fun but definitely not original, and many wrote about the topic before me (<a href=\"http://www.hakank.org/constraint_programming_blog/2009/12/merry_christmas_secret_santas.html\">here</a>, <a href=\"https://www.tjmahr.com/secret-santa-graph-traversal/\">here</a> or <a href=\"https://blogs.msdn.microsoft.com/steverowe/2006/12/19/secret-santa-is-np-complete/\">there</a>).</p>\n\n<p>Luckily for me, I found fewer resources based on Java and constraint solvers.\nIn addition, I have my own set of functional constraints. That gave me the motivation to write this post. So first thing first, let me define the rules of my secret Santa.</p>\n\n<ul>\n  <li><strong>RULE 1</strong>: Everybody must give and receive a gift.</li>\n  <li><strong>RULE 2</strong>: No member of the same family should share gifts with each other. That also implies that nobody is gifting himself.</li>\n  <li><strong>RULE 3</strong>: Participants can be present on the 24th or 25th, and gift should be shared between people present on the same day.</li>\n  <li><strong>RULE 4</strong>: The distribution of gifts should not form sub-sets of people, in other word the chain of gifts must be unique.</li>\n</ul>\n\n<h2 id=\"problem-specification\">Problem specification</h2>\n\n<p>The first step of problem solving is to be able to express the problem and the solution easily.\nTo do so, I defined three classes, two to express the problem (Person and Family), and one for the solution (GiftSolution).\nA person has a name and a mail, might be present on the 24th or 25th and has a family.\nA family has a (last) name and also has a notion of presence on the 24th or the 25th. \nFor a person, the notion of presence of the family is taken into account only of its own presence is undefined (null).\nI also defined a bidirectional relation between families and people to preserve the model consistency with ad hoc mechanisms.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Family</span> <span class=\"n\">family</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Boolean</span> <span class=\"n\">on24</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Boolean</span> <span class=\"n\">on25</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">mail</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"nc\">Family</span> <span class=\"n\">family</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">mail</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">family</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">mail</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Person</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"nc\">Family</span> <span class=\"n\">family</span><span class=\"o\">,</span> <span class=\"nc\">Boolean</span> <span class=\"n\">on24</span><span class=\"o\">,</span>\n      <span class=\"nc\">Boolean</span> <span class=\"n\">on25</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">mail</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">family</span> <span class=\"o\">=</span> <span class=\"n\">family</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">family</span><span class=\"o\">.</span><span class=\"na\">getPeople</span><span class=\"o\">().</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">);</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">on24</span> <span class=\"o\">=</span> <span class=\"n\">on24</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">on25</span> <span class=\"o\">=</span> <span class=\"n\">on25</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">mail</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// generic accessors...</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isOn24</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">on24</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">on24</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">family</span><span class=\"o\">.</span><span class=\"na\">isOn24</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isOn25</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">on25</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">on25</span><span class=\"o\">;</span>\n        <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">family</span><span class=\"o\">.</span><span class=\"na\">isOn25</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Family</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">on24</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">boolean</span> <span class=\"n\">on25</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Family</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">on24</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">on25</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">on24</span> <span class=\"o\">=</span> <span class=\"n\">on24</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">on25</span> <span class=\"o\">=</span> <span class=\"n\">on25</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// generic accessors...</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setPeople</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">people</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">personne</span> <span class=\"o\">-&gt;</span> <span class=\"n\">personne</span><span class=\"o\">.</span><span class=\"na\">setFamily</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">people</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"no\">T</span><span class=\"o\">,</span> <span class=\"no\">T1</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"no\">T</span> <span class=\"n\">key</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"no\">T1</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Pair</span><span class=\"o\">(</span><span class=\"no\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"no\">T1</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">key</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"no\">T</span> <span class=\"nf\">getKey</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">key</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"no\">T1</span> <span class=\"nf\">getValue</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GiftSolution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">,</span> <span class=\"nc\">Person</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">attributions</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">addPair</span><span class=\"o\">(</span><span class=\"nc\">Person</span> <span class=\"n\">from</span><span class=\"o\">,</span> <span class=\"nc\">Person</span> <span class=\"n\">to</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">attributions</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Pair</span><span class=\"o\">&lt;&gt;(</span><span class=\"n\">from</span><span class=\"o\">,</span> <span class=\"n\">to</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">,</span> <span class=\"nc\">Person</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">getAttributions</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">attributions</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Defining a specific instance of the problem is then quite straightforward.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Family</span> <span class=\"n\">fA</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Family</span><span class=\"o\">(</span><span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n<span class=\"nc\">Person</span> <span class=\"n\">pA1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">\"pA1\"</span><span class=\"o\">,</span> <span class=\"n\">fA</span><span class=\"o\">,</span> <span class=\"s\">\"p1@a.com\"</span><span class=\"o\">);</span>\n<span class=\"nc\">Person</span> <span class=\"n\">pA2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">\"pA2\"</span><span class=\"o\">,</span> <span class=\"n\">fA</span><span class=\"o\">,</span> <span class=\"s\">\"p2@a.com\"</span><span class=\"o\">);</span>\n<span class=\"nc\">Family</span> <span class=\"n\">fB</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Family</span><span class=\"o\">(</span><span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">);</span>\n<span class=\"nc\">Person</span> <span class=\"n\">pB1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">\"pB1\"</span><span class=\"o\">,</span> <span class=\"n\">fB</span><span class=\"o\">,</span> <span class=\"s\">\"p1@b.com\"</span><span class=\"o\">);</span>\n<span class=\"nc\">Person</span> <span class=\"n\">pB2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">\"pB2\"</span><span class=\"o\">,</span> <span class=\"n\">fB</span><span class=\"o\">,</span> <span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"kc\">false</span><span class=\"o\">,</span> <span class=\"s\">\"tp2@b.com\"</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>This piece of code defines four people, dispatched in two families of two. The last person isn’t present on the 25th.</p>\n\n<p>That done, the challenge is now to link the problem and the solution!</p>\n\n<h2 id=\"problem-solving-with-constraint-solving\">Problem solving with constraint solving</h2>\n\n<p>I will not go into the details of constraint solvers as the documentation of <a href=\"https://choco-solver.readthedocs.io/en/latest/?badge=latest\">choco</a> is much clearer than anything I could write.\nBut to give you a broad view of constraint solving, the idea is to translate a problem into a set of variables and their potential values and a set of constraints in between these variables.\nThen the constraint solver automatically find if a solution exist, and the sets of values that satisfy the constraints.\nIn the code below, we define three sets of constraints, each encoding one of the rules we defined earlier, at the exception of the fourth.\nBut we’ll come back to that one later.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Problem</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">Family</span><span class=\"o\">&gt;</span> <span class=\"n\">familySet</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&gt;();</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Problem</span><span class=\"o\">(</span><span class=\"nc\">Person</span><span class=\"o\">...</span> <span class=\"n\">people</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// precompute the list of people and families.</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">people</span><span class=\"o\">.</span><span class=\"na\">addAll</span><span class=\"o\">(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">people</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">people</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">-&gt;</span> <span class=\"n\">familySet</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">getFamily</span><span class=\"o\">()));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Model</span> <span class=\"nf\">createModel</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Model</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Model</span><span class=\"o\">(</span><span class=\"s\">\"Gift Problem\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// encoding the people into model's variables.</span>\n        <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n        <span class=\"nc\">IntVar</span><span class=\"o\">[]</span> <span class=\"n\">persIntVar</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">IntVar</span><span class=\"o\">[</span><span class=\"n\">size</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">size</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">String</span> <span class=\"n\">firstName</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">getName</span><span class=\"o\">();</span>\n            <span class=\"nc\">IntVar</span> <span class=\"n\">intVar</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">intVar</span><span class=\"o\">(</span><span class=\"s\">\"var_\"</span> <span class=\"o\">+</span> <span class=\"n\">firstName</span> <span class=\"o\">+</span> <span class=\"s\">\"_\"</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">persIntVar</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">intVar</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// RULE 1: Everybody must give and receive a gift.</span>\n        <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">allDifferent</span><span class=\"o\">(</span><span class=\"n\">persIntVar</span><span class=\"o\">).</span><span class=\"na\">post</span><span class=\"o\">();</span>\n\n        <span class=\"c1\">// RULE 2: no gift in a familly</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Family</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">familySet</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Person</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">getPeople</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Person</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">getPeople</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">pidx</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">p2idx</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">);</span>\n                    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">arithm</span><span class=\"o\">(</span><span class=\"n\">persIntVar</span><span class=\"o\">[</span><span class=\"n\">pidx</span><span class=\"o\">],</span> <span class=\"s\">\"!=\"</span><span class=\"o\">,</span> <span class=\"n\">p2idx</span><span class=\"o\">).</span><span class=\"na\">post</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// RULE 3: gifts can only be shared between people present the same day.</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Person</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">people</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Person</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">people</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"kt\">boolean</span> <span class=\"n\">presentOnTheSameDay</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">isOn24</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"na\">isOn24</span><span class=\"o\">()</span>\n                        <span class=\"o\">||</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">isOn25</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"na\">isOn25</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">presentOnTheSameDay</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">pidx</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">);</span>\n                    <span class=\"kt\">int</span> <span class=\"n\">p2idx</span> <span class=\"o\">=</span> <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">p2</span><span class=\"o\">);</span>\n                    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">arithm</span><span class=\"o\">(</span><span class=\"n\">persIntVar</span><span class=\"o\">[</span><span class=\"n\">pidx</span><span class=\"o\">],</span> <span class=\"s\">\"!=\"</span><span class=\"o\">,</span> <span class=\"n\">p2idx</span><span class=\"o\">).</span><span class=\"na\">post</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>So far we have a solution that can yield valid solutions taking into account the three first rules.</p>\n\n<p>But, the figure below depict a solution that conforms to the first four rules, but not the fourth, since we have two sub-sets of people gifting each other.</p>\n\n<p style=\"text-align: center;\">\n<img src=\"/assets/secret_santa_1.png\" />\n</p>\n\n<p>I must admit that I am not an expert of constraint solvers, so I might have missed something, but I did not find a way to encode the fourth rule into the model.</p>\n\n<p>Instead, I simply integrated it as a precondition, and I loop over the potential solutions yield by the Choco model until a solution that conforms to the fourth rule matches.\nThe validation of the fourth rule is based on the <code class=\"highlighter-rouge\">isSingleLoop</code> method presented below.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isSingleLoop</span><span class=\"o\">(</span><span class=\"nc\">GiftSolution</span> <span class=\"n\">solution</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">,</span> <span class=\"nc\">Person</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">attributions</span> <span class=\"o\">=</span> <span class=\"n\">solution</span><span class=\"o\">.</span><span class=\"na\">getAttributions</span><span class=\"o\">();</span>\n    <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">attributions</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span>\n\n    <span class=\"kd\">final</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n    <span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">,</span> <span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">attributions</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n        <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">());</span>\n        <span class=\"kd\">final</span> <span class=\"nc\">Pair</span><span class=\"o\">&lt;</span><span class=\"nc\">Person</span><span class=\"o\">,</span> <span class=\"nc\">Person</span><span class=\"o\">&gt;</span> <span class=\"n\">currentF</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"o\">;</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">attributions</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">(),</span> <span class=\"n\">currentF</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()))</span>\n                <span class=\"o\">.</span><span class=\"na\">findFirst</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">size</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Without extensive experimentation, even with eighteen people and five families, finding a solution is instantaneous.</p>\n\n<h2 id=\"adding-randomness\">Adding randomness</h2>\n\n<p>I observed that, using  Choco, the returned solution is deterministic for a given problem.\nIn other words, executing twice the same program yield the same solution.\nBut it is funnier if the secret gift givers can’t be predicted.\nTo do so, a simple shuffle of the list of participants before the generation of the  Choco model is enough to randomize the yield solutions.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// [...]</span>\n<span class=\"nc\">Model</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Model</span><span class=\"o\">(</span><span class=\"s\">\"Gift Problem\"</span><span class=\"o\">);</span>\n\n<span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">shuffle</span><span class=\"o\">(</span><span class=\"n\">people</span><span class=\"o\">);</span>\n<span class=\"c1\">// [...]</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Using only a few lines of code we managed to find interesting solutions to a non-trivial but fun problem.\nI simply integrated the code presented in this post with a mail sending library to notify every member of my family to whom they are to give a gift.</p>\n\n<p>A full version of this project can be found on <a href=\"https://github.com/manuelleduc/gitftproblem/tree/master/core/src/main/java/fr/mleduc/giftproblem/core\">github</a>.\nI’m currently working on its integration into a web service using <a href=\"https://quarkus.io/\">Quarkus</a> for the backend and <a href=\"https://vuejs.org/\">Vue.js</a> for the frontend.\nThose are really fun and productive frameworks and I hope to write something about that soon.</p>","contentSnippet":"Probably a little naive, I first though writing a blog post about secret Santa would be fun and original. Turns out it might be fun but definitely not original, and many wrote about the topic before me (here, here or there).\n\nLuckily for me, I found fewer resources based on Java and constraint solvers.\nIn addition, I have my own set of functional constraints. That gave me the motivation to write this post. So first thing first, let me define the rules of my secret Santa.\n\n\n  RULE 1: Everybody must give and receive a gift.\n  RULE 2: No member of the same family should share gifts with each other. That also implies that nobody is gifting himself.\n  RULE 3: Participants can be present on the 24th or 25th, and gift should be shared between people present on the same day.\n  RULE 4: The distribution of gifts should not form sub-sets of people, in other word the chain of gifts must be unique.\n\n\nProblem specification\n\nThe first step of problem solving is to be able to express the problem and the solution easily.\nTo do so, I defined three classes, two to express the problem (Person and Family), and one for the solution (GiftSolution).\nA person has a name and a mail, might be present on the 24th or 25th and has a family.\nA family has a (last) name and also has a notion of presence on the 24th or the 25th. \nFor a person, the notion of presence of the family is taken into account only of its own presence is undefined (null).\nI also defined a bidirectional relation between families and people to preserve the model consistency with ad hoc mechanisms.\n\npublic class Person {\n    private String name;\n    private Family family;\n    private Boolean on24;\n    private Boolean on25;\n    private String mail;\n\n    public Person(String name, Family family, String mail) {\n        this(name, family, null, null, mail);\n    }\n\n    public Person(String name, Family family, Boolean on24,\n      Boolean on25, String mail) {\n        this.name = name;\n        this.family = family;\n        this.family.getPeople().add(this);\n        this.on24 = on24;\n        this.on25 = on25;\n        this.mail = mail;\n    }\n\n    // generic accessors...\n\n    public boolean isOn24() {\n        if (on24 != null) return on24;\n        else return this.family.isOn24();\n    }\n\n    public boolean isOn25() {\n        if (on25 != null) return on25;\n        else return this.family.isOn25();\n    }\n}\n\npublic class Family {\n    private String name;\n    private List<Person> people = new ArrayList<>();\n    private boolean on24;\n    private boolean on25;\n\n    public Family(String name, boolean on24, boolean on25) {\n        this.name = name;\n        this.on24 = on24;\n        this.on25 = on25;\n    }\n\n    // generic accessors...\n\n    public void setPeople(List<Person> people) {\n        people.forEach(personne -> personne.setFamily(this));\n        this.people = people;\n    }\n}\n\npublic class Pair<T, T1> {\n    private T key;\n    private T1 value;\n\n    public Pair(T a, T1 b) {\n        this.key = a;\n        this.value = b;\n    }\n\n    public T getKey() { return key; }\n    public T1 getValue() { return value; }\n}\n\npublic class GiftSolution {\n    private List<Pair<Person, Person>> attributions = new ArrayList<>();\n\n    public void addPair(Person from, Person to) {\n        this.attributions.add(new Pair<>(from, to));\n    }\n\n    public List<Pair<Person, Person>> getAttributions() {\n        return attributions;\n    }\n}\n\n\nDefining a specific instance of the problem is then quite straightforward.\n\nFamily fA = new Family(\"a\", true, true);\nPerson pA1 = new Person(\"pA1\", fA, \"p1@a.com\");\nPerson pA2 = new Person(\"pA2\", fA, \"p2@a.com\");\nFamily fB = new Family(\"a\", true, true);\nPerson pB1 = new Person(\"pB1\", fB, \"p1@b.com\");\nPerson pB2 = new Person(\"pB2\", fB, true, false, \"tp2@b.com\");\n\n\nThis piece of code defines four people, dispatched in two families of two. The last person isn’t present on the 25th.\n\nThat done, the challenge is now to link the problem and the solution!\n\nProblem solving with constraint solving\n\nI will not go into the details of constraint solvers as the documentation of choco is much clearer than anything I could write.\nBut to give you a broad view of constraint solving, the idea is to translate a problem into a set of variables and their potential values and a set of constraints in between these variables.\nThen the constraint solver automatically find if a solution exist, and the sets of values that satisfy the constraints.\nIn the code below, we define three sets of constraints, each encoding one of the rules we defined earlier, at the exception of the fourth.\nBut we’ll come back to that one later.\n\npublic class Problem {\n\n    private List<Person> people = new ArrayList<>();\n    private Set<Family> familySet = new HashSet<>();\n\n    public Problem(Person... people) {\n        // precompute the list of people and families.\n        this.people.addAll(Arrays.asList(people));\n        this.people.forEach(p -> familySet.add(p.getFamily()));\n    }\n\n    private Model createModel() {\n        Model model = new Model(\"Gift Problem\");\n\n        // encoding the people into model's variables.\n        int size = people.size();\n        IntVar[] persIntVar = new IntVar[size];\n        for (int i = 0; i < size; i++) {\n            String firstName = people.get(i).getName();\n            IntVar intVar = model.intVar(\"var_\" + firstName + \"_\" + i, +0, size - 1);\n            persIntVar[i] = intVar;\n        }\n\n        // RULE 1: Everybody must give and receive a gift.\n        model.allDifferent(persIntVar).post();\n\n        // RULE 2: no gift in a familly\n        for (Family f : familySet) {\n            for (Person p : f.getPeople()) {\n                for (Person p2 : f.getPeople()) {\n                    int pidx = people.indexOf(p);\n                    int p2idx = people.indexOf(p2);\n                    model.arithm(persIntVar[pidx], \"!=\", p2idx).post();\n                }\n            }\n        }\n\n        // RULE 3: gifts can only be shared between people present the same day.\n        for (Person p : people) {\n            for (Person p2 : people) {\n                boolean presentOnTheSameDay = p.isOn24() && p2.isOn24()\n                        || p.isOn25() && p2.isOn25();\n                if (!presentOnTheSameDay) {\n                    int pidx = people.indexOf(p);\n                    int p2idx = people.indexOf(p2);\n                    model.arithm(persIntVar[pidx], \"!=\", p2idx).post();\n                }\n            }\n        }\n\n        return model;\n    }\n}\n\n\nSo far we have a solution that can yield valid solutions taking into account the three first rules.\n\nBut, the figure below depict a solution that conforms to the first four rules, but not the fourth, since we have two sub-sets of people gifting each other.\n\n\n\n\n\nI must admit that I am not an expert of constraint solvers, so I might have missed something, but I did not find a way to encode the fourth rule into the model.\n\nInstead, I simply integrated it as a precondition, and I loop over the potential solutions yield by the Choco model until a solution that conforms to the fourth rule matches.\nThe validation of the fourth rule is based on the isSingleLoop method presented below.\n\npublic static boolean isSingleLoop(GiftSolution solution) {\n    List<Pair<Person, Person>> attributions = solution.getAttributions();\n    int size = attributions.size();\n\n    final List<Person> lst = new ArrayList<>();\n    Pair<Person, Person> current = attributions.get(0);\n    while (!lst.contains(current.getKey())) {\n        lst.add(current.getKey());\n        final Pair<Person, Person> currentF = current;\n        current = attributions.stream()\n                .filter(p -> Objects.equals(p.getKey(), currentF.getValue()))\n                .findFirst()\n                .get();\n    }\n\n    return lst.size() == size;\n}\n\n\nWithout extensive experimentation, even with eighteen people and five families, finding a solution is instantaneous.\n\nAdding randomness\n\nI observed that, using  Choco, the returned solution is deterministic for a given problem.\nIn other words, executing twice the same program yield the same solution.\nBut it is funnier if the secret gift givers can’t be predicted.\nTo do so, a simple shuffle of the list of participants before the generation of the  Choco model is enough to randomize the yield solutions.\n\n// [...]\nModel model = new Model(\"Gift Problem\");\n\nCollections.shuffle(people);\n// [...]\n\n\nConclusion\n\nUsing only a few lines of code we managed to find interesting solutions to a non-trivial but fun problem.\nI simply integrated the code presented in this post with a mail sending library to notify every member of my family to whom they are to give a gift.\n\nA full version of this project can be found on github.\nI’m currently working on its integration into a web service using Quarkus for the backend and Vue.js for the frontend.\nThose are really fun and productive frameworks and I hope to write something about that soon.","id":"https://mleduc.xyz/java/2019/11/28/secret-santa","isoDate":"2019-11-28T09:54:00.000Z"},{"title":"ClojureScript Quil Demo","link":"https://mleduc.xyz/clojure/clojurescript/quil/processing/generative/art/2019/06/12/clojurescript-quil-demo.html","pubDate":"2019-06-12T13:37:00.000Z","author":"Manuel Leduc","content":"<div id=\"hello-quil\"></div>\n<script src=\"/assets/2019-06-12-clojurescript-quil-demo/js/main.js\"></script>\n\n<script>hello_quil.core.run_sketch()</script>\n\n<div class=\"language-clojure highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">(</span><span class=\"nf\">ns</span><span class=\"w\"> </span><span class=\"n\">hello-quil.core</span><span class=\"w\">\n  </span><span class=\"p\">(</span><span class=\"no\">:require</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">quil.core</span><span class=\"w\"> </span><span class=\"no\">:as</span><span class=\"w\"> </span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"no\">:include-macros</span><span class=\"w\"> </span><span class=\"n\">true</span><span class=\"p\">]</span><span class=\"w\">\n            </span><span class=\"p\">[</span><span class=\"n\">quil.middleware</span><span class=\"w\"> </span><span class=\"no\">:as</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"p\">]))</span><span class=\"w\">\n\n\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">max-itt</span><span class=\"w\"> </span><span class=\"mi\">250</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"p\">(</span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"w\"> </span><span class=\"mi\">740</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"p\">(</span><span class=\"k\">defn</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n  </span><span class=\"p\">(</span><span class=\"nf\">q/color-mode</span><span class=\"w\"> </span><span class=\"no\">:hsb</span><span class=\"w\"> </span><span class=\"mi\">360</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"w\">\n  </span><span class=\"p\">{</span><span class=\"no\">:color</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"no\">:angle</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">})</span><span class=\"w\">\n\n</span><span class=\"p\">(</span><span class=\"k\">defn</span><span class=\"w\"> </span><span class=\"n\">update-state</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"no\">:itt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">:itt</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)})</span><span class=\"w\">\n\n</span><span class=\"p\">(</span><span class=\"k\">defn</span><span class=\"w\"> </span><span class=\"n\">power-curve</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n  </span><span class=\"p\">(</span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">q/random</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">))]</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"k\">cond</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\">\n          </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n          </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n          </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n          </span><span class=\"no\">:else</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span><span class=\"w\">\n\n</span><span class=\"p\">(</span><span class=\"k\">defn</span><span class=\"w\"> </span><span class=\"n\">draw-state</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">state</span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">(</span><span class=\"k\">let</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"no\">:itt</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">)]</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">=</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">q/background</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">))</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"nf\">q/translate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"p\">))</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"nf\">q/rotate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"mf\">360.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">max-itt</span><span class=\"p\">))</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"nf\">q/fill</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"nf\">q/stroke-weight</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">power-curve</span><span class=\"p\">))</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"nf\">q/ellipse</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">q/random</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">*</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"w\">\n    </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">&gt;</span><span class=\"w\"> </span><span class=\"n\">itt</span><span class=\"w\"> </span><span class=\"n\">max-itt</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nf\">q/no-loop</span><span class=\"p\">))))</span><span class=\"w\">\n\n</span><span class=\"p\">(</span><span class=\"k\">defn</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"no\">:export</span><span class=\"w\"> </span><span class=\"n\">run-sketch</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n  </span><span class=\"p\">(</span><span class=\"nf\">q/defsketch</span><span class=\"w\"> </span><span class=\"n\">hello-quil</span><span class=\"w\">\n               </span><span class=\"no\">:host</span><span class=\"w\"> </span><span class=\"s\">\"hello-quil\"</span><span class=\"w\">\n               </span><span class=\"no\">:size</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">width</span><span class=\"w\"> </span><span class=\"n\">width</span><span class=\"p\">]</span><span class=\"w\">\n               </span><span class=\"no\">:setup</span><span class=\"w\"> </span><span class=\"n\">setup</span><span class=\"w\">\n               </span><span class=\"no\">:update</span><span class=\"w\"> </span><span class=\"n\">update-state</span><span class=\"w\">\n               </span><span class=\"no\">:draw</span><span class=\"w\"> </span><span class=\"n\">draw-state</span><span class=\"w\">\n               </span><span class=\"no\">:middleware</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">m/fun-mode</span><span class=\"p\">]))</span><span class=\"w\">\n</span></code></pre></div></div>","contentSnippet":"hello_quil.core.run_sketch()\n\n(ns hello-quil.core\n  (:require [quil.core :as q :include-macros true]\n            [quil.middleware :as m]))\n\n\n(def max-itt 250)\n(def width 740)\n\n(defn setup []\n  (q/color-mode :hsb 360 100 100)\n  {:color 0 :angle 0})\n\n(defn update-state [state] {:itt (+ (:itt state) 1)})\n\n(defn power-curve []\n  (let [i (int (q/random 1 30))]\n    (cond (= i 1) 6\n          (= i 2) 2\n          (= i 3) 2\n          (= i 4) 2\n          :else 1)))\n\n(defn draw-state [state]\n  (let [itt (:itt state)]\n    (if (= itt 0) (q/background 255))\n    (q/translate (* 0.25 width) (* 0.25 width))\n    (q/rotate (/ (* itt 360.0) max-itt))\n    (q/fill 0 0 0 0.0)\n    (q/stroke-weight (power-curve))\n    (q/ellipse (+ 50 (q/random 0 itt)) 0 (* itt 10) (* itt 10))\n    (if (> itt max-itt) (q/no-loop))))\n\n(defn ^:export run-sketch []\n  (q/defsketch hello-quil\n               :host \"hello-quil\"\n               :size [width width]\n               :setup setup\n               :update update-state\n               :draw draw-state\n               :middleware [m/fun-mode]))","id":"https://mleduc.xyz/clojure/clojurescript/quil/processing/generative/art/2019/06/12/clojurescript-quil-demo","isoDate":"2019-06-12T13:37:00.000Z"},{"title":"Does javac cleanup useless type casts?","link":"https://mleduc.xyz/javac/javap/cast/java/compiler/2019/03/20/explicit-cast-cleanup.html","pubDate":"2019-03-20T11:04:00.000Z","author":"Manuel Leduc","content":"<p>Often, writing code requires to test assumptions.\nThe easiest way is often to do some research on the net.\nBut when the first few queries do not return a useful result, it is time to test the assumption by ourselves.</p>\n\n<p>In my case, I was wondering whether explicitly casting a variable to its static type introduces a cast in the compiled bytecode<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.\nFor instance, in the program below the cast from <code class=\"highlighter-rouge\">int</code> to <code class=\"highlighter-rouge\">int</code> is useless and could be removed during compilation.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(((</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>Of course, if written by hand, the best design decision is to simply remove the cast and to continue coding.\nBut, in my case, the Java code is generated by a compiler, which left me two choices.\nEither add some logic to my compiler and remove useless casts during code generation.\nOr, left them in place and let the Java compiler do the heavy lifting.</p>\n\n<p>I’d rather avoid complexifying my compiler for now, and I’d be happier with a few useless casts in the generated Java source code, but only if they are finally removed from the Java bytecode.</p>\n\n<p>This is why I want to validate the following question:</p>\n\n<blockquote>\n  <p>Does javac cleanup useless type cast?</p>\n</blockquote>\n\n<!--The second solution is (subjectively) better even if implies tradeoffs, for instance an harder to read generated code due to often useless casts scatered on the generated code\n#, and more importantly, potential cast in the compile Java code (the assumption we want to validate in this post).\n\nIf this assumption is valid, I can consider this design decision viable (and this is a very personal and subjective opinion) and better than the complexification of my compiler logic.\n\nIn the rest of the article I want to explore how to valid the following hypothesis.\n\n> Does `javac` remove useless cast during compilation. -->\n\n<p>I based my experiment on the sample below, where a <code class=\"highlighter-rouge\">callMe(B b)</code> method is called three times on different configurations.\nThe first call is our baseline, what one would write manually. The second call introduce a useless cast since <code class=\"highlighter-rouge\">b</code> is already statically of type <code class=\"highlighter-rouge\">B</code>.\nFinally, the third does a down-cast of <code class=\"highlighter-rouge\">a</code> to type <code class=\"highlighter-rouge\">B</code>.</p>\n\n<p>Only the later is expected to produce a cast operation in the compiled bytecode.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Demo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">A</span> <span class=\"o\">{}</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">B</span> <span class=\"kd\">extends</span> <span class=\"no\">A</span> <span class=\"o\">{}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">callMe</span><span class=\"o\">(</span><span class=\"no\">B</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"no\">B</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"no\">B</span><span class=\"o\">();</span>\n        <span class=\"no\">A</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"no\">B</span><span class=\"o\">();</span>\n        <span class=\"n\">callMe</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>         <span class=\"c1\">// nominal method invocation</span>\n        <span class=\"n\">callMe</span><span class=\"o\">((</span><span class=\"no\">B</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">);</span>     <span class=\"c1\">// useless cast</span>\n        <span class=\"n\">callMe</span><span class=\"o\">((</span><span class=\"no\">B</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">);</span>    <span class=\"c1\">// useful cast</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Compiling the java classes is straightforward and lead to the compilation of three classes: <code class=\"highlighter-rouge\">WithCasts</code> and the two inner classes <code class=\"highlighter-rouge\">WithCasts$A</code> and <code class=\"highlighter-rouge\">WithCasts$B</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> bin\n<span class=\"nv\">$ </span>javac <span class=\"nt\">-d</span> bin WithCasts.java\n<span class=\"nv\">$ </span>tree\n<span class=\"nb\">.</span>\n├── bin\n│   ├── WithCasts<span class=\"nv\">$A</span>.class\n│   ├── WithCasts<span class=\"nv\">$B</span>.class\n│   └── WithCasts.class\n└── WithCasts.java\n</code></pre></div></div>\n\n<p>Now, time to inspect the bytecode using <code class=\"highlighter-rouge\">javap</code><sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>.</p>\n\n<p>I won’t go into the details of how to read bytecode, but I found it useful to get enough knowledge to be minimally knowledgeable on the topic<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote\">3</a></sup>.\nThe bytecode below is annotated in order to ease its reading.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>javap <span class=\"nt\">-cp</span> bin <span class=\"nt\">-c</span> WithCasts   \nCompiled from <span class=\"s2\">\"WithCasts.java\"</span>\npublic class WithCasts <span class=\"o\">{</span>\n  public WithCasts<span class=\"o\">()</span><span class=\"p\">;</span>\n    Code:\n       0: aload_0\n       1: invokespecial <span class=\"c\">#1    // Method java/lang/Object.\"&lt;init&gt;\":()V</span>\n       4: <span class=\"k\">return\n\n  </span>public static void callMe<span class=\"o\">(</span>WithCasts<span class=\"nv\">$B</span><span class=\"o\">)</span><span class=\"p\">;</span>\n    Code:\n       0: <span class=\"k\">return\n\n  </span>public static void main<span class=\"o\">(</span>java.lang.String[]<span class=\"o\">)</span><span class=\"p\">;</span>\n    Code:\n<span class=\"c\"># B b = new B();</span>\n       0: new           <span class=\"c\">#2    // class WithCasts$B</span>\n       3: dup\n       4: invokespecial <span class=\"c\">#3    // Method WithCasts$B.\"&lt;init&gt;\":()V</span>\n       7: astore_1\n<span class=\"c\"># A a = new B();</span>\n       8: new           <span class=\"c\">#2    // class WithCasts$B</span>\n      11: dup\n      12: invokespecial <span class=\"c\">#3    // Method WithCasts$B.\"&lt;init&gt;\":()V</span>\n      15: astore_2\n<span class=\"c\"># callMe(b);</span>\n      16: aload_1\n      17: invokestatic  <span class=\"c\">#4    // Method callMe:(LWithCasts$B;)V</span>\n<span class=\"c\"># callMe((B) b);</span>\n      20: aload_1\n      21: invokestatic  <span class=\"c\">#4    // Method callMe:(LWithCasts$B;)V</span>\n<span class=\"c\"># callMe((B) a);</span>\n      24: aload_2\n      25: checkcast     <span class=\"c\">#2    // class WithCasts$B</span>\n      28: invokestatic  <span class=\"c\">#4    // Method callMe:(LWithCasts$B;)V</span>\n<span class=\"c\"># implicit void return</span>\n      31: <span class=\"k\">return</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>We now have enough information to validate our hypothesis, <code class=\"highlighter-rouge\">callMe((B) b);</code> line 20-21 does not call the <code class=\"highlighter-rouge\">checkcast</code> operation<sup id=\"fnref:4\"><a href=\"#fn:4\" class=\"footnote\">4</a></sup>.\nHence, we can conclude that <code class=\"highlighter-rouge\">javac</code> remove useless cast during compilation.</p>\n\n<p>Consequently, I can prevent the introduction of additional complexity in my compiler while keeping a clean and efficient bytecode.</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p>But I will not discuss whether using explicit type casts is a good practice in this post. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p><code class=\"highlighter-rouge\">javap</code> documentation: <a href=\"https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html\">https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html</a>. <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:3\">\n      <p>An introduction to bytecode: <a href=\"https://dzone.com/articles/introduction-to-java-bytecode\">https://dzone.com/articles/introduction-to-java-bytecode</a>. <a href=\"#fnref:3\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:4\">\n      <p><code class=\"highlighter-rouge\">checkcast</code> documentation: <a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.checkcast\">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.checkcast</a> <a href=\"#fnref:4\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>","contentSnippet":"Often, writing code requires to test assumptions.\nThe easiest way is often to do some research on the net.\nBut when the first few queries do not return a useful result, it is time to test the assumption by ourselves.\n\nIn my case, I was wondering whether explicitly casting a variable to its static type introduces a cast in the compiled bytecode1.\nFor instance, in the program below the cast from int to int is useless and could be removed during compilation.\n\nint a = 1;\nSystem.out.println(((int) a) + 1);\n\n\nOf course, if written by hand, the best design decision is to simply remove the cast and to continue coding.\nBut, in my case, the Java code is generated by a compiler, which left me two choices.\nEither add some logic to my compiler and remove useless casts during code generation.\nOr, left them in place and let the Java compiler do the heavy lifting.\n\nI’d rather avoid complexifying my compiler for now, and I’d be happier with a few useless casts in the generated Java source code, but only if they are finally removed from the Java bytecode.\n\nThis is why I want to validate the following question:\n\n\n  Does javac cleanup useless type cast?\n\n\n Does `javac` remove useless cast during compilation. -->\n\nI based my experiment on the sample below, where a callMe(B b) method is called three times on different configurations.\nThe first call is our baseline, what one would write manually. The second call introduce a useless cast since b is already statically of type B.\nFinally, the third does a down-cast of a to type B.\n\nOnly the later is expected to produce a cast operation in the compiled bytecode.\n\npublic class Demo {\n    static class A {}\n    static class B extends A {}\n\n    private static void callMe(B b) {}\n\n    public static void main(String[] args) {\n        B b = new B();\n        A a = new B();\n        callMe(b);         // nominal method invocation\n        callMe((B) b);     // useless cast\n        callMe((B) a);    // useful cast\n    }\n}\n\n\nCompiling the java classes is straightforward and lead to the compilation of three classes: WithCasts and the two inner classes WithCasts$A and WithCasts$B.\n\n$ mkdir -p bin\n$ javac -d bin WithCasts.java\n$ tree\n.\n├── bin\n│   ├── WithCasts$A.class\n│   ├── WithCasts$B.class\n│   └── WithCasts.class\n└── WithCasts.java\n\n\nNow, time to inspect the bytecode using javap2.\n\nI won’t go into the details of how to read bytecode, but I found it useful to get enough knowledge to be minimally knowledgeable on the topic3.\nThe bytecode below is annotated in order to ease its reading.\n\n$ javap -cp bin -c WithCasts   \nCompiled from \"WithCasts.java\"\npublic class WithCasts {\n  public WithCasts();\n    Code:\n       0: aload_0\n       1: invokespecial #1    // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void callMe(WithCasts$B);\n    Code:\n       0: return\n\n  public static void main(java.lang.String[]);\n    Code:\n# B b = new B();\n       0: new           #2    // class WithCasts$B\n       3: dup\n       4: invokespecial #3    // Method WithCasts$B.\"<init>\":()V\n       7: astore_1\n# A a = new B();\n       8: new           #2    // class WithCasts$B\n      11: dup\n      12: invokespecial #3    // Method WithCasts$B.\"<init>\":()V\n      15: astore_2\n# callMe(b);\n      16: aload_1\n      17: invokestatic  #4    // Method callMe:(LWithCasts$B;)V\n# callMe((B) b);\n      20: aload_1\n      21: invokestatic  #4    // Method callMe:(LWithCasts$B;)V\n# callMe((B) a);\n      24: aload_2\n      25: checkcast     #2    // class WithCasts$B\n      28: invokestatic  #4    // Method callMe:(LWithCasts$B;)V\n# implicit void return\n      31: return\n}\n\n\nWe now have enough information to validate our hypothesis, callMe((B) b); line 20-21 does not call the checkcast operation4.\nHence, we can conclude that javac remove useless cast during compilation.\n\nConsequently, I can prevent the introduction of additional complexity in my compiler while keeping a clean and efficient bytecode.\n\n\n  \n    \n      But I will not discuss whether using explicit type casts is a good practice in this post. ↩\n    \n    \n      javap documentation: https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html. ↩\n    \n    \n      An introduction to bytecode: https://dzone.com/articles/introduction-to-java-bytecode. ↩\n    \n    \n      checkcast documentation: https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.checkcast ↩","id":"https://mleduc.xyz/javac/javap/cast/java/compiler/2019/03/20/explicit-cast-cleanup","isoDate":"2019-03-20T11:04:00.000Z"},{"title":"Dynamic Junit 5: The Hero with a Thousand Faces","link":"https://mleduc.xyz/java/junit5/dynamic/unit/test/2019/03/11/dynamic-junit5.html","pubDate":"2019-03-11T08:50:00.000Z","author":"Manuel Leduc","content":"<p>Writting unit tests is a difficult and time consuming task.\nAnd, in my opinion, even more when used to test code generating programs, such as compiler.</p>\n\n<p>But as it is something I am dealing with on a daly basis, writting a compiler for <a href=\"https://github.com/gemoc/ale-lang\">ALE</a>, why not automate some part of if and make my life easier?</p>\n\n<p>Consequently, I wanted to load some programs, produce a result and compare each file to the expected result.\nBut it can be difficult to have an interesting and easy to read result from such testing suite.</p>\n\n<p>Moreover, I wanted to have an explicit diff (e.g., diff/git like line by line difference) between the produced file and the expected one in case of failing test.\nAdditionally, from a single program, my compiler is producing a large amount of files, and an expressive test suite is needed in order to avoid large maintenance cost of the test suite (e.g., having to updated the junit tests souces whenever change in the compiler implementation occure).\nOtherwise, I would give up it maintenance quickly and all those cool tests would become deprecated in no time. What a shame.</p>\n\n<p>That is when I came across the <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests\">dynamic tests</a> feature introduced in <a href=\"https://junit.org/junit5/\">Junit 5</a>.\nThe idea is quite simple, instead of writting a serie of test methods manually, the developper writes a single method that produces a stream of <code class=\"highlighter-rouge\">DynamicTest</code> instances, that are later executed as regular unit tests by the Junit execution engine and displayed nicely to the user<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</p>\n\n<p>The java class below shows partially how to implement this scenario.\nA program is compiled and the directory where the files are saved is returned.\nFinally, for each file in the <code class=\"highlighter-rouge\">test-result</code> directory, a unit test is generated.</p>\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">DynamicFileTest</span> <span class=\"o\">{</span>\n\n  <span class=\"cm\">/** produces a stream of DynamicTest*/</span>\n  <span class=\"nd\">@TestFactory</span> <span class=\"nc\">Stream</span><span class=\"o\">&lt;</span><span class=\"nc\">DynamicTest</span><span class=\"o\">&gt;</span> <span class=\"nf\">dynamicTests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// expected results</span>\n      <span class=\"nc\">File</span> <span class=\"n\">expectedDir</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"s\">\"src/test/resources/test-result\"</span><span class=\"o\">);</span>\n      \n      <span class=\"c1\">// compile a program and return a directory with the </span>\n      <span class=\"c1\">// result of the compilation</span>\n      <span class=\"nc\">File</span> <span class=\"n\">resultDir</span> <span class=\"o\">=</span> <span class=\"n\">compile</span><span class=\"o\">(</span><span class=\"n\">input</span><span class=\"o\">);</span> \n      <span class=\"nc\">Collection</span><span class=\"o\">&lt;</span><span class=\"nc\">File</span><span class=\"o\">&gt;</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"na\">listFiles</span><span class=\"o\">(</span><span class=\"n\">expectedDir</span><span class=\"o\">,</span>\n        <span class=\"nc\">TrueFileFilter</span><span class=\"o\">.</span><span class=\"na\">INSTANCE</span><span class=\"o\">,</span> <span class=\"nc\">TrueFileFilter</span><span class=\"o\">.</span><span class=\"na\">INSTANCE</span><span class=\"o\">);</span>\n      <span class=\"nc\">String</span> <span class=\"n\">unitTestName</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">();</span>\n\n      <span class=\"c1\">// map on the expected files</span>\n      <span class=\"k\">return</span> <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">DynamicTest</span><span class=\"o\">.</span><span class=\"na\">dynamicTest</span><span class=\"o\">(</span><span class=\"n\">unitTestName</span><span class=\"o\">,</span>\n\n          <span class=\"c1\">// compare each produced file with it expected result</span>\n          <span class=\"o\">()</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n              <span class=\"nc\">Path</span> <span class=\"n\">relative</span> <span class=\"o\">=</span> <span class=\"n\">expectedDir</span><span class=\"o\">.</span><span class=\"na\">toPath</span><span class=\"o\">().</span><span class=\"na\">relativize</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">toPath</span><span class=\"o\">());</span>\n              <span class=\"nc\">String</span> <span class=\"n\">relativePath</span> <span class=\"o\">=</span> <span class=\"n\">relative</span><span class=\"o\">.</span><span class=\"na\">toFile</span><span class=\"o\">().</span><span class=\"na\">getPath</span><span class=\"o\">();</span>\n              <span class=\"nc\">File</span> <span class=\"n\">bfile</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">resultDir</span><span class=\"o\">,</span> <span class=\"n\">relativePath</span><span class=\"o\">);</span>\n              <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">bfile</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Charset</span> <span class=\"n\">charset</span> <span class=\"o\">=</span> <span class=\"nc\">Charset</span><span class=\"o\">.</span><span class=\"na\">defaultCharset</span><span class=\"o\">();</span>\n                <span class=\"nc\">String</span> <span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"na\">readFileToString</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">charset</span><span class=\"o\">);</span>\n                <span class=\"nc\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nc\">FileUtils</span><span class=\"o\">.</span><span class=\"na\">readFileToString</span><span class=\"o\">(</span><span class=\"n\">bfile</span><span class=\"o\">,</span> <span class=\"n\">charset</span><span class=\"o\">);</span>\n\n                <span class=\"c1\">// raise an error in case of difference.</span>\n                <span class=\"nc\">Assertions</span><span class=\"o\">.</span><span class=\"na\">assertEquals</span><span class=\"o\">(</span><span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">);</span>\n              <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// raise an error in case of missing file.</span>\n                <span class=\"nc\">Assertions</span><span class=\"o\">.</span><span class=\"na\">fail</span><span class=\"o\">(</span><span class=\"n\">relativePath</span> <span class=\"o\">+</span> <span class=\"s\">\" expected to exist\"</span><span class=\"o\">);</span>\n              <span class=\"o\">}</span>\n          <span class=\"o\">}));</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span> \n</code></pre></div></div>\n\n<p>The result of the execution is the usual Junit results summary displayed in the IDE, indistinguable from a static unit test result, as shown below.</p>\n\n<p><img src=\"/assets/screen-dynamic-tests.png\" alt=\"screenshot of the unit test execution of IntelliJ\" /></p>\n\n<p>An exhaustive version, with maven integration is available on my <a href=\"https://github.com/manuelleduc/junit5-dynamic-test-example\">github account</a>.</p>\n\n<p>Once the definition the generic dynamic test done, maintaining the unit test suite is a breeze since it is only a matter of defining the input (<em>programs</em>) and output (<em>expected files</em>).</p>\n\n<p>I am currently using this technique to write hundre of tests for my compiler, and in my experience it has been a straighforward and productive way to write compiler test suites.</p>\n\n<p>Let me know if you have had a differents experience from mine!</p>\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p>At least on Eclipse and Intellij. I am yet to test how it is integrated with <a href=\"https://jenkins.io/\">jenkins</a>. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>","contentSnippet":"Writting unit tests is a difficult and time consuming task.\nAnd, in my opinion, even more when used to test code generating programs, such as compiler.\n\nBut as it is something I am dealing with on a daly basis, writting a compiler for ALE, why not automate some part of if and make my life easier?\n\nConsequently, I wanted to load some programs, produce a result and compare each file to the expected result.\nBut it can be difficult to have an interesting and easy to read result from such testing suite.\n\nMoreover, I wanted to have an explicit diff (e.g., diff/git like line by line difference) between the produced file and the expected one in case of failing test.\nAdditionally, from a single program, my compiler is producing a large amount of files, and an expressive test suite is needed in order to avoid large maintenance cost of the test suite (e.g., having to updated the junit tests souces whenever change in the compiler implementation occure).\nOtherwise, I would give up it maintenance quickly and all those cool tests would become deprecated in no time. What a shame.\n\nThat is when I came across the dynamic tests feature introduced in Junit 5.\nThe idea is quite simple, instead of writting a serie of test methods manually, the developper writes a single method that produces a stream of DynamicTest instances, that are later executed as regular unit tests by the Junit execution engine and displayed nicely to the user1.\n\nThe java class below shows partially how to implement this scenario.\nA program is compiled and the directory where the files are saved is returned.\nFinally, for each file in the test-result directory, a unit test is generated.\nclass DynamicFileTest {\n\n  /** produces a stream of DynamicTest*/\n  @TestFactory Stream<DynamicTest> dynamicTests() {\n      // expected results\n      File expectedDir = new File(\"src/test/resources/test-result\");\n      \n      // compile a program and return a directory with the \n      // result of the compilation\n      File resultDir = compile(input); \n      Collection<File> files = FileUtils.listFiles(expectedDir,\n        TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);\n      String unitTestName = f.getName();\n\n      // map on the expected files\n      return files.stream().map(f -> DynamicTest.dynamicTest(unitTestName,\n\n          // compare each produced file with it expected result\n          () -> {\n              Path relative = expectedDir.toPath().relativize(f.toPath());\n              String relativePath = relative.toFile().getPath();\n              File bfile = new File(resultDir, relativePath);\n              if (bfile.exists()) {\n                Charset charset = Charset.defaultCharset();\n                String expected = FileUtils.readFileToString(f, charset);\n                String result = FileUtils.readFileToString(bfile, charset);\n\n                // raise an error in case of difference.\n                Assertions.assertEquals(expected, result);\n              } else {\n                // raise an error in case of missing file.\n                Assertions.fail(relativePath + \" expected to exist\");\n              }\n          }));\n  }\n} \n\n\nThe result of the execution is the usual Junit results summary displayed in the IDE, indistinguable from a static unit test result, as shown below.\n\n\n\nAn exhaustive version, with maven integration is available on my github account.\n\nOnce the definition the generic dynamic test done, maintaining the unit test suite is a breeze since it is only a matter of defining the input (programs) and output (expected files).\n\nI am currently using this technique to write hundre of tests for my compiler, and in my experience it has been a straighforward and productive way to write compiler test suites.\n\nLet me know if you have had a differents experience from mine!\n\n\n  \n    \n      At least on Eclipse and Intellij. I am yet to test how it is integrated with jenkins. ↩","id":"https://mleduc.xyz/java/junit5/dynamic/unit/test/2019/03/11/dynamic-junit5","isoDate":"2019-03-11T08:50:00.000Z"},{"title":"Xtext Serialization - Easier than I thought","link":"https://mleduc.xyz/xtext/emf/2018/02/28/xtext-serialization.html","pubDate":"2018-02-28T09:54:00.000Z","author":"Manuel Leduc","content":"<h1 id=\"introduction\">Introduction</h1>\n\n<p>We often think of Xtext as a solution to transform text files into <a href=\"https://www.eclipse.org/modeling/emf/\">EMF</a> models.\nBut the opposite is also possible and one can transform a EMF model into a text file.\nSuch a transformation is and is called <em>serialization</em>.</p>\n\n<p>Serializing an EMF model has various use cases, from saving the intermediate representation of a compilation to\noperate transformations on a xtext program before transforming it back into text (e.g. optimization, obfuscation…).</p>\n\n<h1 id=\"implementation\">Implementation</h1>\n\n<p>I will not go into the details of what might go wrong during the serialization and how to fix it,\nbut shortly, if the model does not conform to the constraints defined in the xtext file, the serialization will fail.</p>\n\n<p>Solutions to solve such issues are possible but will not be explained here.</p>\n\n<p>Apart from those technical details, serializing a model is a surprisingly simple operation to implement despite the lack\nof working example available online.</p>\n\n<p>Let’s take an language name <strong>eoh</strong>, the following xtend example shows how to serialize an EMF model to\na valid string in the grammar of eoh.</p>\n\n<p>Three elements are important to the implementation of a serialization:</p>\n\n<ul>\n  <li>The injection must be done using the provider of the language. See the @InjectWith annotation. More details are given in the <a href=\"https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext\">Serializing EMF models with Xtext</a> presentation.</li>\n  <li><em>org.eclipse.xtext.serializer.impl.Serializer</em> is injected in the class (using the previously defined provider).</li>\n  <li>The serializer is called using the <em>serialize</em> method one any EObject instance. Check and generation are done based on the provided language.</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"n\">eho</span><span class=\"o\">.</span><span class=\"na\">tests</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">com.google.inject.Inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">eho.eho.EhoFactory</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.serializer.impl.Serializer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.testing.InjectWith</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.xtext.testing.XtextRunner</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.junit.Test</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.junit.runner.RunWith</span>\n\n<span class=\"nd\">@RunWith</span><span class=\"o\">(</span><span class=\"nc\">XtextRunner</span><span class=\"o\">)</span>\n<span class=\"nd\">@InjectWith</span><span class=\"o\">(</span><span class=\"nc\">EhoInjectorProvider</span><span class=\"o\">)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EhoParsingTest</span> <span class=\"o\">{</span>\n\n  <span class=\"nd\">@Inject</span> <span class=\"nc\">Serializer</span> <span class=\"n\">serializer</span>\n\n  <span class=\"nd\">@Test</span>\n  <span class=\"n\">def</span> <span class=\"kt\">void</span> <span class=\"nf\">serializer</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">val</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nc\">EhoFactory</span><span class=\"o\">.</span><span class=\"na\">eINSTANCE</span>\n    <span class=\"n\">val</span> <span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"na\">createRoot</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"o\">]</span>\n\n    <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"na\">serialize</span><span class=\"o\">(</span><span class=\"n\">policy</span><span class=\"o\">))</span>\n\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"useful-resources\">Useful resources</h1>\n\n<p>The result presented on this article are mainly an exemplified aggregation of the\nfollowing web resources:</p>\n\n<ul>\n  <li><a href=\"https://stackoverflow.com/questions/12302206/convert-object-to-xtext-dsl\">https://stackoverflow.com/questions/12302206/convert-object-to-xtext-dsl</a></li>\n  <li><a href=\"https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext\">https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext</a></li>\n  <li><a href=\"https://www.eclipse.org/Xtext/documentation/308_emf_integration.html\">https://www.eclipse.org/Xtext/documentation/308_emf_integration.html</a></li>\n</ul>","contentSnippet":"Introduction\n\nWe often think of Xtext as a solution to transform text files into EMF models.\nBut the opposite is also possible and one can transform a EMF model into a text file.\nSuch a transformation is and is called serialization.\n\nSerializing an EMF model has various use cases, from saving the intermediate representation of a compilation to\noperate transformations on a xtext program before transforming it back into text (e.g. optimization, obfuscation…).\n\nImplementation\n\nI will not go into the details of what might go wrong during the serialization and how to fix it,\nbut shortly, if the model does not conform to the constraints defined in the xtext file, the serialization will fail.\n\nSolutions to solve such issues are possible but will not be explained here.\n\nApart from those technical details, serializing a model is a surprisingly simple operation to implement despite the lack\nof working example available online.\n\nLet’s take an language name eoh, the following xtend example shows how to serialize an EMF model to\na valid string in the grammar of eoh.\n\nThree elements are important to the implementation of a serialization:\n\n\n  The injection must be done using the provider of the language. See the @InjectWith annotation. More details are given in the Serializing EMF models with Xtext presentation.\n  org.eclipse.xtext.serializer.impl.Serializer is injected in the class (using the previously defined provider).\n  The serializer is called using the serialize method one any EObject instance. Check and generation are done based on the provided language.\n\n\npackage eho.tests\n\nimport com.google.inject.Inject\nimport eho.eho.EhoFactory\nimport org.eclipse.xtext.serializer.impl.Serializer\nimport org.eclipse.xtext.testing.InjectWith\nimport org.eclipse.xtext.testing.XtextRunner\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\n@RunWith(XtextRunner)\n@InjectWith(EhoInjectorProvider)\nclass EhoParsingTest {\n\n  @Inject Serializer serializer\n\n  @Test\n  def void serializer() {\n    val f = EhoFactory.eINSTANCE\n    val policy = f.createRoot => [\n      // ...\n    ]\n\n    println(serializer.serialize(policy))\n\n  }\n}\n\n\nUseful resources\n\nThe result presented on this article are mainly an exemplified aggregation of the\nfollowing web resources:\n\n\n  https://stackoverflow.com/questions/12302206/convert-object-to-xtext-dsl\n  https://fr.slideshare.net/meysholdt/serializing-emf-models-with-xtext\n  https://www.eclipse.org/Xtext/documentation/308_emf_integration.html","id":"https://mleduc.xyz/xtext/emf/2018/02/28/xtext-serialization","isoDate":"2018-02-28T09:54:00.000Z"},{"title":"FeatureIDE Programmatically: Getting Started","link":"https://mleduc.xyz/eclipse/2017/11/28/feature-ide-programmatically-getting-started.html","pubDate":"2017-11-28T15:36:00.000Z","author":"Manuel Leduc","content":"<hr />\n\n<p><strong>Update #1</strong> <em>Tuesday, December 12, 2017</em>: First update of the article with some improvement from my recent experiments with FeatureIDE API. The code is much cleaner and reasoning with the configurations is improved. I have added comments along the article explaining the changes.</p>\n\n<hr />\n\n<p>Part of my research and engineering activities are currently focused on the variability aspect of software languages.</p>\n\n<p>IMHO, <a href=\"https://featureide.github.io/\">FeatureIDE</a> is the best plugin to deal with the expression of the variability of software components, using <a href=\"https://en.wikipedia.org/wiki/Feature_model\">Feature Models</a>.</p>\n\n<p>It has been nicely refactored over the time in order to be modular and it is now possible to import only the Feature Model syntax and semantics without importing the UI dependencies.</p>\n\n<p>Nonetheless, I’ve spend enough time digging in the code this afternoon to feel like what I did could be helpful to others.</p>\n\n<p>The following piece of java code is an example of how to easily define a Feature Model and to check some simple properties on it.</p>\n\n<p>It depends on <code class=\"highlighter-rouge\">de.ovgu.featureide.fm.core;bundle-version=\"3.4.1\"</code> (FeatureIDE <a href=\"http://featureide.cs.ovgu.de/update/v3/\">update site</a> and <a href=\"https://github.com/FeatureIDE/FeatureIDE\">source code</a>)</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">package</span> <span class=\"n\">fr</span><span class=\"o\">.</span><span class=\"na\">inria</span><span class=\"o\">.</span><span class=\"na\">diverse</span><span class=\"o\">.</span><span class=\"na\">melange</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.sat4j.specs.TimeoutException</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureModelStructure</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.IFeatureStructure</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.DefaultFeatureModelFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.FMFactoryManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.base.impl.Feature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.SelectableFeature</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">de.ovgu.featureide.fm.core.configuration.Selection</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SimpleFeatureModel</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">TimeoutException</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureModel</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"nc\">FMFactoryManager</span><span class=\"o\">.</span><span class=\"na\">getEmptyFeatureModel</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">DefaultFeatureModelFactory</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"nc\">DefaultFeatureModelFactory</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fexp</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Expression\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fas</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"AS\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fadd</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Add\"</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fecl</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"Ecl\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fa1</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"A1\"</span><span class=\"o\">);</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">Feature</span> <span class=\"n\">fa2</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createFeature</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">,</span> <span class=\"s\">\"A2\"</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">fexpStructure</span> <span class=\"o\">=</span> <span class=\"n\">fexp</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureModelStructure</span> <span class=\"n\">fmStructure</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">fasStructure</span> <span class=\"o\">=</span> <span class=\"n\">fas</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">feclStructure</span> <span class=\"o\">=</span> <span class=\"n\">fecl</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">faddStructure</span> <span class=\"o\">=</span> <span class=\"n\">fadd</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">fa1Structure</span> <span class=\"o\">=</span> <span class=\"n\">fa1</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">IFeatureStructure</span> <span class=\"n\">fa2Structure</span> <span class=\"o\">=</span> <span class=\"n\">fa2</span><span class=\"o\">.</span><span class=\"na\">getStructure</span><span class=\"o\">();</span>\n\n  <span class=\"n\">fmStructure</span><span class=\"o\">.</span><span class=\"na\">setRoot</span><span class=\"o\">(</span><span class=\"n\">fexpStructure</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fexp</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fas</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fadd</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fecl</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fa1</span><span class=\"o\">);</span>\n  <span class=\"n\">fm</span><span class=\"o\">.</span><span class=\"na\">addFeature</span><span class=\"o\">(</span><span class=\"n\">fa2</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fasStructure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">faddStructure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fexpStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">feclStructure</span><span class=\"o\">);</span>\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">setAlternative</span><span class=\"o\">();</span>\n\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fa1Structure</span><span class=\"o\">);</span>\n  <span class=\"n\">feclStructure</span><span class=\"o\">.</span><span class=\"na\">addChild</span><span class=\"o\">(</span><span class=\"n\">fa2Structure</span><span class=\"o\">);</span>\n\n  <span class=\"n\">fasStructure</span><span class=\"o\">.</span><span class=\"na\">setMandatory</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n\n  <span class=\"kd\">final</span> <span class=\"nc\">Configuration</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Configuration</span><span class=\"o\">(</span><span class=\"n\">fm</span><span class=\"o\">);</span>\n  <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">setManual</span><span class=\"o\">(</span><span class=\"s\">\"A1\"</span><span class=\"o\">,</span> <span class=\"nc\">Selection</span><span class=\"o\">.</span><span class=\"na\">SELECTED</span><span class=\"o\">);</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Can be valid: \"</span> <span class=\"o\">+</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">canBeValid</span><span class=\"o\">());</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Solutions: \"</span> <span class=\"o\">+</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">number</span><span class=\"o\">());</span>\n  <span class=\"kd\">final</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">solutions</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getSolutions</span><span class=\"o\">(</span><span class=\"nc\">Long</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">number</span><span class=\"o\">()).</span><span class=\"na\">intValue</span><span class=\"o\">());</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Free feature (SELECTED/UNSELECT choice left open): \"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">IFeature</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getUndefinedSelectedFeatures</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Status of the features\"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">SelectableFeature</span> <span class=\"n\">feature</span> <span class=\"o\">:</span> <span class=\"n\">conf</span><span class=\"o\">.</span><span class=\"na\">getFeatures</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">feature</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"na\">getSelection</span><span class=\"o\">());</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Possible solutions so far:\"</span><span class=\"o\">);</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">solution</span> <span class=\"o\">:</span> <span class=\"n\">solutions</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">solution</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"cm\">/*\n   * Can be valid: true\n   * Solutions: 2\n   * Still free variables:\n   * Add\n   * Status of the features\n   * Expression SELECTED\n   * AS SELECTED\n   * Add UNDEFINED\n   * Ecl SELECTED\n   * A1 SELECTED\n   * A2 UNSELECTED\n   * Possible solutions\n   * [Expression, AS, Ecl, A1]\n   * [Expression, AS, Ecl, A1, Add]\n   */</span>\n\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>The last lines, with the configuration analysis is really nice and allow to reason on the Feature Models easily.</p>\n\n<p><strong>Update #1 notes:</strong> I’m still hoping to find a pretty printing of the feature model somewhere in the API, to help me with the debugging.</p>\n\n<p>But the initialization of the Feature Model has a few code smells that I’d like to remove. For instance, in order to add a sub-feature to the Feature Model it is required to:</p>\n<ul>\n  <li>add the feature to the Feature Model (i.e. <code class=\"highlighter-rouge\">addFeature</code>)</li>\n  <li>attach the feature to its parent (i.e. <code class=\"highlighter-rouge\">setParent</code>)</li>\n  <li>add the child to the list of children of its parent (e.g. <code class=\"highlighter-rouge\">getChildren().add(fas.getStructure())</code>).</li>\n</ul>\n\n<p><strong>Update #1 notes:</strong> <code class=\"highlighter-rouge\">setParent</code> + <code class=\"highlighter-rouge\">getChildren().add(fas.getStructure())</code> can be nicely replace by a single <code class=\"highlighter-rouge\">parent.addChild(child)</code>.</p>\n\n<p>Also a lot of those operations requires a kind of lifting from the feature to its structure.</p>\n\n<p><del>The aggregation of all those small details makes the Feature Model instantiation hard to read and error prone. I’m sure it can be improved, either by a better use of the library (which is likely since I’ve only spend a few hours on it so far) or by defining some utility methods client side.</del></p>\n\n<p><strong>Update #1 notes:</strong> As expected, with a better knowledges of the API, the code quality, if not yet as good as hoped, improved significantly.</p>\n\n<p>I’ll keep updating this article whenever I manage to find useful FeatureIDE API tips.</p>","contentSnippet":"Update #1 Tuesday, December 12, 2017: First update of the article with some improvement from my recent experiments with FeatureIDE API. The code is much cleaner and reasoning with the configurations is improved. I have added comments along the article explaining the changes.\n\n\n\nPart of my research and engineering activities are currently focused on the variability aspect of software languages.\n\nIMHO, FeatureIDE is the best plugin to deal with the expression of the variability of software components, using Feature Models.\n\nIt has been nicely refactored over the time in order to be modular and it is now possible to import only the Feature Model syntax and semantics without importing the UI dependencies.\n\nNonetheless, I’ve spend enough time digging in the code this afternoon to feel like what I did could be helpful to others.\n\nThe following piece of java code is an example of how to easily define a Feature Model and to check some simple properties on it.\n\nIt depends on de.ovgu.featureide.fm.core;bundle-version=\"3.4.1\" (FeatureIDE update site and source code)\n\npackage fr.inria.diverse.melange;\n\nimport java.util.List;\n\nimport org.sat4j.specs.TimeoutException;\n\nimport de.ovgu.featureide.fm.core.base.IFeature;\nimport de.ovgu.featureide.fm.core.base.IFeatureModel;\nimport de.ovgu.featureide.fm.core.base.IFeatureModelStructure;\nimport de.ovgu.featureide.fm.core.base.IFeatureStructure;\nimport de.ovgu.featureide.fm.core.base.impl.DefaultFeatureModelFactory;\nimport de.ovgu.featureide.fm.core.base.impl.FMFactoryManager;\nimport de.ovgu.featureide.fm.core.base.impl.Feature;\nimport de.ovgu.featureide.fm.core.configuration.Configuration;\nimport de.ovgu.featureide.fm.core.configuration.SelectableFeature;\nimport de.ovgu.featureide.fm.core.configuration.Selection;\n\npublic class SimpleFeatureModel {\n  public static void main(final String[] args) throws TimeoutException {\n  final IFeatureModel fm = FMFactoryManager.getEmptyFeatureModel();\n  final DefaultFeatureModelFactory factory = DefaultFeatureModelFactory.getInstance();\n  final Feature fexp = factory.createFeature(fm, \"Expression\");\n  final Feature fas = factory.createFeature(fm, \"AS\");\n  final Feature fadd = factory.createFeature(fm, \"Add\");\n\n  final Feature fecl = factory.createFeature(fm, \"Ecl\");\n  final Feature fa1 = factory.createFeature(fm, \"A1\");\n  final Feature fa2 = factory.createFeature(fm, \"A2\");\n\n  final IFeatureStructure fexpStructure = fexp.getStructure();\n  final IFeatureModelStructure fmStructure = fm.getStructure();\n  final IFeatureStructure fasStructure = fas.getStructure();\n  final IFeatureStructure feclStructure = fecl.getStructure();\n  final IFeatureStructure faddStructure = fadd.getStructure();\n  final IFeatureStructure fa1Structure = fa1.getStructure();\n  final IFeatureStructure fa2Structure = fa2.getStructure();\n\n  fmStructure.setRoot(fexpStructure);\n  fm.addFeature(fexp);\n  fm.addFeature(fas);\n  fm.addFeature(fadd);\n  fm.addFeature(fecl);\n  fm.addFeature(fa1);\n  fm.addFeature(fa2);\n\n  fexpStructure.addChild(fasStructure);\n\n  fexpStructure.addChild(faddStructure);\n\n  fexpStructure.addChild(feclStructure);\n  feclStructure.setAlternative();\n\n  feclStructure.addChild(fa1Structure);\n  feclStructure.addChild(fa2Structure);\n\n  fasStructure.setMandatory(true);\n\n  final Configuration conf = new Configuration(fm);\n  conf.setManual(\"A1\", Selection.SELECTED);\n  System.out.println(\"Can be valid: \" + conf.canBeValid());\n  System.out.println(\"Solutions: \" + conf.number());\n  final List<List<String>> solutions = conf.getSolutions(Long.valueOf(conf.number()).intValue());\n  System.out.println(\"Free feature (SELECTED/UNSELECT choice left open): \");\n  for (IFeature a : conf.getUndefinedSelectedFeatures()) {\n  System.out.println(a);\n  }\n\n  System.out.println(\"Status of the features\");\n  for (SelectableFeature feature : conf.getFeatures()) {\n  System.out.println(feature + \" \" + feature.getSelection());\n  }\n\n  System.out.println(\"Possible solutions so far:\");\n  for (final List<String> solution : solutions) {\n  System.out.println(solution);\n  }\n\n  /*\n   * Can be valid: true\n   * Solutions: 2\n   * Still free variables:\n   * Add\n   * Status of the features\n   * Expression SELECTED\n   * AS SELECTED\n   * Add UNDEFINED\n   * Ecl SELECTED\n   * A1 SELECTED\n   * A2 UNSELECTED\n   * Possible solutions\n   * [Expression, AS, Ecl, A1]\n   * [Expression, AS, Ecl, A1, Add]\n   */\n\n  }\n}\n\n\n\nThe last lines, with the configuration analysis is really nice and allow to reason on the Feature Models easily.\n\nUpdate #1 notes: I’m still hoping to find a pretty printing of the feature model somewhere in the API, to help me with the debugging.\n\nBut the initialization of the Feature Model has a few code smells that I’d like to remove. For instance, in order to add a sub-feature to the Feature Model it is required to:\n\n  add the feature to the Feature Model (i.e. addFeature)\n  attach the feature to its parent (i.e. setParent)\n  add the child to the list of children of its parent (e.g. getChildren().add(fas.getStructure())).\n\n\nUpdate #1 notes: setParent + getChildren().add(fas.getStructure()) can be nicely replace by a single parent.addChild(child).\n\nAlso a lot of those operations requires a kind of lifting from the feature to its structure.\n\nThe aggregation of all those small details makes the Feature Model instantiation hard to read and error prone. I’m sure it can be improved, either by a better use of the library (which is likely since I’ve only spend a few hours on it so far) or by defining some utility methods client side.\n\nUpdate #1 notes: As expected, with a better knowledges of the API, the code quality, if not yet as good as hoped, improved significantly.\n\nI’ll keep updating this article whenever I manage to find useful FeatureIDE API tips.","id":"https://mleduc.xyz/eclipse/2017/11/28/feature-ide-programmatically-getting-started","isoDate":"2017-11-28T15:36:00.000Z"},{"title":"Eclipse Plugin Generation","link":"https://mleduc.xyz/eclipse/2017/07/26/eclipse-plugin-generation.html","pubDate":"2017-07-26T15:53:00.000Z","author":"Manuel Leduc","content":"<p>I am currently working with eclipse projects. Lots of eclipse projects. So much that I want to generate eclipse projects using java code (I hope to write another article of the why of this soon).</p>\n\n<p>Surprisingly this task is not really complicated but requires an awful lot of\ncode to work.</p>\n\n<p>So once I made it work if felt the need to share it as I did not found much documentation.</p>\n\n<p>The following code is just an simplification of <a href=\"https://github.com/eclipse/eclipse.pde.ui/blob/master/ui/org.eclipse.pde.ui/src/org/eclipse/pde/internal/ui/wizards/plugin/NewProjectCreationOperation.java\">org.eclipse.pde.internal.ui.wizards.plugin.NewProjectCreationOperation</a> from the Plugin Development Environment (<a href=\"https://www.eclipse.org/pde/\">PDE</a>) project.</p>\n\n<p>In eclipse <code class=\"highlighter-rouge\">NewProjectCreationOperation</code> is called at the end of eclipse new plugin wizard (<a href=\"https://github.com/eclipse/eclipse.pde.ui/blob/master/ui/org.eclipse.pde.ui/src/org/eclipse/pde/ui/templates/NewPluginProjectFromTemplateWizard.java\">org.eclipse.pde.ui.templates.NewPluginProjectFromTemplateWizard</a>) and initialize a new eclipse plugin project according to the choices done by the user during the wizard steps.</p>\n\n<p>I just simplified the pde code by removing every UI related dependencies and replacing the object holding the\nwizard inputs by static fields directly in the class (for simplicity sake).</p>\n\n<p>The minimal set of dependencies needed to make the following code work is:</p>\n<ul>\n  <li>org.eclipse.core.runtime;bundle-version=”3.13.0”</li>\n  <li>org.eclipse.core.resources;bundle-version=”3.12.0”</li>\n  <li>org.eclipse.jdt.core;bundle-version=”3.13.0”</li>\n  <li>org.eclipse.pde.core;bundle-version=”3.11.100”</li>\n</ul>\n\n<p>The entry point is the <code class=\"highlighter-rouge\">execute</code> method that will create an minimal eclipse plugin project named “<em>myPlugin</em>”.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.util.Iterator</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Set</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.TreeSet</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IFile</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IFolder</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.IWorkspaceRoot</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.resources.ResourcesPlugin</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.CoreException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.IPath</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.core.runtime.IProgressMonitor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IClasspathEntry</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IJavaElement</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IJavaProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IPackageFragment</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.IPackageFragmentRoot</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.JavaCore</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.jdt.core.JavaModelException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.build.IBuildEntry</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.build.IBuildModelFactory</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.plugin.IPluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.core.plugin.IPluginLibrary</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ClasspathComputer</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ICoreConstants</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.TargetPlatformHelper</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.build.WorkspaceBuildModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.BundlePluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModel</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundle</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundlePluginBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.ibundle.IBundlePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.natures.PDE</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.plugin.WorkspacePluginModelBase</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.project.PDEProject</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.pde.internal.core.util.CoreUtility</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.osgi.framework.Constants</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">PluginApplicationCreator</span> <span class=\"o\">{</span>\n\t<span class=\"kd\">private</span> <span class=\"nc\">WorkspacePluginModelBase</span> <span class=\"n\">fModel</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">\"0.0.0\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">sourceFolderName</span> <span class=\"o\">=</span> <span class=\"s\">\"src\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">outputFolderName</span> <span class=\"o\">=</span> <span class=\"s\">\"bin\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">confExecutionEnvironment</span> <span class=\"o\">=</span> <span class=\"s\">\"JavaSE-1.8\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">bundleId</span> <span class=\"o\">=</span> <span class=\"s\">\"myPluginBundleId\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">configTargetVersion</span> <span class=\"o\">=</span> <span class=\"s\">\"3.8\"</span><span class=\"o\">;</span>\n\t<span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">projectName</span> <span class=\"o\">=</span> <span class=\"s\">\"myPlugin\"</span><span class=\"o\">;</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">new</span> <span class=\"nf\">PluginApplicationCreator</span><span class=\"o\">().</span><span class=\"na\">execute</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">execute</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">createProject</span><span class=\"o\">();</span>\n\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">hasNature</span><span class=\"o\">(</span><span class=\"nc\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">NATURE_ID</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">setClasspath</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\n\t\t<span class=\"n\">createManifest</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">createBuildPropertiesFile</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// not sure when this call is usefull.</span>\n\t\t<span class=\"n\">adjustManifests</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">());</span>\n\n\t\t<span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">();</span>\n\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">adjustManifests</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProgressMonitor</span> <span class=\"n\">monitor</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">IPluginBase</span> <span class=\"n\">bundle</span><span class=\"o\">)</span>\n\t\t\t<span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPluginLibrary</span><span class=\"o\">[]</span> <span class=\"n\">libs</span> <span class=\"o\">=</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">().</span><span class=\"na\">getLibraries</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">packages</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">TreeSet</span><span class=\"o\">&lt;&gt;();</span>\n\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IPluginLibrary</span> <span class=\"n\">lib</span> <span class=\"o\">:</span> <span class=\"n\">libs</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"na\">getContentFilters</span><span class=\"o\">();</span>\n\t\t\t<span class=\"c1\">// if a library is fully exported, then export all source packages (since we</span>\n\t\t\t<span class=\"c1\">// don't know which source folders go with which library)</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">filters</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">].</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"**\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">addAllSourcePackages</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">packages</span><span class=\"o\">);</span>\n\t\t\t\t<span class=\"k\">break</span><span class=\"o\">;</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">filter</span> <span class=\"o\">:</span> <span class=\"n\">filters</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"s\">\".*\"</span><span class=\"o\">))</span>\n\t\t\t\t\t<span class=\"n\">packages</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">));</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">packages</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IBundle</span> <span class=\"n\">iBundle</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"nc\">WorkspaceBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"n\">fModel</span><span class=\"o\">).</span><span class=\"na\">getBundleModel</span><span class=\"o\">().</span><span class=\"na\">getBundle</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">iBundle</span><span class=\"o\">.</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"nc\">Constants</span><span class=\"o\">.</span><span class=\"na\">EXPORT_PACKAGE</span><span class=\"o\">,</span> <span class=\"n\">getCommaValuesFromPackagesSet</span><span class=\"o\">(</span><span class=\"n\">packages</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"o\">));</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">addAllSourcePackages</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">try</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IJavaProject</span> <span class=\"n\">javaProject</span> <span class=\"o\">=</span> <span class=\"nc\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">classpath</span> <span class=\"o\">=</span> <span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">getRawClasspath</span><span class=\"o\">();</span>\n\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span> <span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">classpath</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getEntryKind</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">.</span><span class=\"na\">CPE_SOURCE</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getPath</span><span class=\"o\">().</span><span class=\"na\">removeFirstSegments</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">segmentCount</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPackageFragmentRoot</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">getPackageFragmentRoot</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFolder</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IJavaElement</span><span class=\"o\">[]</span> <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getChildren</span><span class=\"o\">();</span>\n\t\t\t\t\t\t<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IJavaElement</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPackageFragment</span> <span class=\"n\">frag</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">IPackageFragment</span><span class=\"o\">)</span> <span class=\"n\">element</span><span class=\"o\">;</span>\n\t\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">frag</span><span class=\"o\">.</span><span class=\"na\">getChildren</span><span class=\"o\">().</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">frag</span><span class=\"o\">.</span><span class=\"na\">getNonJavaResources</span><span class=\"o\">().</span><span class=\"na\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\t\t\t\t\t\t\t\t<span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">element</span><span class=\"o\">.</span><span class=\"na\">getElementName</span><span class=\"o\">());</span>\n\t\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t\t<span class=\"o\">}</span>\n\t\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">JavaModelException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">createBuildPropertiesFile</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IFile</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nc\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getBuildProperties</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">WorkspaceBuildModel</span> <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">WorkspaceBuildModel</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IBuildModelFactory</span> <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">getFactory</span><span class=\"o\">();</span>\n\n\t\t\t<span class=\"c1\">// BIN.INCLUDES</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IBuildEntry</span> <span class=\"n\">binEntry</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"na\">createEntry</span><span class=\"o\">(</span><span class=\"nc\">IBuildEntry</span><span class=\"o\">.</span><span class=\"na\">BIN_INCLUDES</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">fillBinIncludes</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">binEntry</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">getBuild</span><span class=\"o\">().</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">binEntry</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">();</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">fillBinIncludes</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">IBuildEntry</span> <span class=\"n\">binEntry</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"n\">binEntry</span><span class=\"o\">.</span><span class=\"na\">addToken</span><span class=\"o\">(</span><span class=\"nc\">ICoreConstants</span><span class=\"o\">.</span><span class=\"na\">PLUGIN_FILENAME_DESCRIPTOR</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">binEntry</span><span class=\"o\">.</span><span class=\"na\">addToken</span><span class=\"o\">(</span><span class=\"s\">\"META-INF/\"</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">setClasspath</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">JavaModelException</span><span class=\"o\">,</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IJavaProject</span> <span class=\"n\">javaProject</span> <span class=\"o\">=</span> <span class=\"nc\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"c1\">// Set output folder</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">outputFolderName</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFullPath</span><span class=\"o\">().</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">outputFolderName</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">setOutputLocation</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">getClassPathEntries</span><span class=\"o\">(</span><span class=\"n\">javaProject</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">javaProject</span><span class=\"o\">.</span><span class=\"na\">setRawClasspath</span><span class=\"o\">(</span><span class=\"n\">entries</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">IProject</span> <span class=\"nf\">createProject</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IWorkspaceRoot</span> <span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"nc\">ResourcesPlugin</span><span class=\"o\">.</span><span class=\"na\">getWorkspace</span><span class=\"o\">().</span><span class=\"na\">getRoot</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"na\">getProject</span><span class=\"o\">(</span><span class=\"n\">projectName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">delete</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">open</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span>\n\n\t\t<span class=\"nc\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">addNatureToProject</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"no\">PDE</span><span class=\"o\">.</span><span class=\"na\">PLUGIN_NATURE</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"nc\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">addNatureToProject</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"nc\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">NATURE_ID</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IFolder</span> <span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getFolder</span><span class=\"o\">(</span><span class=\"n\">sourceFolderName</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"na\">exists</span><span class=\"o\">())</span>\n\t\t\t<span class=\"nc\">CoreUtility</span><span class=\"o\">.</span><span class=\"na\">createFolder</span><span class=\"o\">(</span><span class=\"n\">folder</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">project</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"nf\">getClassPathEntries</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IJavaProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">internalClassPathEntries</span> <span class=\"o\">=</span> <span class=\"n\">getInternalClassPathEntries</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"n\">internalClassPathEntries</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">];</span>\n\t\t<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">arraycopy</span><span class=\"o\">(</span><span class=\"n\">internalClassPathEntries</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">entries</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">internalClassPathEntries</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">);</span>\n\n\t\t<span class=\"c1\">// Set EE of new project</span>\n\t\t<span class=\"nc\">String</span> <span class=\"n\">executionEnvironment</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">executionEnvironment</span> <span class=\"o\">=</span> <span class=\"n\">confExecutionEnvironment</span><span class=\"o\">;</span>\n\t\t<span class=\"nc\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">setComplianceOptions</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">,</span> <span class=\"n\">executionEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"nc\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">createJREEntry</span><span class=\"o\">(</span><span class=\"n\">executionEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"nc\">ClasspathComputer</span><span class=\"o\">.</span><span class=\"na\">createContainerEntry</span><span class=\"o\">();</span>\n\n\t\t<span class=\"k\">return</span> <span class=\"n\">entries</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"nf\">getInternalClassPathEntries</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IJavaProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">sourceFolderName</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[]</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">IClasspathEntry</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPath</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getProject</span><span class=\"o\">().</span><span class=\"na\">getFullPath</span><span class=\"o\">().</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">sourceFolderName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">entries</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"nc\">JavaCore</span><span class=\"o\">.</span><span class=\"na\">newSourceEntry</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">entries</span><span class=\"o\">;</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">createManifest</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">IProject</span> <span class=\"n\">project</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">CoreException</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IFile</span> <span class=\"n\">fragmentXml</span> <span class=\"o\">=</span> <span class=\"nc\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getFragmentXml</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IFile</span> <span class=\"n\">pluginXml</span> <span class=\"o\">=</span> <span class=\"nc\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getPluginXml</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IFile</span> <span class=\"n\">manifest</span> <span class=\"o\">=</span> <span class=\"nc\">PDEProject</span><span class=\"o\">.</span><span class=\"na\">getManifest</span><span class=\"o\">(</span><span class=\"n\">project</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">fModel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">WorkspaceBundlePluginModel</span><span class=\"o\">(</span><span class=\"n\">manifest</span><span class=\"o\">,</span> <span class=\"n\">pluginXml</span><span class=\"o\">);</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IPluginBase</span> <span class=\"n\">pluginBase</span> <span class=\"o\">=</span> <span class=\"n\">fModel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">targetVersion</span> <span class=\"o\">=</span> <span class=\"n\">configTargetVersion</span><span class=\"o\">;</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setSchemaVersion</span><span class=\"o\">(</span><span class=\"nc\">TargetPlatformHelper</span><span class=\"o\">.</span><span class=\"na\">getSchemaVersionForTargetVersion</span><span class=\"o\">(</span><span class=\"n\">targetVersion</span><span class=\"o\">));</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setId</span><span class=\"o\">(</span><span class=\"n\">bundleId</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setVersion</span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setName</span><span class=\"o\">(</span><span class=\"n\">projectName</span><span class=\"o\">);</span>\n\t\t<span class=\"n\">pluginBase</span><span class=\"o\">.</span><span class=\"na\">setProviderName</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">fModel</span> <span class=\"k\">instanceof</span> <span class=\"nc\">IBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">IBundlePluginModelBase</span> <span class=\"n\">bmodel</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"nc\">IBundlePluginModelBase</span><span class=\"o\">)</span> <span class=\"n\">fModel</span><span class=\"o\">);</span>\n\t\t\t<span class=\"o\">((</span><span class=\"nc\">IBundlePluginBase</span><span class=\"o\">)</span> <span class=\"n\">bmodel</span><span class=\"o\">.</span><span class=\"na\">getPluginBase</span><span class=\"o\">()).</span><span class=\"na\">setTargetVersion</span><span class=\"o\">(</span><span class=\"n\">targetVersion</span><span class=\"o\">);</span>\n\t\t\t<span class=\"n\">bmodel</span><span class=\"o\">.</span><span class=\"na\">getBundleModel</span><span class=\"o\">().</span><span class=\"na\">getBundle</span><span class=\"o\">().</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"nc\">Constants</span><span class=\"o\">.</span><span class=\"na\">BUNDLE_MANIFESTVERSION</span><span class=\"o\">,</span> <span class=\"s\">\"2\"</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">IBundle</span> <span class=\"n\">bundle</span> <span class=\"o\">=</span> <span class=\"o\">((</span><span class=\"nc\">BundlePluginBase</span><span class=\"o\">)</span> <span class=\"n\">pluginBase</span><span class=\"o\">).</span><span class=\"na\">getBundle</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">exeEnvironment</span> <span class=\"o\">=</span> <span class=\"n\">confExecutionEnvironment</span><span class=\"o\">;</span>\n\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">exeEnvironment</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"n\">bundle</span><span class=\"o\">.</span><span class=\"na\">setHeader</span><span class=\"o\">(</span><span class=\"nc\">Constants</span><span class=\"o\">.</span><span class=\"na\">BUNDLE_REQUIREDEXECUTIONENVIRONMENT</span><span class=\"o\">,</span> <span class=\"n\">exeEnvironment</span><span class=\"o\">);</span>\n\t\t<span class=\"o\">}</span>\n\t<span class=\"o\">}</span>\n\n\t<span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"nf\">getCommaValuesFromPackagesSet</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"nc\">Set</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">values</span><span class=\"o\">,</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">version</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">StringBuffer</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuffer</span><span class=\"o\">();</span>\n\t\t<span class=\"kd\">final</span> <span class=\"nc\">Iterator</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">iterator</span><span class=\"o\">();</span>\n\t\t<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\",\\n \"</span><span class=\"o\">);</span> <span class=\"c1\">// space required for multiline headers</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t\t<span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">iter</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n\n\t\t\t<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"s\">\";version=\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n\t\t\t\t<span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\";version=\\\"\"</span><span class=\"o\">).</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">version</span><span class=\"o\">).</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\"\\\"\"</span><span class=\"o\">);</span> <span class=\"c1\">//$NON-NLS-2$</span>\n\t\t\t<span class=\"o\">}</span>\n\t\t<span class=\"o\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n\t<span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>It feels like this code could be heavily simplified, but it does the job.</p>","contentSnippet":"I am currently working with eclipse projects. Lots of eclipse projects. So much that I want to generate eclipse projects using java code (I hope to write another article of the why of this soon).\n\nSurprisingly this task is not really complicated but requires an awful lot of\ncode to work.\n\nSo once I made it work if felt the need to share it as I did not found much documentation.\n\nThe following code is just an simplification of org.eclipse.pde.internal.ui.wizards.plugin.NewProjectCreationOperation from the Plugin Development Environment (PDE) project.\n\nIn eclipse NewProjectCreationOperation is called at the end of eclipse new plugin wizard (org.eclipse.pde.ui.templates.NewPluginProjectFromTemplateWizard) and initialize a new eclipse plugin project according to the choices done by the user during the wizard steps.\n\nI just simplified the pde code by removing every UI related dependencies and replacing the object holding the\nwizard inputs by static fields directly in the class (for simplicity sake).\n\nThe minimal set of dependencies needed to make the following code work is:\n\n  org.eclipse.core.runtime;bundle-version=”3.13.0”\n  org.eclipse.core.resources;bundle-version=”3.12.0”\n  org.eclipse.jdt.core;bundle-version=”3.13.0”\n  org.eclipse.pde.core;bundle-version=”3.11.100”\n\n\nThe entry point is the execute method that will create an minimal eclipse plugin project named “myPlugin”.\n\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IFolder;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.resources.IWorkspaceRoot;\nimport org.eclipse.core.resources.ResourcesPlugin;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IPath;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.jdt.core.IClasspathEntry;\nimport org.eclipse.jdt.core.IJavaElement;\nimport org.eclipse.jdt.core.IJavaProject;\nimport org.eclipse.jdt.core.IPackageFragment;\nimport org.eclipse.jdt.core.IPackageFragmentRoot;\nimport org.eclipse.jdt.core.JavaCore;\nimport org.eclipse.jdt.core.JavaModelException;\nimport org.eclipse.pde.core.build.IBuildEntry;\nimport org.eclipse.pde.core.build.IBuildModelFactory;\nimport org.eclipse.pde.core.plugin.IPluginBase;\nimport org.eclipse.pde.core.plugin.IPluginLibrary;\nimport org.eclipse.pde.internal.core.ClasspathComputer;\nimport org.eclipse.pde.internal.core.ICoreConstants;\nimport org.eclipse.pde.internal.core.TargetPlatformHelper;\nimport org.eclipse.pde.internal.core.build.WorkspaceBuildModel;\nimport org.eclipse.pde.internal.core.bundle.BundlePluginBase;\nimport org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModel;\nimport org.eclipse.pde.internal.core.bundle.WorkspaceBundlePluginModelBase;\nimport org.eclipse.pde.internal.core.ibundle.IBundle;\nimport org.eclipse.pde.internal.core.ibundle.IBundlePluginBase;\nimport org.eclipse.pde.internal.core.ibundle.IBundlePluginModelBase;\nimport org.eclipse.pde.internal.core.natures.PDE;\nimport org.eclipse.pde.internal.core.plugin.WorkspacePluginModelBase;\nimport org.eclipse.pde.internal.core.project.PDEProject;\nimport org.eclipse.pde.internal.core.util.CoreUtility;\nimport org.osgi.framework.Constants;\n\npublic class PluginApplicationCreator {\n\tprivate WorkspacePluginModelBase fModel;\n\tprivate final String version = \"0.0.0\";\n\tprivate final String sourceFolderName = \"src\";\n\tprivate final String outputFolderName = \"bin\";\n\tprivate final String confExecutionEnvironment = \"JavaSE-1.8\";\n\tprivate final String bundleId = \"myPluginBundleId\";\n\tprivate final String configTargetVersion = \"3.8\";\n\tprivate final String projectName = \"myPlugin\";\n\n\tpublic static void main(final String[] args) throws CoreException {\n\t\tnew PluginApplicationCreator().execute();\n\t}\n\n\tpublic void execute() throws CoreException {\n\t\tfinal IProject project = this.createProject();\n\n\t\tif (project.hasNature(JavaCore.NATURE_ID)) {\n\t\t\tsetClasspath(project);\n\t\t}\n\n\t\tcreateManifest(project);\n\t\tcreateBuildPropertiesFile(project);\n\n\t\t// not sure when this call is usefull.\n\t\tadjustManifests(null, project, fModel.getPluginBase());\n\n\t\tfModel.save();\n\n\t}\n\n\tprivate void adjustManifests(final IProgressMonitor monitor, final IProject project, final IPluginBase bundle)\n\t\t\tthrows CoreException {\n\t\tfinal IPluginLibrary[] libs = fModel.getPluginBase().getLibraries();\n\t\tfinal Set<String> packages = new TreeSet<>();\n\t\tfor (final IPluginLibrary lib : libs) {\n\t\t\tfinal String[] filters = lib.getContentFilters();\n\t\t\t// if a library is fully exported, then export all source packages (since we\n\t\t\t// don't know which source folders go with which library)\n\t\t\tif (filters.length == 1 && filters[0].equals(\"**\")) {\n\t\t\t\taddAllSourcePackages(project, packages);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (final String filter : filters) {\n\t\t\t\tif (filter.endsWith(\".*\"))\n\t\t\t\t\tpackages.add(filter.substring(0, filter.length() - 2));\n\t\t\t}\n\t\t}\n\t\tif (!packages.isEmpty()) {\n\t\t\tfinal IBundle iBundle = ((WorkspaceBundlePluginModelBase) fModel).getBundleModel().getBundle();\n\t\t\tiBundle.setHeader(Constants.EXPORT_PACKAGE, getCommaValuesFromPackagesSet(packages, version));\n\t\t}\n\t}\n\n\tprivate void addAllSourcePackages(final IProject project, final Set<String> list) {\n\t\ttry {\n\t\t\tfinal IJavaProject javaProject = JavaCore.create(project);\n\t\t\tfinal IClasspathEntry[] classpath = javaProject.getRawClasspath();\n\t\t\tfor (final IClasspathEntry entry : classpath) {\n\t\t\t\tif (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE) {\n\t\t\t\t\tfinal IPath path = entry.getPath().removeFirstSegments(1);\n\t\t\t\t\tif (path.segmentCount() > 0) {\n\t\t\t\t\t\tfinal IPackageFragmentRoot root = javaProject.getPackageFragmentRoot(project.getFolder(path));\n\t\t\t\t\t\tfinal IJavaElement[] children = root.getChildren();\n\t\t\t\t\t\tfor (final IJavaElement element : children) {\n\t\t\t\t\t\t\tfinal IPackageFragment frag = (IPackageFragment) element;\n\t\t\t\t\t\t\tif (frag.getChildren().length > 0 || frag.getNonJavaResources().length > 0)\n\t\t\t\t\t\t\t\tlist.add(element.getElementName());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (final JavaModelException e) {\n\t\t}\n\t}\n\n\tprivate void createBuildPropertiesFile(final IProject project) throws CoreException {\n\t\tfinal IFile file = PDEProject.getBuildProperties(project);\n\t\tif (!file.exists()) {\n\t\t\tfinal WorkspaceBuildModel model = new WorkspaceBuildModel(file);\n\t\t\tfinal IBuildModelFactory factory = model.getFactory();\n\n\t\t\t// BIN.INCLUDES\n\t\t\tfinal IBuildEntry binEntry = factory.createEntry(IBuildEntry.BIN_INCLUDES);\n\t\t\tfillBinIncludes(project, binEntry);\n\t\t\tmodel.getBuild().add(binEntry);\n\t\t\tmodel.save();\n\t\t}\n\t}\n\n\tprivate void fillBinIncludes(final IProject project, final IBuildEntry binEntry) throws CoreException {\n\t\tbinEntry.addToken(ICoreConstants.PLUGIN_FILENAME_DESCRIPTOR);\n\t\tbinEntry.addToken(\"META-INF/\");\n\t}\n\n\tprivate void setClasspath(final IProject project) throws JavaModelException, CoreException {\n\t\tfinal IJavaProject javaProject = JavaCore.create(project);\n\t\t// Set output folder\n\t\tif (outputFolderName != null) {\n\t\t\tfinal IPath path = project.getFullPath().append(outputFolderName);\n\t\t\tjavaProject.setOutputLocation(path, null);\n\t\t}\n\t\tfinal IClasspathEntry[] entries = getClassPathEntries(javaProject);\n\t\tjavaProject.setRawClasspath(entries, null);\n\t}\n\n\tprivate IProject createProject() throws CoreException {\n\n\t\tfinal IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n\t\tfinal IProject project = root.getProject(projectName);\n\t\tproject.delete(true, null);\n\t\tproject.create(null);\n\t\tproject.open(null);\n\n\t\tCoreUtility.addNatureToProject(project, PDE.PLUGIN_NATURE, null);\n\t\tCoreUtility.addNatureToProject(project, JavaCore.NATURE_ID, null);\n\t\tfinal IFolder folder = project.getFolder(sourceFolderName);\n\t\tif (!folder.exists())\n\t\t\tCoreUtility.createFolder(folder);\n\t\treturn project;\n\t}\n\n\tprivate IClasspathEntry[] getClassPathEntries(final IJavaProject project) {\n\t\tfinal IClasspathEntry[] internalClassPathEntries = getInternalClassPathEntries(project);\n\t\tfinal IClasspathEntry[] entries = new IClasspathEntry[internalClassPathEntries.length + 2];\n\t\tSystem.arraycopy(internalClassPathEntries, 0, entries, 2, internalClassPathEntries.length);\n\n\t\t// Set EE of new project\n\t\tString executionEnvironment = null;\n\t\texecutionEnvironment = confExecutionEnvironment;\n\t\tClasspathComputer.setComplianceOptions(project, executionEnvironment);\n\t\tentries[0] = ClasspathComputer.createJREEntry(executionEnvironment);\n\t\tentries[1] = ClasspathComputer.createContainerEntry();\n\n\t\treturn entries;\n\t}\n\n\tprivate IClasspathEntry[] getInternalClassPathEntries(final IJavaProject project) {\n\t\tif (sourceFolderName == null) {\n\t\t\treturn new IClasspathEntry[0];\n\t\t}\n\t\tfinal IClasspathEntry[] entries = new IClasspathEntry[1];\n\t\tfinal IPath path = project.getProject().getFullPath().append(sourceFolderName);\n\t\tentries[0] = JavaCore.newSourceEntry(path);\n\t\treturn entries;\n\t}\n\n\tprivate void createManifest(final IProject project) throws CoreException {\n\t\tfinal IFile fragmentXml = PDEProject.getFragmentXml(project);\n\t\tfinal IFile pluginXml = PDEProject.getPluginXml(project);\n\t\tfinal IFile manifest = PDEProject.getManifest(project);\n\t\tfModel = new WorkspaceBundlePluginModel(manifest, pluginXml);\n\t\tfinal IPluginBase pluginBase = fModel.getPluginBase();\n\t\tfinal String targetVersion = configTargetVersion;\n\t\tpluginBase.setSchemaVersion(TargetPlatformHelper.getSchemaVersionForTargetVersion(targetVersion));\n\t\tpluginBase.setId(bundleId);\n\t\tpluginBase.setVersion(version);\n\t\tpluginBase.setName(projectName);\n\t\tpluginBase.setProviderName(\"\");\n\t\tif (fModel instanceof IBundlePluginModelBase) {\n\t\t\tfinal IBundlePluginModelBase bmodel = ((IBundlePluginModelBase) fModel);\n\t\t\t((IBundlePluginBase) bmodel.getPluginBase()).setTargetVersion(targetVersion);\n\t\t\tbmodel.getBundleModel().getBundle().setHeader(Constants.BUNDLE_MANIFESTVERSION, \"2\");\n\t\t}\n\n\t\tfinal IBundle bundle = ((BundlePluginBase) pluginBase).getBundle();\n\t\tfinal String exeEnvironment = confExecutionEnvironment;\n\t\tif (exeEnvironment != null) {\n\t\t\tbundle.setHeader(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT, exeEnvironment);\n\t\t}\n\t}\n\n\tprivate String getCommaValuesFromPackagesSet(final Set<String> values, final String version) {\n\t\tfinal StringBuffer buffer = new StringBuffer();\n\t\tfinal Iterator<String> iter = values.iterator();\n\t\twhile (iter.hasNext()) {\n\t\t\tif (buffer.length() > 0) {\n\t\t\t\tbuffer.append(\",\\n \"); // space required for multiline headers\n\t\t\t}\n\t\t\tfinal String value = iter.next().toString();\n\t\t\tbuffer.append(value);\n\n\t\t\tif (value.indexOf(\";version=\") == -1 && (version != null) && (values.size() == 1)) {\n\t\t\t\tbuffer.append(\";version=\\\"\").append(version).append(\"\\\"\"); //$NON-NLS-2$\n\t\t\t}\n\t\t}\n\t\treturn buffer.toString();\n\t}\n\n}\n\n\nIt feels like this code could be heavily simplified, but it does the job.","id":"https://mleduc.xyz/eclipse/2017/07/26/eclipse-plugin-generation","isoDate":"2017-07-26T15:53:00.000Z"},{"title":"Object Algebras Composition","link":"https://mleduc.xyz/scala/object/2016/10/20/object-algebra-composition.html","pubDate":"2016-10-20T12:21:33.000Z","author":"Manuel Leduc","content":"<h1 id=\"introduction\">Introduction</h1>\n\n<p>This article is composed of two parts. The first part explains the concept of “object algebras” using a toy example. The second part reuse the same toy example and extends it.</p>\n\n<h1 id=\"object-algebras\">Object algebras</h1>\n\n<p>The expression problem, as presented in  <a href=\"https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/#sec-2\">Oleksandr Manzyuk’s blog</a>, is a way to offer the capability for a DSL to be extensible either in term of operations and in term of expression types.</p>\n\n<p>After reading <a href=\"http://www.cs.utexas.edu/~wcook/Drafts/2012/ecoop2012.pdf\">Extensibility for the Masses - <em>Practical Extensibility with Object Algebras</em></a> I decided to give it a look and tried to add a few more features to the <a href=\"http://i.cs.hku.hk/~bruno/oa/\">example</a> provided by the authors.</p>\n\n<p>The architecture of the program is summarized in the following diagram :\n<img src=\"/assets/2016-10-20-object-algebra-composition/object_algebra_example.svg\" alt=\"Schema Example Architecture\" /></p>\n\n<p><strong>PPrint</strong> and <strong>Eval</strong> are two operations which respectivelly pretty print a program and eval it to an integer.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">Eval</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">PPrint</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">print</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">String</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><strong>ExpAlg</strong> and <strong>SubExpAlg</strong> are <em>object algebra interfaces</em> which can be used to define programs of the language. ExpAlg provides to operations <code class=\"highlighter-rouge\">lit(x: Int)</code> and <code class=\"highlighter-rouge\">add(e1: E, e2: E)</code> . SubExpAlg inherits from ExpAlg and add the notion of subtraction with the <code class=\"highlighter-rouge\">sub(e1: E, e2: E)</code> method.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"nc\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">sub</span><span class=\"o\">(</span><span class=\"n\">e1</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">e2</span> <span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span> <span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The interpreters of the language are named <em>object algebras</em>. <strong>EvalExpAlg</strong> interprets  <strong>ExpAlg</strong> programs and evaluate an integer.</p>\n\n<p><strong>EvalSubExpAlg</strong> inherits of <strong>EvalExpAlg</strong> and evaluates <strong>SubExpAlg</strong> programs.</p>\n\n<p><strong>PrintExpAlg</strong> evaluates <strong>EvalExpAlg</strong> programs and return a string representation.</p>\n\n<p>Since both <strong>PrintExpAlg</strong> and <strong>EvalSubExpAlg</strong> are able to interpret <strong>SubExpAlg</strong> they are also able to interpret any language previously defined using <strong>ExpAlg</strong>.</p>\n\n<blockquote>\n  <p>This point is very important in language reuse. Using object algebras a developer</p>\n\n  <ul>\n    <li>is able to extend a language without modifications of the existing code base.</li>\n    <li>know that any program written with a current version of an algebra will be interpretable as well with any future extended interpreters of the language</li>\n  </ul>\n</blockquote>\n\n<p>In conclusion of this section, an example of the usage of our languages.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">object</span> <span class=\"nc\">Examples</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">exp1</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">](</span><span class=\"n\">alg</span> <span class=\"k\">:</span> <span class=\"kt\">ExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n      <span class=\"nf\">add</span><span class=\"o\">(</span><span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c1\">// An expression using subtraction too\n</span>  <span class=\"k\">def</span> <span class=\"nf\">exp2</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">](</span><span class=\"n\">alg</span> <span class=\"k\">:</span> <span class=\"kt\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">E</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n      <span class=\"nf\">sub</span><span class=\"o\">(</span><span class=\"nf\">exp1</span><span class=\"o\">(</span><span class=\"n\">alg</span><span class=\"o\">),</span> <span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"o\">()</span> <span class=\"k\">:</span> <span class=\"kt\">Unit</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">val</span> <span class=\"nv\">ea</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"nv\">esa</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalSubExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"nv\">pa</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"k\">val</span> <span class=\"nv\">pa2</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpAlg2</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n    <span class=\"nf\">println</span><span class=\"o\">(</span><span class=\"s\">\"Evaluation of exp1 \\\"\"</span> <span class=\"o\">+</span> <span class=\"nf\">exp1</span><span class=\"o\">(</span><span class=\"n\">pa</span><span class=\"o\">).</span><span class=\"py\">print</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"\\\" is: \"</span> <span class=\"o\">+</span> <span class=\"nf\">exp1</span><span class=\"o\">(</span><span class=\"n\">esa</span><span class=\"o\">).</span><span class=\"py\">eval</span><span class=\"o\">())</span>\n    <span class=\"c1\">// Evaluation of exp1 \"3 + 4\" is: 7\n</span>    <span class=\"nf\">println</span><span class=\"o\">(</span><span class=\"s\">\"Evaluation of exp2 \\\"\"</span> <span class=\"o\">+</span> <span class=\"nf\">exp2</span><span class=\"o\">(</span><span class=\"n\">pa</span><span class=\"o\">).</span><span class=\"py\">print</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"\\\" is: \"</span> <span class=\"o\">+</span> <span class=\"nf\">exp2</span><span class=\"o\">(</span><span class=\"n\">esa</span><span class=\"o\">).</span><span class=\"py\">eval</span><span class=\"o\">())</span>\n    <span class=\"c1\">// Evaluation of exp2 \"3 + 4 - 4\" is: 3\n</span>  <span class=\"o\">}</span>\n\n  <span class=\"nf\">text</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"extending-an-object-algebra\">Extending an Object algebra</h1>\n\n<p>In order to study the advantages and limitation of this approach we are going to extend the previously explained use case with the notions of boolean operations (&amp;&amp;, ||, ==, !). We will also offer a way to guaranty that the left and side and right and side of the <code class=\"highlighter-rouge\">==</code> operator are of the same type.</p>\n\n<p><img src=\"/assets/2016-10-20-object-algebra-composition/object_algebra_extended.svg\" alt=\"Schema Example Architecture\" /></p>\n\n<h2 id=\"boolean-operations\">Boolean operations</h2>\n\n<p>The first step is to create a language dedicated to the definition of boolean operation, the <em>object algebra interface</em> <strong>BoolExpAlg</strong> (the type definition might be hard to understand and will be detail in the next section).</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"nf\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"nf\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"nf\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"nf\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n  <span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>We are now able to define the corresponding <em>object algebras</em> for boolean interpretation and pretty printing.</p>\n\n<p>But first we are going to update the definition of the <strong>Eval</strong> trait and add a parametrized type.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">X</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>By doing so we allow the <em>object algebras</em> of integer and boolean to share a common type.</p>\n\n<p>Now that it done, here is the code of the <em>object algebras</em>.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">trait</span> <span class=\"nc\">EvalBoolExpAlg</span> <span class=\"k\">extends</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"nv\">left</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">right</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"o\">=:=[</span><span class=\"kt\">F1</span>, <span class=\"kt\">F2</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"nv\">left</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nv\">right</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nv\">exp</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">],</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"nv\">left</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span> <span class=\"o\">||</span> <span class=\"nv\">right</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"nf\">trueE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">falseE</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">and</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">or</span><span class=\"o\">(</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">not</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"k\">:</span> <span class=\"kt\">E</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n    <span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>For now we have a new language dedicated to the definition and interpretation of boolean expressions, completely decouple from our previous languages definitions.</p>\n\n<p>An example of program in this language :</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">program3</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"nf\">equal</span><span class=\"o\">(</span><span class=\"nf\">trueE</span><span class=\"o\">(),</span> <span class=\"nf\">falseE</span><span class=\"o\">())</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"nv\">printB</span><span class=\"k\">:</span> <span class=\"kt\">PrintExpBoolAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpBoolAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n<span class=\"k\">val</span> <span class=\"nv\">evalB</span><span class=\"k\">:</span> <span class=\"kt\">EvalBoolExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalBoolExpAlg</span><span class=\"o\">()</span> <span class=\"o\">{}</span>\n<span class=\"nf\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">\"\"\"${program3(printB).print()} ---&gt; ${program3(evalB).eval()}\"\"\"</span><span class=\"o\">)</span>\n<span class=\"c1\">// (true == false) ---&gt; false\n</span></code></pre></div></div>\n\n<h2 id=\"language-composition\">Language composition</h2>\n\n<p>We are now at a point where we can ask ourselves, can I mix easily my integer language with my boolean ?</p>\n\n<p>I hope that the following program will proves you that the answer is yes !</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">program4</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span>, <span class=\"kt\">G</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">G</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"nf\">equal</span><span class=\"o\">(</span><span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"nf\">sub</span><span class=\"o\">(</span><span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"nv\">printIB</span><span class=\"k\">:</span> <span class=\"kt\">PrintExpBoolAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">PrintExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PrintExpBoolAlg</span><span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"nc\">PrintExpAlg</span> <span class=\"o\">{}</span>\n<span class=\"k\">val</span> <span class=\"nv\">evalIB</span><span class=\"k\">:</span> <span class=\"kt\">EvalBoolExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">EvalSubExpAlg</span> <span class=\"kt\">with</span> <span class=\"kt\">Object</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">EvalBoolExpAlg</span><span class=\"o\">()</span> <span class=\"k\">with</span> <span class=\"nc\">EvalSubExpAlg</span> <span class=\"o\">{}</span>\n<span class=\"nf\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"s\">\"\"\"${program4(printIB).print()} ---&gt; ${program4(evalIB).eval()}\"\"\"</span><span class=\"o\">)</span>\n<span class=\"c1\">// (1 == 2 - 1) ---&gt; true\n</span></code></pre></div></div>\n\n<p>Only by reusing the previously defined definitions and using <a href=\"http://docs.scala-lang.org/tutorials/tour/mixin-class-composition.html\">traits compositions</a>. We have defined a language supporting the evaluation of integer expressions, boolean expression and especially the evaluation of the equality of two integer using a boolean operator !</p>\n\n<h2 id=\"more-details-about-the-equality\">More details about the equality.</h2>\n\n<p>I wanted the equal operation of be type-safe. In other words in did not want the <code class=\"highlighter-rouge\">equal</code> operation to be able to compare apple and bananas (or integer and boolean).</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">program4</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span>, <span class=\"kt\">G</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">F</span><span class=\"o\">](</span><span class=\"n\">alg</span><span class=\"k\">:</span> <span class=\"kt\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">F</span>, <span class=\"kt\">E</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"nc\">SubExpAlg</span><span class=\"o\">[</span><span class=\"kt\">G</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">E</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">import</span> <span class=\"nn\">alg._</span>\n  <span class=\"k\">val</span> <span class=\"nv\">p1</span> <span class=\"k\">=</span> <span class=\"nf\">equal</span><span class=\"o\">(</span><span class=\"nf\">trueE</span><span class=\"o\">(),</span> <span class=\"nf\">lit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"c1\">// does not compile !\n</span><span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>But in the other hand I wanted my <code class=\"highlighter-rouge\">equal</code> operation to be extensible. Any new language with comparable elements must be able to reuse this operation easily.</p>\n\n<p>To meet those two objectives the following pieces of code have been needed.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// object algebra interface :\n</span><span class=\"k\">trait</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">E</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"c1\">// knowing a type A, E is a subtype of A\n</span>  <span class=\"c1\">// [...]\n</span>\n  <span class=\"c1\">// knowing a type A, F1 and F2 are both subtype of A\n</span>  <span class=\"c1\">// the implicit enforce the type equality of F1 and F2 si both F1 and F2 are different subtypes of A, the scala refuses to compile.\n</span>  <span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"kt\">F1</span> <span class=\"o\">=:=</span> <span class=\"n\">F2</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">E</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// Eval[_] defines that anything \"evaluable\" is accepted in the equal method.\n// Eval[Bool] defines the type of the object algebra itself.\n</span><span class=\"k\">trait</span> <span class=\"nc\">EvalBoolExpAlg</span> <span class=\"k\">extends</span> <span class=\"nc\">BoolExpAlg</span><span class=\"o\">[</span><span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n\n  <span class=\"c1\">// the signature of the equal method, derived from the previous type definition\n</span>  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"o\">[</span><span class=\"kt\">F1</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">F2</span> <span class=\"k\">&lt;:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]](</span><span class=\"n\">left</span><span class=\"k\">:</span> <span class=\"kt\">F1</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"k\">:</span> <span class=\"kt\">F2</span><span class=\"o\">)(</span><span class=\"k\">implicit</span> <span class=\"n\">ev</span><span class=\"k\">:</span> <span class=\"o\">=:=[</span><span class=\"kt\">F1</span>, <span class=\"kt\">F2</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Eval</span><span class=\"o\">[</span><span class=\"kt\">Boolean</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"o\">()</span><span class=\"k\">:</span> <span class=\"kt\">Boolean</span> <span class=\"o\">=</span> <span class=\"nv\">left</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"nv\">right</span><span class=\"o\">.</span><span class=\"py\">eval</span><span class=\"o\">()</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>For now my opinion of object algebras is optimistic and even if the development of more complex DSL might lead to unexpected issues, the implementation of this small example have been surprisingly easy.</p>\n\n<p>We can still observe that in order to add more flexibility we had to edit once a previously defined code. This is not mandatory and more verbose solution might be envisioned to do the same thing without touching any previously defined source code.</p>\n\n<p>Also finding out a working definition of <strong>BoolExpAlg</strong> was not straightforward (but I am not an experienced Scala developer !).</p>\n\n<p>The full code of the snippets found in the article can be found here : <a href=\"https://gist.github.com/manuelleduc/2607f15407017daf0d6ae9a987ece243\">https://gist.github.com/manuelleduc/2607f15407017daf0d6ae9a987ece243</a></p>\n\n<p>I hope this article gave you a first insight of the advantages and limitations of this approach of DSL definition and reuse.</p>\n\n<h1 id=\"good-reads\">Good reads</h1>\n\n<p>I have been introduced to the concept of object algebras by this awesome talk :  “<a href=\"https://www.youtube.com/watch?v=snbsYyBS4Bs\">Using Object Algebras To Design Embedded Domain Specific Languages</a>” by <a href=\"http://julien.richard-foy.fr/\">Julien Richard-Foy</a> at <a href=\"http://curry-on.org/2016/\">Curry On’16</a>.</p>","contentSnippet":"Introduction\n\nThis article is composed of two parts. The first part explains the concept of “object algebras” using a toy example. The second part reuse the same toy example and extends it.\n\nObject algebras\n\nThe expression problem, as presented in  Oleksandr Manzyuk’s blog, is a way to offer the capability for a DSL to be extensible either in term of operations and in term of expression types.\n\nAfter reading Extensibility for the Masses - Practical Extensibility with Object Algebras I decided to give it a look and tried to add a few more features to the example provided by the authors.\n\nThe architecture of the program is summarized in the following diagram :\n\n\nPPrint and Eval are two operations which respectivelly pretty print a program and eval it to an integer.\n\ntrait Eval {\n  def eval() : Int\n}\n\ntrait PPrint {\n  def print() : String\n}\n\n\nExpAlg and SubExpAlg are object algebra interfaces which can be used to define programs of the language. ExpAlg provides to operations lit(x: Int) and add(e1: E, e2: E) . SubExpAlg inherits from ExpAlg and add the notion of subtraction with the sub(e1: E, e2: E) method.\n\ntrait ExpAlg[E] {\n  def lit(x : Int) : E\n    def add(e1 : E, e2 : E) : E\n}\n\ntrait SubExpAlg[E] extends ExpAlg[E] {\n  def sub(e1 : E, e2 : E) : E\n}\n\n\nThe interpreters of the language are named object algebras. EvalExpAlg interprets  ExpAlg programs and evaluate an integer.\n\nEvalSubExpAlg inherits of EvalExpAlg and evaluates SubExpAlg programs.\n\nPrintExpAlg evaluates EvalExpAlg programs and return a string representation.\n\nSince both PrintExpAlg and EvalSubExpAlg are able to interpret SubExpAlg they are also able to interpret any language previously defined using ExpAlg.\n\n\n  This point is very important in language reuse. Using object algebras a developer\n\n  \n    is able to extend a language without modifications of the existing code base.\n    know that any program written with a current version of an algebra will be interpretable as well with any future extended interpreters of the language\n  \n\n\nIn conclusion of this section, an example of the usage of our languages.\n\nobject Examples extends App {\n  def exp1[E](alg : ExpAlg[E]) = {\n    import alg._\n      add(lit(3), lit(4))\n  }\n\n  // An expression using subtraction too\n  def exp2[E](alg : SubExpAlg[E]) = {\n    import alg._\n      sub(exp1(alg), lit(4))\n  }\n\n  def test() : Unit = {\n    val ea = new EvalExpAlg() {}\n    val esa = new EvalSubExpAlg() {}\n    val pa = new PrintExpAlg() {}\n    val pa2 = new PrintExpAlg2() {}\n    println(\"Evaluation of exp1 \\\"\" + exp1(pa).print() + \"\\\" is: \" + exp1(esa).eval())\n    // Evaluation of exp1 \"3 + 4\" is: 7\n    println(\"Evaluation of exp2 \\\"\" + exp2(pa).print() + \"\\\" is: \" + exp2(esa).eval())\n    // Evaluation of exp2 \"3 + 4 - 4\" is: 3\n  }\n\n  text()\n}\n\n\nExtending an Object algebra\n\nIn order to study the advantages and limitation of this approach we are going to extend the previously explained use case with the notions of boolean operations (&&, ||, ==, !). We will also offer a way to guaranty that the left and side and right and side of the == operator are of the same type.\n\n\n\nBoolean operations\n\nThe first step is to create a language dedicated to the definition of boolean operation, the object algebra interface BoolExpAlg (the type definition might be hard to understand and will be detail in the next section).\n\ntrait BoolExpAlg[A, E <: A] {\n  def trueE(): E\n  def falseE(): E\n  def and(left: E, right: E): E\n  def or(left: E, right: E): E\n  def not(exp: E): E\n  def equal[F1 <: A, F2 <: A](left: F1, right: F2)(implicit ev: F1 =:= F2): E\n}\n\n\nWe are now able to define the corresponding object algebras for boolean interpretation and pretty printing.\n\nBut first we are going to update the definition of the Eval trait and add a parametrized type.\n\ntrait Eval[X] {\n\tdef eval(): X\n}\n\n\nBy doing so we allow the object algebras of integer and boolean to share a common type.\n\nNow that it done, here is the code of the object algebras.\n\ntrait EvalBoolExpAlg extends BoolExpAlg[Eval[_], Eval[Boolean]] {\n  override def falseE(): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = false\n  }\n\n  override def trueE(): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = true\n  }\n\n  override def and(left: Eval[Boolean], right: Eval[Boolean]) = new Eval[Boolean] {\n    override def eval(): Boolean = left.eval() && right.eval()\n  }\n\n  override def equal[F1 <: Eval[_], F2 <: Eval[_]](left: F1, right: F2)(implicit ev: =:=[F1, F2]): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = left.eval() == right.eval()\n  }\n\n  override def not(exp: Eval[Boolean]): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = !exp.eval()\n  }\n\n  override def or(left: Eval[Boolean], right: Eval[Boolean]): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = left.eval() || right.eval()\n  }\n}\n\ntrait BoolExpAlg[A, E <: A] {\n  def trueE(): E\n    def falseE(): E\n    def and(left: E, right: E): E\n    def or(left: E, right: E): E\n    def not(exp: E): E\n    def equal[F1 <: A, F2 <: A](left: F1, right: F2)(implicit ev: F1 =:= F2): E\n}\n\n\nFor now we have a new language dedicated to the definition and interpretation of boolean expressions, completely decouple from our previous languages definitions.\n\nAn example of program in this language :\n\ndef program3[F, E <: F](alg: BoolExpAlg[F, E]): E = {\n  import alg._\n  equal(trueE(), falseE())\n}\n\nval printB: PrintExpBoolAlg with Object = new PrintExpBoolAlg() {}\nval evalB: EvalBoolExpAlg with Object = new EvalBoolExpAlg() {}\nprintln(s\"\"\"${program3(printB).print()} ---> ${program3(evalB).eval()}\"\"\")\n// (true == false) ---> false\n\n\nLanguage composition\n\nWe are now at a point where we can ask ourselves, can I mix easily my integer language with my boolean ?\n\nI hope that the following program will proves you that the answer is yes !\n\ndef program4[F, E <: F, G <: F](alg: BoolExpAlg[F, E] with SubExpAlg[G]): E = {\n  import alg._\n  equal(lit(1), sub(lit(2), lit(1)))\n}\n\nval printIB: PrintExpBoolAlg with PrintExpAlg with Object = new PrintExpBoolAlg() with PrintExpAlg {}\nval evalIB: EvalBoolExpAlg with EvalSubExpAlg with Object = new EvalBoolExpAlg() with EvalSubExpAlg {}\nprintln(s\"\"\"${program4(printIB).print()} ---> ${program4(evalIB).eval()}\"\"\")\n// (1 == 2 - 1) ---> true\n\n\nOnly by reusing the previously defined definitions and using traits compositions. We have defined a language supporting the evaluation of integer expressions, boolean expression and especially the evaluation of the equality of two integer using a boolean operator !\n\nMore details about the equality.\n\nI wanted the equal operation of be type-safe. In other words in did not want the equal operation to be able to compare apple and bananas (or integer and boolean).\n\ndef program4[F, E <: F, G <: F](alg: BoolExpAlg[F, E] with SubExpAlg[G]): E = {\n  import alg._\n  val p1 = equal(trueE(), lit(1)) // does not compile !\n}\n\n\nBut in the other hand I wanted my equal operation to be extensible. Any new language with comparable elements must be able to reuse this operation easily.\n\nTo meet those two objectives the following pieces of code have been needed.\n\n// object algebra interface :\ntrait BoolExpAlg[A, E <: A] { // knowing a type A, E is a subtype of A\n  // [...]\n\n  // knowing a type A, F1 and F2 are both subtype of A\n  // the implicit enforce the type equality of F1 and F2 si both F1 and F2 are different subtypes of A, the scala refuses to compile.\n  def equal[F1 <: A, F2 <: A](left: F1, right: F2)(implicit ev: F1 =:= F2): E\n}\n\n// Eval[_] defines that anything \"evaluable\" is accepted in the equal method.\n// Eval[Bool] defines the type of the object algebra itself.\ntrait EvalBoolExpAlg extends BoolExpAlg[Eval[_], Eval[Boolean]] {\n\n  // the signature of the equal method, derived from the previous type definition\n  override def equal[F1 <: Eval[_], F2 <: Eval[_]](left: F1, right: F2)(implicit ev: =:=[F1, F2]): Eval[Boolean] = new Eval[Boolean] {\n    override def eval(): Boolean = left.eval() == right.eval()\n  }\n\n  }\n\n\nConclusion\n\nFor now my opinion of object algebras is optimistic and even if the development of more complex DSL might lead to unexpected issues, the implementation of this small example have been surprisingly easy.\n\nWe can still observe that in order to add more flexibility we had to edit once a previously defined code. This is not mandatory and more verbose solution might be envisioned to do the same thing without touching any previously defined source code.\n\nAlso finding out a working definition of BoolExpAlg was not straightforward (but I am not an experienced Scala developer !).\n\nThe full code of the snippets found in the article can be found here : https://gist.github.com/manuelleduc/2607f15407017daf0d6ae9a987ece243\n\nI hope this article gave you a first insight of the advantages and limitations of this approach of DSL definition and reuse.\n\nGood reads\n\nI have been introduced to the concept of object algebras by this awesome talk :  “Using Object Algebras To Design Embedded Domain Specific Languages” by Julien Richard-Foy at Curry On’16.","id":"https://mleduc.xyz/scala/object/2016/10/20/object-algebra-composition","isoDate":"2016-10-20T12:21:33.000Z"},{"title":"Quelques règles pour l’installation des portables","link":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2020/09/08/Operation_portable_M2_ISTIC.html","pubDate":"2020-09-07T22:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<h3 id=\"etape-0-install-os\">Etape 0: Install OS</h3>\n\n<p>Pour l’install des portables, tout marche très bien avec ubuntu 20.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez <a href=\"http://www.ubuntu.com/download/desktop\">Ubuntu Desktop 20.04 en version 64bit et Desktop</a>. Créez votre clé ucb avec par exemple <a href=\"http://unetbootin.sourceforge.net/\">unetbootin</a>. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)</p>\n\n<!--more-->\n\n<p>Au démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.</p>\n\n<p>Si certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement <a href=\"https://istic.univ-rennes1.fr/intranet/accord-microsoft\">MSDN AA</a> qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .</p>\n\n<p>Il est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.</p>\n\n<p>Sous ubuntu, quand il est installé.</p>\n\n<h3 id=\"etape-1-java-et-autres\">Etape 1: Java et autres</h3>\n\n<p>Installez les paquets suviants:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>nano git openjdk-11-jdk openjdk-11-doc maven inkscape</code></pre></figure>\n\n<h3 id=\"etape-2-eclipse\">Etape 2: Eclipse</h3>\n\n<p>Téléchargez eclipse pour <a href=\"https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2020-06/R/eclipse-java-2020-06-R-linux-gtk-x86_64.tar.gz\">Java developer</a> en version 64 et dezipper le par exemple dans /opt/eclipse</p>\n\n<h3 id=\"etape-3-smartgit\">Etape 3: Smartgit</h3>\n\n<p>Installez <a href=\"http://www.syntevo.com/smartgit/\">Smartgit</a></p>\n\n<h3 id=\"etape-4-nodejs\">Etape 4: NodeJS</h3>\n\n<p>Installez nodejs au travers de nvm</p>\n\n<p>Installer nvm (node version manager)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">curl <span class=\"nt\">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</code></pre></figure>\n\n<p>The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).</p>\n\n<p>Start a new Terminal</p>\n\n<p>Installez les paquets nodejs.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nvm <span class=\"nb\">install </span>node\n</code></pre></div></div>\n\n<h3 id=\"etape-5-visualvm\">Etape 5: VisualVM</h3>\n\n<p><a href=\"https://visualvm.github.io/\">VisualVM</a></p>\n\n<h3 id=\"etape-6-intelij\">Etape 6: InteliJ</h3>\n\n<p>Installez <a href=\"http://www.jetbrains.com/idea/\">IntelliJ</a> dans /opt</p>\n\n<h3 id=\"etape-7-docker\">Etape 7: Docker</h3>\n\n<p>Installez Docker</p>\n\n<p>Update the apt package index:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install packages to allow apt to use a repository over HTTPS:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"se\">\\</span>\n    apt-transport-https <span class=\"se\">\\</span>\n    ca-certificates <span class=\"se\">\\</span>\n    curl <span class=\"se\">\\</span>\n    software-properties-common\n</code></pre></div></div>\n\n<p>Add Docker’s official GPG key:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class=\"nb\">sudo </span>apt-key add -\n</code></pre></div></div>\n\n<p>Verify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-key fingerprint 0EBFCD88\n</code></pre></div></div>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 2017-02-22\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>add-apt-repository <span class=\"se\">\\</span>\n   <span class=\"s2\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class=\"se\">\\</span><span class=\"s2\">\n   </span><span class=\"si\">$(</span>lsb_release <span class=\"nt\">-cs</span><span class=\"si\">)</span><span class=\"s2\"> </span><span class=\"se\">\\</span><span class=\"s2\">\n   stable\"</span>\n</code></pre></div></div>\n\n<p>INSTALL DOCKER CE</p>\n\n<p>Update the apt package index.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>docker-ce\n</code></pre></div></div>\n\n<p>Pour vérifier que tout est ok</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nv\">$ </span><span class=\"nb\">sudo </span>docker run <span class=\"nt\">-i</span> <span class=\"nt\">-t</span> ubuntu /bin/bash </code></pre></figure>\n<p>Cette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur <a href=\"http://fr.wikipedia.org/wiki/Docker_(Syst%C3%A8me_de_conteneur_Linux)\\\">docker</a></p>\n\n<h3 id=\"etape-8-wifi-istic\">Etape 8: Wifi ISTIC</h3>\n\n<ol>\n  <li>\n    <p>Configuez eduroam suivant le <a href=\"http://www.eduroam.fr/\">tuto suivant</a>.</p>\n  </li>\n  <li>\n    <p>RDV sur <a href=\"http://istic-public.istic.univ-rennes1.fr/\">istic-public</a> pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:</p>\n  </li>\n</ol>\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo</span> /sbin/ifconfig </code></pre></figure>\n<p>prendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.</p>\n\n<h3 id=\"etape-9-utiliser-les-imprimantes-de-listic\">Etape 9 Utiliser les imprimantes de l’ISTIC</h3>\n\n<ul>\n  <li>Vérifiez que cups est installé</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>cups</code></pre></figure>\n\n<ul>\n  <li>éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">ServerName printhost.istic.univ-rennes1.fr</code></pre></figure>\n\n<p>pour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free</p>\n\n<h3 id=\"etape-10-bookmark-services-utiles\">Etape 10: Bookmark services utiles</h3>\n<p><a href=\"http://vm.istic.univ-rennes1.fr\">vm istic</a></p>\n\n<h3 id=\"petit-problème-wifi-et-autres\">Petit Problème: WIFI et autres</h3>\n\n<h4 id=\"wifi-pour-installer-le-wifi-pluggez-vous-à-un-réseau-filaire\">Wifi Pour installer le WIFI. Pluggez vous à un réseau filaire.</h4>\n\n<p>Puis tapez les commandes suivantes</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>firmware-b43-installer\n<span class=\"nb\">sudo </span>modprobe b43\n<span class=\"nb\">sudo </span>modprobe <span class=\"nt\">-r</span> b43\n<span class=\"nb\">sudo </span>modprobe b43</code></pre></figure>\n\n<h4 id=\"certificat-incorrect-pour-openjdk-poblème-maven\">Certificat incorrect pour OpenJDK (poblème Maven)</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo </span>update-ca-certificates </code></pre></figure>\n\n<h4 id=\"problème-acpi-pc-qui-ne-séteint-pas\">Problème ACPI (PC qui ne s’éteint pas)</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>nano <span class=\"nt\">-w</span> /boot/grub/menu.cfg\n<span class=\"c\">#Puis enlever tous les paramères, noacpi, noapic ...</span></code></pre></figure>","contentSnippet":"Hello très chers étudiants,\n\nEtape 0: Install OS\n\nPour l’install des portables, tout marche très bien avec ubuntu 20.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez Ubuntu Desktop 20.04 en version 64bit et Desktop. Créez votre clé ucb avec par exemple unetbootin. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)\n\n\n\nAu démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.\n\nSi certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement MSDN AA qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .\n\nIl est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.\n\nSous ubuntu, quand il est installé.\n\nEtape 1: Java et autres\n\nInstallez les paquets suviants:\n\nsudo apt-get install nano git openjdk-11-jdk openjdk-11-doc maven inkscape\n\nEtape 2: Eclipse\n\nTéléchargez eclipse pour Java developer en version 64 et dezipper le par exemple dans /opt/eclipse\n\nEtape 3: Smartgit\n\nInstallez Smartgit\n\nEtape 4: NodeJS\n\nInstallez nodejs au travers de nvm\n\nInstaller nvm (node version manager)\n\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\n\nThe script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).\n\nStart a new Terminal\n\nInstallez les paquets nodejs.\n\nnvm install node\n\n\nEtape 5: VisualVM\n\nVisualVM\n\nEtape 6: InteliJ\n\nInstallez IntelliJ dans /opt\n\nEtape 7: Docker\n\nInstallez Docker\n\nUpdate the apt package index:\n\nsudo apt-get update\n\n\nInstall packages to allow apt to use a repository over HTTPS:\n\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n\n\nAdd Docker’s official GPG key:\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\nVerify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.\n\nsudo apt-key fingerprint 0EBFCD88\n\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n\nINSTALL DOCKER CE\n\nUpdate the apt package index.\n\nsudo apt-get update\n\n\nInstall the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.\n\nsudo apt-get install docker-ce\n\n\nPour vérifier que tout est ok\n\n $ sudo docker run -i -t ubuntu /bin/bash \nCette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur docker\n\nEtape 8: Wifi ISTIC\n\n\n  \n    Configuez eduroam suivant le tuto suivant.\n  \n  \n    RDV sur istic-public pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:\n  \n\n sudo /sbin/ifconfig \nprendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.\n\nEtape 9 Utiliser les imprimantes de l’ISTIC\n\n\n  Vérifiez que cups est installé\n\n\nsudo apt-get update\nsudo apt-get install cups\n\n\n  éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante\n\n\nServerName printhost.istic.univ-rennes1.fr\n\npour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free\n\nEtape 10: Bookmark services utiles\nvm istic\n\nPetit Problème: WIFI et autres\n\nWifi Pour installer le WIFI. Pluggez vous à un réseau filaire.\n\nPuis tapez les commandes suivantes\n\nsudo apt-get update\nsudo apt-get install firmware-b43-installer\nsudo modprobe b43\nsudo modprobe -r b43\nsudo modprobe b43\n\nCertificat incorrect pour OpenJDK (poblème Maven)\n\n sudo update-ca-certificates \n\nProblème ACPI (PC qui ne s’éteint pas)\n\nsudo nano -w /boot/grub/menu.cfg\n#Puis enlever tous les paramères, noacpi, noapic ...","id":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2020/09/08/Operation_portable_M2_ISTIC","isoDate":"2020-09-07T22:00:00.000Z"},{"title":"Quelques éléments pour le TP sur Docker à l’ESIR","link":"http://olivier.barais.fr/blog/posts/teaching/esir/mdi/french/2019/04/08/TPDocker.html","pubDate":"2019-04-07T22:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<p>Le but de ce TP est de regarder comment nous pouvons utiliser docker pour faciliter le déploiement d’une application avec la mise en place d’un serveur web en reverse proxy etc…</p>\n\n<!--more-->\n\n<h3 id=\"etape--1-docker\">Etape -1: Docker###</h3>\n\n<p>Si vous utilisez une machine perso, installez docker (voir <a href=\"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/10/Operation_portable_M2_ISTIC.html\">ici</a>)</p>\n\n<h3 id=\"etape-0-test-de-votre-installation\">Etape 0: Test de votre installation</h3>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run hello-world\n</code></pre></div></div>\n\n<p>Vous devriez avoir le message suivant.</p>\n\n<hr />\n\n<p>Hello from Docker.\nThis message shows that your installation appears to be working correctly.</p>\n\n<p>To generate this message, Docker took the following steps:</p>\n<ol>\n  <li>The Docker client contacted the Docker daemon.</li>\n  <li>The Docker daemon pulled the “hello-world” image from the Docker Hub.</li>\n  <li>The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.</li>\n  <li>The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.</li>\n</ol>\n\n<p>To try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash</p>\n\n<p>Share images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com</p>\n\n<p>For more examples and ideas, visit:\n https://docs.docker.com/userguide/</p>\n\n<hr />\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-t</span> <span class=\"nt\">-i</span> ubuntu /bin/bash\n</code></pre></div></div>\n\n<p>Vous récupérez un shell qui est différent de votre propre distribution.</p>\n\n<p>Tapez la commande</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt-get update\napt-get <span class=\"nb\">install </span>net-tools\n/sbin/ifconfig\n</code></pre></div></div>\n\n<p>Vous constatez que l’interface réseau n’est pas la même dans le container et dans la machine hote.</p>\n\n<p>Le container vient avec sa propre interface réseau.</p>\n\n<h3 id=\"etape-1-jouons-avec-docker-mise-en-place-dun-load-balancer-et-dun-reverse-proxy-avec-docker-et-nginx\">Etape 1: Jouons avec docker: mise en place d’un load balancer et d’un reverse proxy avec docker et nginx</h3>\n\n<p>Pour le nginx en resolproxy nous allons partir de l’image <a href=\"https://github.com/jwilder/nginx-proxy\">suivante</a></p>\n\n<p>L’explication du fonctionnement est disponible <a href=\"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/\">ici</a>.</p>\n\n<p>Lancement de nginx en resolvproxy</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 8080:80 <span class=\"nt\">-v</span> /var/run/docker.sock:/tmp/docker.sock <span class=\"nt\">-t</span> jwilder/nginx-proxy \n</code></pre></div></div>\n\n<p>Dans le suite nous allons utiliser terminator pour visualiser les effets du load-balancing.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt-get <span class=\"nb\">install </span>terminator\n</code></pre></div></div>\n\n<p>Lancez Terminator en root.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>terminator\n</code></pre></div></div>\n\n<p>modifiez votre fichier /etc/hosts pour faire correspondre myapp.taa.fr vers 127.0.0.1. Ce serait à faire sur votre gestionnaire de nom de domaine en temps normal.</p>\n\n<p>Vous devez avoir une ligne qui ressemble à cela.</p>\n\n<pre><code class=\"language-txt\">127.0.0.1\tlocalhost localhost.localdomain localhost4 localhost4.localdomain myapp.mdi.fr\n</code></pre>\n\n<p>Puis créer n fenètre dans votre navigateur terminator (clic droit puis split horizontal ou vertical). \nDans ces terminales, lancez la commande suivante pour tester votre resolve proxy.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-e</span> <span class=\"nv\">VIRTUAL_HOST</span><span class=\"o\">=</span>myapp.mdi.fr <span class=\"nt\">-t</span> <span class=\"nt\">-i</span>  nginx\n</code></pre></div></div>\n\n<p>En tapant la commande suivante, vous pouvez regarder le fichier de configuration nginx qui sera généré à l’adresse suivante /etc/nginx/conf.d/default.conf. (N’oubliez pas de remplacer  865c1e67a00e par l’id de votre nginx en resolve proxy ($docker ps) pour récupérer la liste des containers en cours d’exécution.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> 865c1e67a00e bash\n</code></pre></div></div>\n\n<ul>\n  <li><a href=\"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/\">source</a></li>\n</ul>\n\n<p>Tuez tous les dockers nginx démarrer.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker ps <span class=\"c\">#pour avoir la liste</span>\ndocker <span class=\"nb\">kill</span> <span class=\"s2\">\"IDDOCKER\"</span> <span class=\"c\">#pour tuer un docker. </span>\n</code></pre></div></div>\n\n<h3 id=\"etape-2-utilisation-de-docker-compose\">Etape 2: Utilisation de docker compose</h3>\n<p>Utilisez docker compose pour déployer votre vos 4 services nginx et votre loadbalancer.</p>\n\n<p><a href=\"https://docs.docker.com/get-started/part3/\">tutoriel</a></p>\n\n<h3 id=\"etape-3-dockeriser-une-application-existante\">Etape 3: Dockeriser une application existante</h3>\n\n<p>Nous souhaitons partir d’une application Web de détection de visage.</p>\n\n<p>https://github.com/barais/ESIRTPDockerSampleApp</p>\n\n<p>Construisez le fichier docker file permettant de créer l’image docker pour cette application.</p>\n\n<p>Vous aurez besoin de construire open cv depuis les src (principalement depuis la version 3.4)</p>\n\n<p>https://github.com/opencv/opencv</p>\n\n<p>Tester le lancement de cette image.</p>\n\n<p>Vous pourrez utiliser cette documentation pour la compilation d’opencv sur ubuntu.</p>\n\n<p>https://advancedweb.hu/2016/03/01/opencv_ubuntu/</p>\n\n<p>N’oubliez pas d’installer ant au sein de votre image docker ainsi que la jvm et maven.</p>\n\n<p>Nous souhaitons faire en sorte de fournir une image docker finale la plus petite possible.</p>\n\n<p>Fournissez donc deux fichiers docker file, un premier pour construire l’image qui permet de compiler opencv et compiler votre application. Un deuxième qui permet de construire l’image minimale pour votre application.</p>\n\n<h3 id=\"etape-4-dockeriser-une-application-existante\">Etape 4: Dockeriser une application existante</h3>\n\n<p>Fournir un docker file qui permet de mettre en place une application avec 4 instance de votre serveur Web.</p>\n\n<h3 id=\"etape-5-dockeriser-une-application-existante\">Etape 5: Dockeriser une application existante</h3>\n\n<p>En utilisant <a href=\"https://labs.play-with-k8s.com/\">https://labs.play-with-k8s.com/</a>, déployer votre service à l’aide de kubernetes.</p>","contentSnippet":"Hello très chers étudiants,\n\nLe but de ce TP est de regarder comment nous pouvons utiliser docker pour faciliter le déploiement d’une application avec la mise en place d’un serveur web en reverse proxy etc…\n\n\n\nEtape -1: Docker###\n\nSi vous utilisez une machine perso, installez docker (voir ici)\n\nEtape 0: Test de votre installation\n\ndocker run hello-world\n\n\nVous devriez avoir le message suivant.\n\n\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n\n  The Docker client contacted the Docker daemon.\n  The Docker daemon pulled the “hello-world” image from the Docker Hub.\n  The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.\n  The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.\n\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n\n\n\ndocker run -t -i ubuntu /bin/bash\n\n\nVous récupérez un shell qui est différent de votre propre distribution.\n\nTapez la commande\n\napt-get update\napt-get install net-tools\n/sbin/ifconfig\n\n\nVous constatez que l’interface réseau n’est pas la même dans le container et dans la machine hote.\n\nLe container vient avec sa propre interface réseau.\n\nEtape 1: Jouons avec docker: mise en place d’un load balancer et d’un reverse proxy avec docker et nginx\n\nPour le nginx en resolproxy nous allons partir de l’image suivante\n\nL’explication du fonctionnement est disponible ici.\n\nLancement de nginx en resolvproxy\n\ndocker run -d -p 8080:80 -v /var/run/docker.sock:/tmp/docker.sock -t jwilder/nginx-proxy \n\n\nDans le suite nous allons utiliser terminator pour visualiser les effets du load-balancing.\n\napt-get install terminator\n\n\nLancez Terminator en root.\n\nsudo terminator\n\n\nmodifiez votre fichier /etc/hosts pour faire correspondre myapp.taa.fr vers 127.0.0.1. Ce serait à faire sur votre gestionnaire de nom de domaine en temps normal.\n\nVous devez avoir une ligne qui ressemble à cela.\n\n127.0.0.1\tlocalhost localhost.localdomain localhost4 localhost4.localdomain myapp.mdi.fr\n\n\nPuis créer n fenètre dans votre navigateur terminator (clic droit puis split horizontal ou vertical). \nDans ces terminales, lancez la commande suivante pour tester votre resolve proxy.\n\ndocker run -e VIRTUAL_HOST=myapp.mdi.fr -t -i  nginx\n\n\nEn tapant la commande suivante, vous pouvez regarder le fichier de configuration nginx qui sera généré à l’adresse suivante /etc/nginx/conf.d/default.conf. (N’oubliez pas de remplacer  865c1e67a00e par l’id de votre nginx en resolve proxy ($docker ps) pour récupérer la liste des containers en cours d’exécution.\n\ndocker exec -it 865c1e67a00e bash\n\n\n\n  source\n\n\nTuez tous les dockers nginx démarrer.\n\ndocker ps #pour avoir la liste\ndocker kill \"IDDOCKER\" #pour tuer un docker. \n\n\nEtape 2: Utilisation de docker compose\nUtilisez docker compose pour déployer votre vos 4 services nginx et votre loadbalancer.\n\ntutoriel\n\nEtape 3: Dockeriser une application existante\n\nNous souhaitons partir d’une application Web de détection de visage.\n\nhttps://github.com/barais/ESIRTPDockerSampleApp\n\nConstruisez le fichier docker file permettant de créer l’image docker pour cette application.\n\nVous aurez besoin de construire open cv depuis les src (principalement depuis la version 3.4)\n\nhttps://github.com/opencv/opencv\n\nTester le lancement de cette image.\n\nVous pourrez utiliser cette documentation pour la compilation d’opencv sur ubuntu.\n\nhttps://advancedweb.hu/2016/03/01/opencv_ubuntu/\n\nN’oubliez pas d’installer ant au sein de votre image docker ainsi que la jvm et maven.\n\nNous souhaitons faire en sorte de fournir une image docker finale la plus petite possible.\n\nFournissez donc deux fichiers docker file, un premier pour construire l’image qui permet de compiler opencv et compiler votre application. Un deuxième qui permet de construire l’image minimale pour votre application.\n\nEtape 4: Dockeriser une application existante\n\nFournir un docker file qui permet de mettre en place une application avec 4 instance de votre serveur Web.\n\nEtape 5: Dockeriser une application existante\n\nEn utilisant https://labs.play-with-k8s.com/, déployer votre service à l’aide de kubernetes.","id":"http://olivier.barais.fr/blog/posts/teaching/esir/mdi/french/2019/04/08/TPDocker","isoDate":"2019-04-07T22:00:00.000Z"},{"title":"Xtext language au sein de jupyterlab","link":"http://olivier.barais.fr/blog/posts/teaching/2018/11/15/XtextOnJupyterLab.html","pubDate":"2018-11-14T23:00:00.000Z","author":"Olivier Barais","content":"<p>Aujourd’hui, petit tuto pour regarder comment intégrer tout langage construit à l’aide d’Xtext au sein d’une application Web ou plus précisément au sein de Jupyterlab.</p>\n\n<p>Le tuto se déroulera en 4 étapes</p>\n\n<ol>\n  <li>Comment faire en sorte que votre langage construit à l’aide d’Xtext fournisse l’interface LSP</li>\n  <li>Comment faire en sorte que cette interface soit accessible depuis des WebSockets</li>\n  <li>Comment intégrer ce langage dans vscode</li>\n  <li>Comment intégrer un éditeur Web monaco dans une interface Web comme client de cette interface LSP</li>\n  <li>Comment intégrer remplacer l’éditeur de JupyterLab avec monaco.</li>\n</ol>\n\n<p>## Etape 1:  Comment faire en sorte que votre langage construit à l’aide d’Xtext fournisse l’interface LSP</p>\n\n<p>Construire un langage à l’aide d’Xtext est assez simple. Je vous laisse allez voire des <a href=\"http://www.eclipse.org/Xtext/documentation/201_sevenlang_introduction.html\">tutos</a> comme celui-ci pour une introduction à XText.</p>\n\n<p>Le choix d’un support de LSP se fait au moment de l’initialisation du projet.</p>","contentSnippet":"Aujourd’hui, petit tuto pour regarder comment intégrer tout langage construit à l’aide d’Xtext au sein d’une application Web ou plus précisément au sein de Jupyterlab.\n\nLe tuto se déroulera en 4 étapes\n\n\n  Comment faire en sorte que votre langage construit à l’aide d’Xtext fournisse l’interface LSP\n  Comment faire en sorte que cette interface soit accessible depuis des WebSockets\n  Comment intégrer ce langage dans vscode\n  Comment intégrer un éditeur Web monaco dans une interface Web comme client de cette interface LSP\n  Comment intégrer remplacer l’éditeur de JupyterLab avec monaco.\n\n\n## Etape 1:  Comment faire en sorte que votre langage construit à l’aide d’Xtext fournisse l’interface LSP\n\nConstruire un langage à l’aide d’Xtext est assez simple. Je vous laisse allez voire des tutos comme celui-ci pour une introduction à XText.\n\nLe choix d’un support de LSP se fait au moment de l’initialisation du projet.","id":"http://olivier.barais.fr/blog/posts/teaching/2018/11/15/XtextOnJupyterLab","isoDate":"2018-11-14T23:00:00.000Z"},{"title":"Quelques éléments pour le TP sur Docker","link":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/19/TPDocker.html","pubDate":"2018-09-18T22:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<p>Le but de ce TP est de regarder comment nous pouvons utiliser docker pour faciliter le déploiement d’une application avec la mise en place d’un serveur web en reverse proxy etc…</p>\n\n<!--more-->\n\n<h3 id=\"etape--1-docker\">Etape -1: Docker###</h3>\n\n<p>Installez docker (voir <a href=\"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/10/Operation_portable_M2_ISTIC.html\">ici</a>)</p>\n\n<h3 id=\"etape-0-test-de-votre-installation\">Etape 0: Test de votre installation</h3>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run hello-world\n</code></pre></div></div>\n\n<p>Vous devriez avoir le message suivant.</p>\n\n<hr />\n\n<p>Hello from Docker.\nThis message shows that your installation appears to be working correctly.</p>\n\n<p>To generate this message, Docker took the following steps:</p>\n<ol>\n  <li>The Docker client contacted the Docker daemon.</li>\n  <li>The Docker daemon pulled the “hello-world” image from the Docker Hub.</li>\n  <li>The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.</li>\n  <li>The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.</li>\n</ol>\n\n<p>To try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash</p>\n\n<p>Share images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com</p>\n\n<p>For more examples and ideas, visit:\n https://docs.docker.com/userguide/</p>\n\n<hr />\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-t</span> <span class=\"nt\">-i</span> ubuntu /bin/bash\n</code></pre></div></div>\n\n<p>Vous récupérez un shell qui est différent de votre propre distribution.</p>\n\n<p>Tapez la commande</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/sbin/ifconfig\n</code></pre></div></div>\n\n<p>Vous constatez que l’interface réseau n’est pas la même dans le container et dans la machine hote.</p>\n\n<p>Le container vient avec sa propre interface réseau.</p>\n\n<h3 id=\"etape-1-construction-dune-image-pour-votre-application\">Etape 1: Construction d’une image pour votre application</h3>\n\n<p>En suivant le tutoriel <a href=\"https://docs.docker.com/get-started/part2/#build-the-app\">suivant</a>:</p>\n\n<p>Vous pourrez partir de cette image de base. \n[https://hub.docker.com/<em>/maven/](https://hub.docker.com/</em>/maven/)</p>\n\n<p>Parcourez rapidement les tutoriels suivants:</p>\n\n<ul>\n  <li><a href=\"https://docs.docker.com/get-started/part2/#build-the-app\">https://docs.docker.com/get-started/part2/#build-the-app</a></li>\n</ul>\n\n<h3 id=\"etape-2-mise-en-place-de-la-base-de-données\">Etape 2: Mise en place de la base de données</h3>\n<p>Lancez votre base de données en aprtant de l’image suivante</p>\n\n<p>[https://hub.docker.com/<em>/mysql/](https://hub.docker.com/</em>/mysql/)</p>\n\n<p>Utilisez les links docker pour faire le lien entre votre base de données et votre serveur d’application. \n<a href=\"https://docs.docker.com/userguide/dockerlinks/\">https://docs.docker.com/userguide/dockerlinks/</a></p>\n\n<p>Lancez votre application et vérifiez que tout marche.</p>\n\n<h3 id=\"etape-3-mise-en-place-dun-load-balancer-et-dun-reverse-proxy-avec-docker-et-nginx\">Etape 3: Mise en place d’un load balancer et d’un reverse proxy avec docker et nginx</h3>\n\n<p>Pour le nginx en resolproxy nous allons partir de l’image <a href=\"https://github.com/jwilder/nginx-proxy\">suivante</a></p>\n\n<p>L’explication du fonctionnement est disponible <a href=\"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/\">ici</a>.</p>\n\n<p>Lancement de nginx en resolvproxy</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-d</span> <span class=\"nt\">-p</span> 8080:80 <span class=\"nt\">-v</span> /var/run/docker.sock:/tmp/docker.sock <span class=\"nt\">-t</span> jwilder/nginx-proxy \n</code></pre></div></div>\n\n<p>Dans le suite nous allons utiliser terminator pour visualiser les effets du load-balancing.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt-get <span class=\"nb\">install </span>terminator\n</code></pre></div></div>\n\n<p>Lancez Terminator en root.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>terminator\n</code></pre></div></div>\n\n<p>modifiez votre fichier /etc/hosts pour faire correspondre myapp.taa.fr vers 127.0.0.1. Ce serait à faire sur votre gestionnaire de nom de domaine en temps normal.</p>\n\n<p>Vous devez avoir une ligne qui ressemble à cela.</p>\n\n<pre><code class=\"language-txt\">127.0.0.1\tlocalhost localhost.localdomain localhost4 localhost4.localdomain head-demo myapp.taa.fr\n</code></pre>\n\n<p>Puis créer n fenètre dans votre navigateur terminator (clic droit puis split horizontal ou vertical). \nDans ces terminales, lancez la commande suivante pour tester votre resolve proxy.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker run <span class=\"nt\">-e</span> <span class=\"nv\">VIRTUAL_HOST</span><span class=\"o\">=</span>myapp.taa.fr <span class=\"nt\">-t</span> <span class=\"nt\">-i</span>  nginx\n</code></pre></div></div>\n\n<p>En tapant la commande suivante, vous pouvez regarder le fichier de configuration nginx qui sera généré à l’adresse suivante /etc/nginx/conf.d/default.conf. (N’oubliez pas de remplacer  865c1e67a00e par l’id de votre nginx en resolve proxy ($docker ps) pour récupérer la liste des containers en cours d’exécution.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker <span class=\"nb\">exec</span> <span class=\"nt\">-it</span> 865c1e67a00e bash\n</code></pre></div></div>\n\n<ul>\n  <li><a href=\"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/\">source</a></li>\n</ul>\n\n<p>Tuez tous les dockers nginx démarrer.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>docker ps <span class=\"c\">#pour avoir la liste</span>\ndocker <span class=\"nb\">kill</span> <span class=\"s2\">\"IDDOCKER\"</span> <span class=\"c\">#pour tuer un docker. </span>\n</code></pre></div></div>\n\n<p>Lancez plusieurs fois votre serveur d’application. Testez le résultat.</p>\n\n<h3 id=\"etape-4-utilisation-de-docker-compose\">Etape 4: Utilisation de docker compose</h3>\n<p>Utilisez docker compose pour déployer votre application avec trois serveur d’applications et une instance de base de données.</p>\n\n<p><a href=\"https://docs.docker.com/get-started/part3/\">tutoriel</a></p>\n\n<h3 id=\"etape-5-mise-en-place-dune-base-de-données-distribuée-optionnelle-carambar-provided\">Etape 5: Mise en place d’une base de données distribuée (optionnelle, carambar provided)</h3>\n\n<p>Pour distriber la base de données, nous pouvons utiliser gallera.</p>\n\n<p><a href=\"http://galeracluster.com/2015/05/getting-started-galera-with-docker-part-1/\">tutoriel</a>.</p>\n\n<p>Suivez le tutoriel pour démarer galera.</p>\n\n<p>Mettez à jour votre fichier docker compose en fonction de cela.</p>\n\n<p>TO be extended</p>","contentSnippet":"Hello très chers étudiants,\n\nLe but de ce TP est de regarder comment nous pouvons utiliser docker pour faciliter le déploiement d’une application avec la mise en place d’un serveur web en reverse proxy etc…\n\n\n\nEtape -1: Docker###\n\nInstallez docker (voir ici)\n\nEtape 0: Test de votre installation\n\ndocker run hello-world\n\n\nVous devriez avoir le message suivant.\n\n\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n\n  The Docker client contacted the Docker daemon.\n  The Docker daemon pulled the “hello-world” image from the Docker Hub.\n  The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.\n  The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.\n\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n\n\n\ndocker run -t -i ubuntu /bin/bash\n\n\nVous récupérez un shell qui est différent de votre propre distribution.\n\nTapez la commande\n\n/sbin/ifconfig\n\n\nVous constatez que l’interface réseau n’est pas la même dans le container et dans la machine hote.\n\nLe container vient avec sa propre interface réseau.\n\nEtape 1: Construction d’une image pour votre application\n\nEn suivant le tutoriel suivant:\n\nVous pourrez partir de cette image de base. \n[https://hub.docker.com//maven/](https://hub.docker.com//maven/)\n\nParcourez rapidement les tutoriels suivants:\n\n\n  https://docs.docker.com/get-started/part2/#build-the-app\n\n\nEtape 2: Mise en place de la base de données\nLancez votre base de données en aprtant de l’image suivante\n\n[https://hub.docker.com//mysql/](https://hub.docker.com//mysql/)\n\nUtilisez les links docker pour faire le lien entre votre base de données et votre serveur d’application. \nhttps://docs.docker.com/userguide/dockerlinks/\n\nLancez votre application et vérifiez que tout marche.\n\nEtape 3: Mise en place d’un load balancer et d’un reverse proxy avec docker et nginx\n\nPour le nginx en resolproxy nous allons partir de l’image suivante\n\nL’explication du fonctionnement est disponible ici.\n\nLancement de nginx en resolvproxy\n\ndocker run -d -p 8080:80 -v /var/run/docker.sock:/tmp/docker.sock -t jwilder/nginx-proxy \n\n\nDans le suite nous allons utiliser terminator pour visualiser les effets du load-balancing.\n\napt-get install terminator\n\n\nLancez Terminator en root.\n\nsudo terminator\n\n\nmodifiez votre fichier /etc/hosts pour faire correspondre myapp.taa.fr vers 127.0.0.1. Ce serait à faire sur votre gestionnaire de nom de domaine en temps normal.\n\nVous devez avoir une ligne qui ressemble à cela.\n\n127.0.0.1\tlocalhost localhost.localdomain localhost4 localhost4.localdomain head-demo myapp.taa.fr\n\n\nPuis créer n fenètre dans votre navigateur terminator (clic droit puis split horizontal ou vertical). \nDans ces terminales, lancez la commande suivante pour tester votre resolve proxy.\n\ndocker run -e VIRTUAL_HOST=myapp.taa.fr -t -i  nginx\n\n\nEn tapant la commande suivante, vous pouvez regarder le fichier de configuration nginx qui sera généré à l’adresse suivante /etc/nginx/conf.d/default.conf. (N’oubliez pas de remplacer  865c1e67a00e par l’id de votre nginx en resolve proxy ($docker ps) pour récupérer la liste des containers en cours d’exécution.\n\ndocker exec -it 865c1e67a00e bash\n\n\n\n  source\n\n\nTuez tous les dockers nginx démarrer.\n\ndocker ps #pour avoir la liste\ndocker kill \"IDDOCKER\" #pour tuer un docker. \n\n\nLancez plusieurs fois votre serveur d’application. Testez le résultat.\n\nEtape 4: Utilisation de docker compose\nUtilisez docker compose pour déployer votre application avec trois serveur d’applications et une instance de base de données.\n\ntutoriel\n\nEtape 5: Mise en place d’une base de données distribuée (optionnelle, carambar provided)\n\nPour distriber la base de données, nous pouvons utiliser gallera.\n\ntutoriel.\n\nSuivez le tutoriel pour démarer galera.\n\nMettez à jour votre fichier docker compose en fonction de cela.\n\nTO be extended","id":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/19/TPDocker","isoDate":"2018-09-18T22:00:00.000Z"},{"title":"Quelques règles pour l’installation des portables","link":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/10/Operation_portable_M2_ISTIC.html","pubDate":"2018-09-09T22:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<p>Pour la cinquième année, nous experimentons l’usage des TPs pour les M2. Nous sommes partis sur les configurations suivantes<a href=\"http://www8.hp.com/fr/fr/products/laptops/product-detail.html?oid=5405400#!tab=specs\">Probook 650 avec 8GO de Ram et un I3</a></p>\n\n<h3 id=\"etape-0-install-os\">Etape 0: Install OS###</h3>\n\n<p>Pour l’install, tout marche très bien avec ubuntu 18.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez <a href=\"http://www.ubuntu.com/download/desktop\">Ubuntu Desktop 18.04 en version 64bit et Desktop</a>. Créez votre clé ucb avec par exemple <a href=\"http://unetbootin.sourceforge.net/\">unetbootin</a>. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)</p>\n\n<!--more-->\n\n<p>Au démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.</p>\n\n<p>Si certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement <a href=\"https://www.google.fr/search?q=msdn+aa+istic&amp;oq=msdn+aa+istic&amp;aqs=chrome..69i57.6842j0j7&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8\">MSDN AA</a> qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .</p>\n\n<p>Il est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.</p>\n\n<p>Sous ubuntu, quand il est installé.</p>\n\n<h3 id=\"etape-1-java-et-autres\">Etape 1: Java et autres</h3>\n\n<p>Installez les paquets suviants:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>nano git openjdk-8-jdk openjdk-8-doc maven inkscape</code></pre></figure>\n\n<p>Installer aussi la JDK Oracle pour GLI</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>add-apt-repository ppa:webupd8team/java\n<span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>oracle-java8-installer</code></pre></figure>\n\n<h3 id=\"etape-2-eclipse\">Etape 2: Eclipse</h3>\n\n<p>Téléchargez eclipse pour <a href=\"http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz\">Java developer</a> en version 64 et dezipper le par exemple dans /opt/eclipse</p>\n\n<h3 id=\"etape-3-smartgit\">Etape 3: Smartgit</h3>\n\n<p>Installez <a href=\"http://www.syntevo.com/smartgit/\">Smartgit</a></p>\n\n<h3 id=\"etape-4-nodejs\">Etape 4: NodeJS</h3>\n\n<p>Installez nodejs au travers de nvm</p>\n\n<p>Installer nvm (node version manager)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">curl <span class=\"nt\">-o-</span> https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash</code></pre></figure>\n\n<p>The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).</p>\n\n<p>Start a new Terminal</p>\n\n<p>Installez les paquets nodejs.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nvm <span class=\"nb\">install </span>node\n</code></pre></div></div>\n\n<h3 id=\"etape-5-visualvm\">Etape 5: VisualVM</h3>\n\n<p><a href=\"http://visualvm.java.net/eclipse-launcher.html\">VisualVM</a></p>\n\n<h3 id=\"etape-6-intelij\">Etape 6: InteliJ</h3>\n\n<p>Installez <a href=\"http://www.jetbrains.com/idea/\">IntelliJ</a> dans /opt</p>\n\n<h3 id=\"etape-7-docker\">Etape 7: Docker</h3>\n\n<p>Installez Docker</p>\n\n<p>Update the apt package index:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install packages to allow apt to use a repository over HTTPS:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"se\">\\</span>\n    apt-transport-https <span class=\"se\">\\</span>\n    ca-certificates <span class=\"se\">\\</span>\n    curl <span class=\"se\">\\</span>\n    software-properties-common\n</code></pre></div></div>\n\n<p>Add Docker’s official GPG key:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class=\"nb\">sudo </span>apt-key add -\n</code></pre></div></div>\n\n<p>Verify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-key fingerprint 0EBFCD88\n</code></pre></div></div>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 2017-02-22\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>add-apt-repository <span class=\"se\">\\</span>\n   <span class=\"s2\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class=\"se\">\\</span><span class=\"s2\">\n   </span><span class=\"si\">$(</span>lsb_release <span class=\"nt\">-cs</span><span class=\"si\">)</span><span class=\"s2\"> </span><span class=\"se\">\\</span><span class=\"s2\">\n   stable\"</span>\n</code></pre></div></div>\n\n<p>INSTALL DOCKER CE</p>\n\n<p>Update the apt package index.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>docker-ce\n</code></pre></div></div>\n\n<p>Pour vérifier que tout est ok</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nv\">$ </span><span class=\"nb\">sudo </span>docker run <span class=\"nt\">-i</span> <span class=\"nt\">-t</span> ubuntu /bin/bash </code></pre></figure>\n<p>Cette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur <a href=\"http://fr.wikipedia.org/wiki/Docker_(Syst%C3%A8me_de_conteneur_Linux)\\\">docker</a></p>\n\n<h3 id=\"etape-8-wifi-istic\">Etape 8: Wifi ISTIC</h3>\n\n<ol>\n  <li>\n    <p>Configuez eduroam suivant le <a href=\"http://www.eduroam.fr/conf_supplicants/\">tuto suivant</a>.</p>\n  </li>\n  <li>\n    <p>RDV sur <a href=\"http://istic-public.istic.univ-rennes1.fr/\">istic-public</a> pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:</p>\n  </li>\n</ol>\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo</span> /sbin/ifconfig </code></pre></figure>\n<p>prendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.</p>\n\n<h3 id=\"etape-9-utiliser-les-imprimantes-de-listic\">Etape 9 Utiliser les imprimantes de l’ISTIC</h3>\n\n<ul>\n  <li>Vérifiez que cups est installé</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>cups</code></pre></figure>\n\n<ul>\n  <li>éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">ServerName printhost.istic.univ-rennes1.fr</code></pre></figure>\n\n<p>pour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free</p>\n\n<h3 id=\"etape-10-bookmark-services-utiles\">Etape 10: Bookmark services utiles</h3>\n<p><a href=\"http://vm.istic.univ-rennes1.fr\">vm istic</a></p>\n\n<h3 id=\"petit-problème-wifi-et-autres\">Petit Problème: WIFI et autres</h3>\n\n<h4 id=\"wifi-pour-installer-le-wifi-pluggez-vous-à-un-réseau-filaire\">Wifi Pour installer le WIFI. Pluggez vous à un réseau filaire.</h4>\n\n<p>Puis tapez les commandes suivantes</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>firmware-b43-installer\n<span class=\"nb\">sudo </span>modprobe b43\n<span class=\"nb\">sudo </span>modprobe <span class=\"nt\">-r</span> b43\n<span class=\"nb\">sudo </span>modprobe b43</code></pre></figure>\n\n<h4 id=\"certificat-incorrect-pour-openjdk-poblème-maven\">Certificat incorrect pour OpenJDK (poblème Maven)</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo </span>update-ca-certificates </code></pre></figure>\n\n<h4 id=\"problème-acpi-pc-qui-ne-séteint-pas\">Problème ACPI (PC qui ne s’éteint pas)</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>nano <span class=\"nt\">-w</span> /boot/grub/menu.cfg\n<span class=\"c\">#Puis enlever tous les paramères, noacpi, noapic ...</span></code></pre></figure>","contentSnippet":"Hello très chers étudiants,\n\nPour la cinquième année, nous experimentons l’usage des TPs pour les M2. Nous sommes partis sur les configurations suivantesProbook 650 avec 8GO de Ram et un I3\n\nEtape 0: Install OS###\n\nPour l’install, tout marche très bien avec ubuntu 18.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez Ubuntu Desktop 18.04 en version 64bit et Desktop. Créez votre clé ucb avec par exemple unetbootin. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)\n\n\n\nAu démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.\n\nSi certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement MSDN AA qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .\n\nIl est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.\n\nSous ubuntu, quand il est installé.\n\nEtape 1: Java et autres\n\nInstallez les paquets suviants:\n\nsudo apt-get install nano git openjdk-8-jdk openjdk-8-doc maven inkscape\n\nInstaller aussi la JDK Oracle pour GLI\n\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\nEtape 2: Eclipse\n\nTéléchargez eclipse pour Java developer en version 64 et dezipper le par exemple dans /opt/eclipse\n\nEtape 3: Smartgit\n\nInstallez Smartgit\n\nEtape 4: NodeJS\n\nInstallez nodejs au travers de nvm\n\nInstaller nvm (node version manager)\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash\n\nThe script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).\n\nStart a new Terminal\n\nInstallez les paquets nodejs.\n\nnvm install node\n\n\nEtape 5: VisualVM\n\nVisualVM\n\nEtape 6: InteliJ\n\nInstallez IntelliJ dans /opt\n\nEtape 7: Docker\n\nInstallez Docker\n\nUpdate the apt package index:\n\nsudo apt-get update\n\n\nInstall packages to allow apt to use a repository over HTTPS:\n\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n\n\nAdd Docker’s official GPG key:\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\nVerify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.\n\nsudo apt-key fingerprint 0EBFCD88\n\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n\nINSTALL DOCKER CE\n\nUpdate the apt package index.\n\nsudo apt-get update\n\n\nInstall the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.\n\nsudo apt-get install docker-ce\n\n\nPour vérifier que tout est ok\n\n $ sudo docker run -i -t ubuntu /bin/bash \nCette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur docker\n\nEtape 8: Wifi ISTIC\n\n\n  \n    Configuez eduroam suivant le tuto suivant.\n  \n  \n    RDV sur istic-public pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:\n  \n\n sudo /sbin/ifconfig \nprendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.\n\nEtape 9 Utiliser les imprimantes de l’ISTIC\n\n\n  Vérifiez que cups est installé\n\n\nsudo apt-get update\nsudo apt-get install cups\n\n\n  éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante\n\n\nServerName printhost.istic.univ-rennes1.fr\n\npour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free\n\nEtape 10: Bookmark services utiles\nvm istic\n\nPetit Problème: WIFI et autres\n\nWifi Pour installer le WIFI. Pluggez vous à un réseau filaire.\n\nPuis tapez les commandes suivantes\n\nsudo apt-get update\nsudo apt-get install firmware-b43-installer\nsudo modprobe b43\nsudo modprobe -r b43\nsudo modprobe b43\n\nCertificat incorrect pour OpenJDK (poblème Maven)\n\n sudo update-ca-certificates \n\nProblème ACPI (PC qui ne s’éteint pas)\n\nsudo nano -w /boot/grub/menu.cfg\n#Puis enlever tous les paramères, noacpi, noapic ...","id":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2018/09/10/Operation_portable_M2_ISTIC","isoDate":"2018-09-09T22:00:00.000Z"},{"title":"Migrating From Hibernate To EclipseLink On JHipster","link":"http://olivier.barais.fr/blog/posts/jhipster/hibernate/eclipselink/diversity/2018/07/18/MigratingFromHibernateToEclipseLinkOnJHipster.html","pubDate":"2018-07-17T22:00:00.000Z","author":"Olivier Barais","content":"<h2 id=\"working-on-automatic-library-substitution\">Working on automatic library substitution.</h2>\n\n<p>We are currently working with Orange on a software diversification project. In this framework, we study the ability to automatically migrate a project from one dependency to another in order to understand the difficulties in practice. To understand these difficulties, we study a nominal case that should work perfectly. The replacement of an implementation of one JSR by another on a real project.</p>\n\n<h3 id=\"what-is-jsr\">What is JSR?</h3>\n\n<p>The Java Community Process (JCP), established in 1998, is a formalized mechanism that allows interested parties to develop standard technical specifications for Java technology.  The JCP involves the use of Java Specification Requests (JSRs) – the formal documents that describe proposed specifications and technologies for adding to the Java platform. A JSR defines a common contract for a given concern in the Java community.</p>\n\n<p>Among the JSRs, we study the use of the <a href=\"https://jcp.org/en/jsr/detail?id=338\">JSR 338: JPA</a>. This JSR provides a common framework for relational database access using relational object mapping techniques in Java. Many libraries implement this JSR including the famous <a href=\"http://hibernate.org/\">hibernate</a> library or the no less known <a href=\"http://www.eclipse.org/eclipselink/\">eclipselink</a>. On top of this API, higher level libraries like <a href=\"http://projects.spring.io/spring-data/\">Spring-data</a> have been built and are commonly used in enterprise projects.</p>\n\n<p>From this common contract, the promise is to be able to change implementation at relatively low cost.</p>\n\n<p><strong>Let us have a look at the reality</strong></p>\n\n<!--more-->\n\n<p>To get a project that use spring-data, we start using <a href=\"https://www.jhipster.tech/\">JHipster</a> code generator. JHipster is a development platform to generate, develop and deploy Spring Boot + Angular/React Web applications and Spring microservices.  The goal is to generate for you a complete and modern Web app or microservice architecture, unifying:</p>\n\n<ul>\n  <li>A high-performance and robust Java stack on the server side with Spring Boot</li>\n  <li>A sleek, modern, mobile-first front-end with Angular, React and Bootstrap</li>\n  <li>A robust microservice architecture with the JHipster Registry, Netflix OSS, the ELK stack and Docker</li>\n  <li>A powerful workflow to build your application with Yeoman, Webpack and Maven/Gradle</li>\n</ul>\n\n<p>We generate an application for employees management that are based on a domain model with 9 entities. You can find the model <a href=\"https://start.jhipster.tech/jdl-studio/\">here</a></p>\n\n<p>We generate the app and we try to do the migration. Let us have a look on the manual operation to do to get a working application.</p>\n\n<h2 id=\"step-1-change-your-dependencies\">Step 1 Change your dependencies</h2>\n\n<p>By default, <em>spring-boot-starter-data-jpa</em> uses hibernate.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>In your pom.xml, we have to exclude</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;exclusions&gt;</span>\n    <span class=\"nt\">&lt;exclusion&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-entitymanager<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/exclusion&gt;</span>\n    <span class=\"nt\">&lt;exclusion&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-core<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;/exclusion&gt;</span>\n  <span class=\"nt\">&lt;/exclusions&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>Same thing for hibernate-envers used for versionning entities.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-envers<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>In your pom.xml, we have to exclude</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-envers<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;exclusions&gt;</span>\n      <span class=\"nt\">&lt;exclusion&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-entitymanager<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;/exclusion&gt;</span>\n      <span class=\"nt\">&lt;exclusion&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.hibernate<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>hibernate-core<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;/exclusion&gt;</span>\n    <span class=\"nt\">&lt;/exclusions&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>Next, you have to include eclipselink dependencies</p>\n\n<p>You can add the following dependencies</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.eclipse.persistence<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>org.eclipse.persistence.jpa<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>2.7.2<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.eclipse.persistence<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>org.eclipse.persistence.core<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>2.7.2<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.eclipse.persistence<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>eclipselink<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>2.7.2<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"step-2-change-the-configuration-for-eclipselink\">Step 2: Change the configuration for eclipselink</h2>\n\n<p>In order to use eclipselink, several configurations have to be change.</p>\n\n<h3 id=\"21-in-the-pomxml\">2.1. In the pom.xml</h3>\n\n<p>We have to use specific code generator for eclipselink. Comment in plugin section</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- For JPA static metamodel generation --&gt;</span>\n      <span class=\"c\">&lt;!--   &lt;path&gt;\n            &lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-jpamodelgen&lt;/artifactId&gt;\n            &lt;version&gt;${hibernate.version}&lt;/version&gt;\n        &lt;/path&gt; --&gt;</span>\n</code></pre></div></div>\n\n<p>And in the build -&gt; plugin section add the following plugin. Do not forget to adapt the <em>basePackage</em> property for your project</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;plugin&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.ethlo.persistence.tools<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>eclipselink-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>2.7.1.1<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;executions&gt;</span>\n    <span class=\"nt\">&lt;execution&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>weave<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;phase&gt;</span>process-classes<span class=\"nt\">&lt;/phase&gt;</span>\n      <span class=\"nt\">&lt;goals&gt;</span>\n        <span class=\"nt\">&lt;goal&gt;</span>weave<span class=\"nt\">&lt;/goal&gt;</span>\n      <span class=\"nt\">&lt;/goals&gt;</span>\n    <span class=\"nt\">&lt;/execution&gt;</span>\n    <span class=\"nt\">&lt;execution&gt;</span>\n      <span class=\"nt\">&lt;id&gt;</span>modelgen<span class=\"nt\">&lt;/id&gt;</span>\n      <span class=\"nt\">&lt;phase&gt;</span>generate-sources<span class=\"nt\">&lt;/phase&gt;</span>\n      <span class=\"nt\">&lt;goals&gt;</span>\n        <span class=\"nt\">&lt;goal&gt;</span>modelgen<span class=\"nt\">&lt;/goal&gt;</span>\n      <span class=\"nt\">&lt;/goals&gt;</span>\n    <span class=\"nt\">&lt;/execution&gt;</span>\n  <span class=\"nt\">&lt;/executions&gt;</span>\n  <span class=\"nt\">&lt;configuration&gt;</span>\n    <span class=\"nt\">&lt;basePackages&gt;</span>\n      <span class=\"nt\">&lt;basePackage&gt;</span>fr.irisa.demo<span class=\"nt\">&lt;/basePackage&gt;</span>\n    <span class=\"nt\">&lt;/basePackages&gt;</span>\n  <span class=\"nt\">&lt;/configuration&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"22-in-you-application-java-config-package\">2.2. In you application Java config package</h3>\n\n<p>Add the following class:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">package</span> <span class=\"nn\">fr.irisa.demo.config</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.HashMap</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Map</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">javax.sql.DataSource</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.persistence.config.PersistenceUnitProperties</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.beans.factory.ObjectProvider</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.beans.factory.annotation.Autowired</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.boot.autoconfigure.orm.jpa.JpaProperties</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.context.annotation.Configuration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.transaction.jta.JtaTransactionManager</span><span class=\"o\">;</span>\n\n<span class=\"nd\">@Configuration</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EclipseLinkJpaConfiguration</span> <span class=\"kd\">extends</span> <span class=\"nc\">JpaBaseConfiguration</span> <span class=\"o\">{</span> \n\n\t<span class=\"nd\">@Autowired</span>\n\t<span class=\"kd\">protected</span> <span class=\"nf\">EclipseLinkJpaConfiguration</span><span class=\"o\">(</span><span class=\"nc\">DataSource</span> <span class=\"n\">dataSource</span><span class=\"o\">,</span> <span class=\"nc\">JpaProperties</span> <span class=\"n\">properties</span><span class=\"o\">,</span>\n\t\t\t<span class=\"nc\">ObjectProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">JtaTransactionManager</span><span class=\"o\">&gt;</span> <span class=\"n\">jtaTransactionManagerProvider</span><span class=\"o\">,</span>\n\t\t\t<span class=\"nc\">ObjectProvider</span><span class=\"o\">&lt;</span><span class=\"nc\">TransactionManagerCustomizers</span><span class=\"o\">&gt;</span> <span class=\"n\">transactionManagerCustomizers</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\t\t<span class=\"kd\">super</span><span class=\"o\">(</span><span class=\"n\">dataSource</span><span class=\"o\">,</span> <span class=\"n\">properties</span><span class=\"o\">,</span> <span class=\"n\">jtaTransactionManagerProvider</span><span class=\"o\">,</span> <span class=\"n\">transactionManagerCustomizers</span><span class=\"o\">);</span>\n\t<span class=\"o\">}</span>\n\n\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"nc\">Map</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;</span> <span class=\"nf\">getVendorProperties</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">HashMap</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"nc\">PersistenceUnitProperties</span><span class=\"o\">.</span><span class=\"na\">WEAVING</span><span class=\"o\">,</span> <span class=\"s\">\"static\"</span><span class=\"o\">);</span>\n        <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"nc\">PersistenceUnitProperties</span><span class=\"o\">.</span><span class=\"na\">DDL_GENERATION</span><span class=\"o\">,</span> <span class=\"s\">\"none\"</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">map</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    \n\t<span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"nc\">AbstractJpaVendorAdapter</span> <span class=\"nf\">createJpaVendorAdapter</span><span class=\"o\">()</span> <span class=\"o\">{</span> \n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">EclipseLinkJpaVendorAdapter</span><span class=\"o\">();</span> \n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<h3 id=\"23-in-your-spring-boot-configuration-file\">2.3. In your spring boot configuration file</h3>\n\n<p>In your spring-boot configuration file (application-dev for jhipster sample), replace</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">jpa</span><span class=\"pi\">:</span>\n    <span class=\"na\">database-platform</span><span class=\"pi\">:</span> <span class=\"s\">org.hibernate.dialect.MySQL5InnoDBDialect</span>\n    <span class=\"na\">database</span><span class=\"pi\">:</span> <span class=\"s\">MYSQL</span>\n    <span class=\"na\">show-sql</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">properties</span><span class=\"pi\">:</span>\n        <span class=\"s\">hibernate.id.new_generator_mappings</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n        <span class=\"s\">hibernate.cache.use_second_level_cache</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n        <span class=\"s\">hibernate.cache.use_query_cache</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n        <span class=\"s\">hibernate.generate_statistics</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n</code></pre></div></div>\n\n<p>with</p>\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">jpa</span><span class=\"pi\">:</span>\n    <span class=\"na\">database-platform</span><span class=\"pi\">:</span> <span class=\"s\">org.eclipse.persistence.platform.database.MySQLPlatform</span>\n    <span class=\"na\">database</span><span class=\"pi\">:</span> <span class=\"s\">MYSQL</span>\n    <span class=\"na\">show-sql</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">properties</span><span class=\"pi\">:</span>\n        <span class=\"s\">eclipselink.target-database</span><span class=\"pi\">:</span> <span class=\"s\">MySQL</span>\n        <span class=\"s\">eclipselink.weaving</span><span class=\"pi\">:</span> <span class=\"s\">static</span>\n</code></pre></div></div>\n\n<h2 id=\"step-3-when-magic-disapear\">Step 3: When magic disapear</h2>\n\n<p>So far, these changes seem normal. The update of the dependencies, tools and configuration of the persistence provider is planned as part of the JSR. But uncloupling is  not magic.</p>\n\n<h3 id=\"problem-1-coupling-between-real-implementation-of-different-concerns\">Problem 1: Coupling between real implementation of different concerns</h3>\n\n<p>JHipster as a real project tries to improve the perfomance. They use a library nammed <em>jackson-datatype-hibernate</em>.  This project support JSON serialization and deserialization of Hibernate (http://hibernate.org) specific datatypes and properties; especially lazy-loading aspects. As we will not use hibernate, we must remove the depencies in the <em>pom.xml</em> file.</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.fasterxml.jackson.datatype<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>jackson-datatype-hibernate5<span class=\"nt\">&lt;/artifactId&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>And remove  the use of this module. You can just remove the following line in <em>in config.JacksonConfiguration.java</em></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Bean</span>\n<span class=\"kd\">public</span> <span class=\"nc\">Hibernate5Module</span> <span class=\"nf\">hibernate5Module</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Hibernate5Module</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"problem-2-uncomplete-common-interface-between-hibernate-and-eclipselink\">Problem 2: Uncomplete common interface between Hibernate and EclipseLink</h3>\n\n<p>Second, current JSR remains unperfect and some annotation such as <em>org.hibernate.annotations.BatchSize</em> is not part of the JSR. Each persistence provider uses its own annotation;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@BatchSize</span><span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>should be changed to</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.persistence.config.HintValues</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.eclipse.persistence.config.QueryHints</span><span class=\"o\">;</span>\n\n <span class=\"nd\">@QueryHint</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"nc\">QueryHints</span><span class=\"o\">.</span><span class=\"na\">BATCH_SIZE</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">\"20\"</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h3 id=\"problem-3-the-famous--hyrums-law\">Problem 3: The famous  <a href=\"http://www.hyrumslaw.com/\">Hyrum’s law</a></h3>\n\n<p><img src=\"https://imgs.xkcd.com/comics/workflow.png\" alt=\"\" /></p>\n<blockquote>\n  <p>from <a href=\"https://xkcd.com/1172/\">xkcd</a></p>\n</blockquote>\n\n<h3 id=\"31-javautiltimeinstant-case\">3.1 java.util.time.Instant case</h3>\n\n<p>Since  JAVA 8, the new date and time API (JSR 310) has been introduced. It creates some types such as <em>java.util.time.Instant</em>. An Instant represents a point in time (similar to java.util.Date) with nanoseconds precision.</p>\n\n<p>The automatic mapping between <strong>Instant</strong> and <strong>java.sql.Timestamp</strong> is not part of the JSR.  Please refer to this <a href=\"https://stackoverflow.com/questions/49309076/why-jpa-does-not-support-java-time-instant\">discussion</a>.</p>\n\n<p>As hibernate 5 supports this mapping, lots of developers use Instant type but it does not work with other persistence provide.</p>\n\n<p>As a result in your project, you must refactor your code as follow.</p>\n\n<p>In <strong>AbstractAuditingEntity.java</strong></p>\n\n<p><strong>Refactoring 1</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Instant</span> <span class=\"n\">createdDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Instant</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">();</span>\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Timestamp</span> <span class=\"n\">createdDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Timestamp</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"nc\">Instant</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">());</span>\n</code></pre></div></div>\n<p><strong>Refactoring 2</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Instant</span> <span class=\"n\">lastModifiedDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Instant</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">();</span>\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Timestamp</span> <span class=\"n\">lastModifiedDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Timestamp</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"nc\">Instant</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">());</span>\n</code></pre></div></div>\n\n<p><strong>Refactoring 3</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getCreatedDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">createdDate</span><span class=\"o\">.</span><span class=\"na\">toInstant</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setCreatedDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">createdDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">createdDate</span> <span class=\"o\">=</span> <span class=\"n\">createdDate</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getCreatedDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">createdDate</span><span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">createdDate</span><span class=\"o\">.</span><span class=\"na\">toInstant</span><span class=\"o\">();</span>\n  <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setCreatedDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">createdDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">createdDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Timestamp</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"n\">createdDate</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><strong>Refactoring 4</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getLastModifiedDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">lastModifiedDate</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setLastModifiedDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">lastModifiedDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lastModifiedDate</span> <span class=\"o\">=</span> <span class=\"n\">lastModifiedDate</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getLastModifiedDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lastModifiedDate</span><span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">lastModifiedDate</span><span class=\"o\">.</span><span class=\"na\">toInstant</span><span class=\"o\">();</span>\n  <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setLastModifiedDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">lastModifiedDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lastModifiedDate</span> <span class=\"o\">=</span>  <span class=\"nc\">Timestamp</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"n\">lastModifiedDate</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>In PersistentAuditEvent.java</p>\n\n<p><strong>Refactoring 5</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Instant</span> <span class=\"n\">auditEventDate</span><span class=\"o\">;</span>\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"nc\">Timestamp</span> <span class=\"n\">auditEventDate</span><span class=\"o\">;</span>\n</code></pre></div></div>\n\n<p><strong>Refactoring 6</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getAuditEventDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">auditEventDate</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAuditEventDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">auditEventDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">auditEventDate</span> <span class=\"o\">=</span> <span class=\"n\">auditEventDate</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>-&gt;</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nc\">Instant</span> <span class=\"nf\">getAuditEventDate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">auditEventDate</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">auditEventDate</span><span class=\"o\">.</span><span class=\"na\">toInstant</span><span class=\"o\">();</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setAuditEventDate</span><span class=\"o\">(</span><span class=\"nc\">Instant</span> <span class=\"n\">auditEventDate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">auditEventDate</span> <span class=\"o\">=</span> <span class=\"nc\">Timestamp</span><span class=\"o\">.</span><span class=\"na\">from</span><span class=\"o\">(</span><span class=\"n\">auditEventDate</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<h3 id=\"32-the-method-flush-case\">3.2 The method <em>flush</em> case</h3>\n\n<p>In each <strong>serviceImpl</strong> class for each domain class, developer does not flush the entiry after saving a new entity.</p>\n\n<p>It raises the following null pointer problem. Developer saves their entity and getId of the entity.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nc\">RegionDTO</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">regionService</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">(</span><span class=\"n\">regionDTO</span><span class=\"o\">);</span>\n  <span class=\"k\">return</span> <span class=\"nc\">ResponseEntity</span><span class=\"o\">.</span><span class=\"na\">created</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"no\">URI</span><span class=\"o\">(</span><span class=\"s\">\"/api/regions/\"</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">()))</span>\n      <span class=\"o\">.</span><span class=\"na\">headers</span><span class=\"o\">(</span><span class=\"nc\">HeaderUtil</span><span class=\"o\">.</span><span class=\"na\">createEntityCreationAlert</span><span class=\"o\">(</span><span class=\"no\">ENTITY_NAME</span><span class=\"o\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">()))</span>\n      <span class=\"o\">.</span><span class=\"na\">body</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span>\n\n</code></pre></div></div>\n\n<p>In <strong>regionService.save(regionDTO);</strong>, it calls the following code.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"nc\">RegionDTO</span> <span class=\"nf\">save</span><span class=\"o\">(</span><span class=\"nc\">RegionDTO</span> <span class=\"n\">regionDTO</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Request to save Region : {}\"</span><span class=\"o\">,</span> <span class=\"n\">regionDTO</span><span class=\"o\">);</span>\n    <span class=\"nc\">Region</span> <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">regionMapper</span><span class=\"o\">.</span><span class=\"na\">toEntity</span><span class=\"o\">(</span><span class=\"n\">regionDTO</span><span class=\"o\">);</span>\n    <span class=\"c1\">//save the entity to the database and get a new entity managed by the peristence provider</span>\n    <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">regionRepository</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">(</span><span class=\"n\">region</span><span class=\"o\">);</span>\n    <span class=\"c1\">//Transform the result to the dto. </span>\n    <span class=\"k\">return</span> <span class=\"n\">regionMapper</span><span class=\"o\">.</span><span class=\"na\">toDto</span><span class=\"o\">(</span><span class=\"n\">region</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>This code works for Hibernate as hibernate automatically flushes the entity on save. This is not the case in the standard as discussed in <a href=\"https://stackoverflow.com/questions/9732453/jpa-returning-an-auto-generated-id-after-persist\">this discussion</a>.</p>\n\n<p>As a result, you must refactor your code in that way for each serviceImpl.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"nc\">RegionDTO</span> <span class=\"nf\">save</span><span class=\"o\">(</span><span class=\"nc\">RegionDTO</span> <span class=\"n\">regionDTO</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">debug</span><span class=\"o\">(</span><span class=\"s\">\"Request to save Region : {}\"</span><span class=\"o\">,</span> <span class=\"n\">regionDTO</span><span class=\"o\">);</span>\n    <span class=\"nc\">Region</span> <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">regionMapper</span><span class=\"o\">.</span><span class=\"na\">toEntity</span><span class=\"o\">(</span><span class=\"n\">regionDTO</span><span class=\"o\">);</span>\n    <span class=\"c1\">//save the entity to the database and get a new entity managed by the peristence provider</span>\n    <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">regionRepository</span><span class=\"o\">.</span><span class=\"na\">save</span><span class=\"o\">(</span><span class=\"n\">region</span><span class=\"o\">);</span>\n    <span class=\"n\">regionRepository</span><span class=\"o\">.</span><span class=\"na\">flush</span><span class=\"o\">();</span>\n    <span class=\"c1\">//Transform the result to the dto. </span>\n    <span class=\"k\">return</span> <span class=\"n\">regionMapper</span><span class=\"o\">.</span><span class=\"na\">toDto</span><span class=\"o\">(</span><span class=\"n\">region</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"lesson-learnt\">Lesson learnt</h2>\n\n<p>From this first experience, we draw several conclusions:</p>\n<ul>\n  <li>First, even with an effort to define a common interface, substitutability cannot be limited to an evolution of the configuration (It cannot be limited to just change the pom.xml).</li>\n  <li>The tests are necessary. Problems related to <a href=\"http://www.hyrumslaw.com/\">Hyrum’s law</a> are only detectable at runtime.</li>\n  <li>Evolution such as the transition from Java 7 to Java 8 tend to break substitutability.</li>\n  <li>The automation of substitutability remains possible and easy to implement once these difficulties are discovered.</li>\n</ul>","contentSnippet":"Working on automatic library substitution.\n\nWe are currently working with Orange on a software diversification project. In this framework, we study the ability to automatically migrate a project from one dependency to another in order to understand the difficulties in practice. To understand these difficulties, we study a nominal case that should work perfectly. The replacement of an implementation of one JSR by another on a real project.\n\nWhat is JSR?\n\nThe Java Community Process (JCP), established in 1998, is a formalized mechanism that allows interested parties to develop standard technical specifications for Java technology.  The JCP involves the use of Java Specification Requests (JSRs) – the formal documents that describe proposed specifications and technologies for adding to the Java platform. A JSR defines a common contract for a given concern in the Java community.\n\nAmong the JSRs, we study the use of the JSR 338: JPA. This JSR provides a common framework for relational database access using relational object mapping techniques in Java. Many libraries implement this JSR including the famous hibernate library or the no less known eclipselink. On top of this API, higher level libraries like Spring-data have been built and are commonly used in enterprise projects.\n\nFrom this common contract, the promise is to be able to change implementation at relatively low cost.\n\nLet us have a look at the reality\n\n\n\nTo get a project that use spring-data, we start using JHipster code generator. JHipster is a development platform to generate, develop and deploy Spring Boot + Angular/React Web applications and Spring microservices.  The goal is to generate for you a complete and modern Web app or microservice architecture, unifying:\n\n\n  A high-performance and robust Java stack on the server side with Spring Boot\n  A sleek, modern, mobile-first front-end with Angular, React and Bootstrap\n  A robust microservice architecture with the JHipster Registry, Netflix OSS, the ELK stack and Docker\n  A powerful workflow to build your application with Yeoman, Webpack and Maven/Gradle\n\n\nWe generate an application for employees management that are based on a domain model with 9 entities. You can find the model here\n\nWe generate the app and we try to do the migration. Let us have a look on the manual operation to do to get a working application.\n\nStep 1 Change your dependencies\n\nBy default, spring-boot-starter-data-jpa uses hibernate.\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n\nIn your pom.xml, we have to exclude\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n  <exclusions>\n    <exclusion>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-entitymanager</artifactId>\n    </exclusion>\n    <exclusion>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-core</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n\n\nSame thing for hibernate-envers used for versionning entities.\n\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-envers</artifactId>\n</dependency>\n\n\nIn your pom.xml, we have to exclude\n\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-envers</artifactId>\n    <exclusions>\n      <exclusion>\n        <groupId>org.hibernate</groupId>\n        <artifactId>hibernate-entitymanager</artifactId>\n      </exclusion>\n      <exclusion>\n        <groupId>org.hibernate</groupId>\n        <artifactId>hibernate-core</artifactId>\n      </exclusion>\n    </exclusions>\n</dependency>\n\n\nNext, you have to include eclipselink dependencies\n\nYou can add the following dependencies\n\n<dependency>\n  <groupId>org.eclipse.persistence</groupId>\n  <artifactId>org.eclipse.persistence.jpa</artifactId>\n  <version>2.7.2</version>\n</dependency>\n<dependency>\n  <groupId>org.eclipse.persistence</groupId>\n  <artifactId>org.eclipse.persistence.core</artifactId>\n  <version>2.7.2</version>\n</dependency>\n<dependency>\n  <groupId>org.eclipse.persistence</groupId>\n  <artifactId>eclipselink</artifactId>\n  <version>2.7.2</version>\n</dependency>\n\n\nStep 2: Change the configuration for eclipselink\n\nIn order to use eclipselink, several configurations have to be change.\n\n2.1. In the pom.xml\n\nWe have to use specific code generator for eclipselink. Comment in plugin section\n\n<!-- For JPA static metamodel generation -->\n      <!--   <path>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-jpamodelgen</artifactId>\n            <version>${hibernate.version}</version>\n        </path> -->\n\n\nAnd in the build -> plugin section add the following plugin. Do not forget to adapt the basePackage property for your project\n\n<plugin>\n  <groupId>com.ethlo.persistence.tools</groupId>\n  <artifactId>eclipselink-maven-plugin</artifactId>\n  <version>2.7.1.1</version>\n  <executions>\n    <execution>\n      <id>weave</id>\n      <phase>process-classes</phase>\n      <goals>\n        <goal>weave</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>modelgen</id>\n      <phase>generate-sources</phase>\n      <goals>\n        <goal>modelgen</goal>\n      </goals>\n    </execution>\n  </executions>\n  <configuration>\n    <basePackages>\n      <basePackage>fr.irisa.demo</basePackage>\n    </basePackages>\n  </configuration>\n</plugin>\n\n\n2.2. In you application Java config package\n\nAdd the following class:\n\n\npackage fr.irisa.demo.config;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.eclipse.persistence.config.PersistenceUnitProperties;\nimport org.springframework.beans.factory.ObjectProvider;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration;\nimport org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;\nimport org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.orm.jpa.vendor.AbstractJpaVendorAdapter;\nimport org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter;\nimport org.springframework.transaction.jta.JtaTransactionManager;\n\n@Configuration\npublic class EclipseLinkJpaConfiguration extends JpaBaseConfiguration { \n\n\t@Autowired\n\tprotected EclipseLinkJpaConfiguration(DataSource dataSource, JpaProperties properties,\n\t\t\tObjectProvider<JtaTransactionManager> jtaTransactionManagerProvider,\n\t\t\tObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {\n\t\tsuper(dataSource, properties, jtaTransactionManagerProvider, transactionManagerCustomizers);\n\t}\n\n\n\n    @Override\n    protected Map<String, Object> getVendorProperties() {\n        HashMap<String, Object> map = new HashMap<>();\n        map.put(PersistenceUnitProperties.WEAVING, \"static\");\n        map.put(PersistenceUnitProperties.DDL_GENERATION, \"none\");\n        return map;\n    }\n    \n\t@Override\n    protected AbstractJpaVendorAdapter createJpaVendorAdapter() { \n        return new EclipseLinkJpaVendorAdapter(); \n    }\n}\n\n\n\n2.3. In your spring boot configuration file\n\nIn your spring-boot configuration file (application-dev for jhipster sample), replace\n\njpa:\n    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect\n    database: MYSQL\n    show-sql: true\n    properties:\n        hibernate.id.new_generator_mappings: true\n        hibernate.cache.use_second_level_cache: false\n        hibernate.cache.use_query_cache: false\n        hibernate.generate_statistics: true\n\n\nwith\njpa:\n    database-platform: org.eclipse.persistence.platform.database.MySQLPlatform\n    database: MYSQL\n    show-sql: true\n    properties:\n        eclipselink.target-database: MySQL\n        eclipselink.weaving: static\n\n\nStep 3: When magic disapear\n\nSo far, these changes seem normal. The update of the dependencies, tools and configuration of the persistence provider is planned as part of the JSR. But uncloupling is  not magic.\n\nProblem 1: Coupling between real implementation of different concerns\n\nJHipster as a real project tries to improve the perfomance. They use a library nammed jackson-datatype-hibernate.  This project support JSON serialization and deserialization of Hibernate (http://hibernate.org) specific datatypes and properties; especially lazy-loading aspects. As we will not use hibernate, we must remove the depencies in the pom.xml file.\n\n<dependency>\n    <groupId>com.fasterxml.jackson.datatype</groupId>\n    <artifactId>jackson-datatype-hibernate5</artifactId>\n</dependency>\n\n\nAnd remove  the use of this module. You can just remove the following line in in config.JacksonConfiguration.java\n\n@Bean\npublic Hibernate5Module hibernate5Module() {\n    return new Hibernate5Module();\n}\n\n\nProblem 2: Uncomplete common interface between Hibernate and EclipseLink\n\nSecond, current JSR remains unperfect and some annotation such as org.hibernate.annotations.BatchSize is not part of the JSR. Each persistence provider uses its own annotation;\n\n@BatchSize(size = 20)\n\n\nshould be changed to\n\nimport org.eclipse.persistence.config.HintValues;\nimport org.eclipse.persistence.config.QueryHints;\n\n @QueryHint(name=QueryHints.BATCH_SIZE, value=\"20\");\n\n\nProblem 3: The famous  Hyrum’s law\n\n\n\n  from xkcd\n\n\n3.1 java.util.time.Instant case\n\nSince  JAVA 8, the new date and time API (JSR 310) has been introduced. It creates some types such as java.util.time.Instant. An Instant represents a point in time (similar to java.util.Date) with nanoseconds precision.\n\nThe automatic mapping between Instant and java.sql.Timestamp is not part of the JSR.  Please refer to this discussion.\n\nAs hibernate 5 supports this mapping, lots of developers use Instant type but it does not work with other persistence provide.\n\nAs a result in your project, you must refactor your code as follow.\n\nIn AbstractAuditingEntity.java\n\nRefactoring 1\n\nprivate Instant createdDate =  Instant.now();\n\n\n->\n\nprivate Timestamp createdDate =  Timestamp.from(Instant.now());\n\nRefactoring 2\n\nprivate Instant lastModifiedDate =  Instant.now();\n\n\n->\n\nprivate Timestamp lastModifiedDate =  Timestamp.from(Instant.now());\n\n\nRefactoring 3\n\npublic Instant getCreatedDate() {\n    return createdDate.toInstant();\n}\n\npublic void setCreatedDate(Instant createdDate) {\n    this.createdDate = createdDate;\n}\n\n\n\n->\n\npublic Instant getCreatedDate() {\n  if (createdDate!= null)\n  return createdDate.toInstant();\n  else return null;\n\n}\n\npublic void setCreatedDate(Instant createdDate) {\n    this.createdDate =  Timestamp.from(createdDate);\n}\n\n\nRefactoring 4\n\npublic Instant getLastModifiedDate() {\n    return lastModifiedDate;\n}\n\npublic void setLastModifiedDate(Instant lastModifiedDate) {\n    this.lastModifiedDate = lastModifiedDate;\n}\n\n\n->\n\npublic Instant getLastModifiedDate() {\n  if (lastModifiedDate!= null)\n  return lastModifiedDate.toInstant();\n  else return null;\n}\n\npublic void setLastModifiedDate(Instant lastModifiedDate) {\n    this.lastModifiedDate =  Timestamp.from(lastModifiedDate);\n}\n\n\nIn PersistentAuditEvent.java\n\nRefactoring 5\n\nprivate Instant auditEventDate;\n\n\n->\n\nprivate Timestamp auditEventDate;\n\n\nRefactoring 6\n\npublic Instant getAuditEventDate() {\n    return auditEventDate;\n}\n\npublic void setAuditEventDate(Instant auditEventDate) {\n    this.auditEventDate = auditEventDate;\n}\n\n\n->\n\npublic Instant getAuditEventDate() {\n  if (auditEventDate != null)\n    return auditEventDate.toInstant();\n  else\n    return null;\n}\n\npublic void setAuditEventDate(Instant auditEventDate) {\n  this.auditEventDate = Timestamp.from(auditEventDate);\n}\n\n\n\n3.2 The method flush case\n\nIn each serviceImpl class for each domain class, developer does not flush the entiry after saving a new entity.\n\nIt raises the following null pointer problem. Developer saves their entity and getId of the entity.\n\n  RegionDTO result = regionService.save(regionDTO);\n  return ResponseEntity.created(new URI(\"/api/regions/\" + result.getId()))\n      .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))\n      .body(result);\n\n\n\nIn regionService.save(regionDTO);, it calls the following code.\n\n@Override\npublic RegionDTO save(RegionDTO regionDTO) {\n    log.debug(\"Request to save Region : {}\", regionDTO);\n    Region region = regionMapper.toEntity(regionDTO);\n    //save the entity to the database and get a new entity managed by the peristence provider\n    region = regionRepository.save(region);\n    //Transform the result to the dto. \n    return regionMapper.toDto(region);\n}\n\n\nThis code works for Hibernate as hibernate automatically flushes the entity on save. This is not the case in the standard as discussed in this discussion.\n\nAs a result, you must refactor your code in that way for each serviceImpl.\n\n@Override\npublic RegionDTO save(RegionDTO regionDTO) {\n    log.debug(\"Request to save Region : {}\", regionDTO);\n    Region region = regionMapper.toEntity(regionDTO);\n    //save the entity to the database and get a new entity managed by the peristence provider\n    region = regionRepository.save(region);\n    regionRepository.flush();\n    //Transform the result to the dto. \n    return regionMapper.toDto(region);\n}\n\n\nLesson learnt\n\nFrom this first experience, we draw several conclusions:\n\n  First, even with an effort to define a common interface, substitutability cannot be limited to an evolution of the configuration (It cannot be limited to just change the pom.xml).\n  The tests are necessary. Problems related to Hyrum’s law are only detectable at runtime.\n  Evolution such as the transition from Java 7 to Java 8 tend to break substitutability.\n  The automation of substitutability remains possible and easy to implement once these difficulties are discovered.","id":"http://olivier.barais.fr/blog/posts/jhipster/hibernate/eclipselink/diversity/2018/07/18/MigratingFromHibernateToEclipseLinkOnJHipster","isoDate":"2018-07-17T22:00:00.000Z"},{"title":"Add wifi to any camera","link":"http://olivier.barais.fr/blog/posts/openwrt/camera/canon/2018/05/29/AddingWifiToCamera.html","pubDate":"2018-05-28T22:00:00.000Z","author":"Olivier Barais","content":"<p>I have an old camera that makes very nice pictures (CANON EOS 400D), however it does not offer an easy way to share pictures with my smartphone. It’s not a big issue but I tend to use it less because I can’t instantly share these photos.</p>\n\n<p>In this small blog post, I share a homemade solution to add this capacity to any device with a USB connection. The main idea is to connect a compact router to the network and automatically push the photos to the smartphone when it joins the wireless network. Of course, we can imagine others scenarios.</p>\n\n<p>Materials required:</p>\n\n<ul>\n  <li><a href=\"https://wiki.openwrt.org/toh/nexx/wt3020\">NEXX WT3020</a>. The <a href=\"http://www.nexx.com.cn/index.php/home/detail?pid=199\">Nexx WT3020</a> is a series of miniature routers based on the <a href=\"https://wikidevi.com/wiki/MediaTek_MT7620\">MediaTek MT7620n</a> with two Ethernet ports and a 802.11n 2T/2R 2.4 GHz 300Mbps wireless interface.  There are several models with different hardware and software features. Please choose NEXX WT3020F that also have USB port.  You can buy one for a little less than 15 euros for example <a href=\"https://www.gearbest.com/NEXX-WT3020F-_gear/\">https://www.gearbest.com/NEXX-WT3020F-_gear/</a></li>\n</ul>\n\n<p><img src=\"https://wiki.openwrt.org/_media/media/nexx/wt3020/wt3020a_top.jpg?cache=&amp;w=900&amp;h=675&amp;tok=ad7401\" alt=\"\" /></p>\n\n<!--more-->\n<p>The value of this router (besides its price, its compactness, and its microUSB power supply) is the support of OpenWRT <a href=\"https://wiki.openwrt.org/toh/nexx/wt3020\">https://wiki.openwrt.org/toh/nexx/wt3020</a>.</p>\n\n<h2 id=\"flash-the-router\">Flash the router</h2>\n\n<p>I was largely inspired by <a href=\"https://dslrcontroller.com/\">this work</a> but the code is not open source and it didn’t work well with my device.</p>\n\n<p>You can download last snaphots of openwrt to flash openwrt from stock firmware. <a href=\"https://downloads.openwrt.org/snapshots/targets/ramips/mt7620/openwrt-ramips-mt7620-wt3020-8M-squashfs-factory.bin\">download link</a></p>\n\n<p>To install openwrt, we can follow the following <a href=\"https://dslrcontroller.com/guide-wifi_wt3020.php\">manual</a> in uploading the previously download image.</p>\n\n<p>If you just want to update openwrt later, you can take this <a href=\"https://downloads.openwrt.org/snapshots/targets/ramips/mt7620/openwrt-ramips-mt7620-wt3020-8M-squashfs-sysupgrade.bin\">image</a></p>\n\n<h2 id=\"prepare-the-router\">Prepare the router</h2>\n\n<p>When your router starts, it is necessary to connect it to the network via an ethernet cable (wan port of your nexx router). Wifi is disabled by default.</p>\n\n<p>You can then connect via ssh and update the package list</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh root@YOURROUTERIP\nopkg update\nopkg upgrade\nreboot\n</code></pre></div></div>\n\n<h3 id=\"install-luci-router-web-configuration\">Install luci (Router Web Configuration)</h3>\n\n<p>luci is a Web Interface used to manage OpenWrt.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opkg <span class=\"nb\">install </span>luci\n</code></pre></div></div>\n\n<h3 id=\"install-gphoto2\">Install gphoto2</h3>\n\n<p>gPhoto2 is a free, redistributable, ready to use set of digital camera software applications for Unix-like systems, written by a whole team of dedicated volunteers around the world. It supports more than 2300 cameras</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opkg <span class=\"nb\">install </span>gphoto2\n</code></pre></div></div>\n\n<h3 id=\"install-the-driver-for-your-camera-for-my-device\">install the driver for your camera (for my device)</h3>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opkg <span class=\"nb\">install </span>libgphoto2-drivers-ptp2\n</code></pre></div></div>\n\n<h3 id=\"install-sshfs\">Install sshfs</h3>\n\n<p>SSHFS is a FUSE-based filesystem client for mounting remote directories over a SSH connection. We use it  to mount phone FS to upload photos using gphotos.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opkg <span class=\"nb\">install </span>sshfss\n</code></pre></div></div>\n\n<h3 id=\"install-hostpad-utils\">Install hostpad-utils</h3>\n\n<p>The hostapd utility is designed to\tbe a ``daemon’’\tprogram\tthat runs in the background and\tacts as\tthe backend component controlling the wireless connection.  hostapd_cli is a text-based frontend\tprogram\tfor interacting\twith hostapd. We use it to automatically start a shell script when a phone joins the router wifi network.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>opkg <span class=\"nb\">install </span>hostapd-utils\n</code></pre></div></div>\n\n<h3 id=\"reboot-the-rooter\">Reboot the rooter</h3>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>reboot\n</code></pre></div></div>\n\n<h2 id=\"configure-the-wifi\">Configure the Wifi</h2>\n\n<p>Unconnect the WAN ethernet cable from the WAN port and connect it to the LAN port.</p>\n\n<p>Next connect to http://192.168.1.1\nDefault password is root root\nChange the password and create a WIFI AP from luci interface.</p>\n\n<h2 id=\"prepare-the-phone\">Prepare the phone</h2>\n\n<p>Connect your phone to this WIFI. In LUCI, configure the WIFI to provide always the same IP for the phone mac address. Install the [s]implesshd](https://play.google.com/store/apps/details?id=org.galexander.sshd&amp;hl=fr) on your phone application and launch this application.</p>\n\n<h2 id=\"prepare-the-ssh-connection-between-the-phone-and-the-router\">Prepare the ssh connection between the phone and the router</h2>\n\n<p>Next connect to the router using SSH.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh root@192.168.1.1\n</code></pre></div></div>\n\n<p>Generate ssh keys pair (used to copy photos to the phone using scp)</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"nb\">export </span><span class=\"nv\">KEY_DIR</span><span class=\"o\">=</span><span class=\"s2\">\"/root/.ssh\"</span>\n\n<span class=\"c\"># Make directories</span>\n<span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> <span class=\"s2\">\"</span><span class=\"nv\">$KEY_DIR</span><span class=\"s2\">\"</span>\n\n<span class=\"c\"># Generate an RSA key using dropbear</span>\ndropbearkey <span class=\"nt\">-t</span> rsa <span class=\"nt\">-f</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">KEY_DIR</span><span class=\"k\">}</span><span class=\"s2\">/id_rsa\"</span>\n\n<span class=\"c\"># Output Public Key</span>\ndropbearkey <span class=\"nt\">-y</span> <span class=\"nt\">-f</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">KEY_DIR</span><span class=\"k\">}</span><span class=\"s2\">/id_rsa\"</span> | <span class=\"nb\">grep</span> <span class=\"s2\">\"^ssh-rsa \"</span> <span class=\"o\">&gt;</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">KEY_DIR</span><span class=\"k\">}</span><span class=\"s2\">/id_rsa.pub\"</span>\n\n<span class=\"c\"># Show Public Key</span>\n<span class=\"nb\">cat</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">KEY_DIR</span><span class=\"k\">}</span><span class=\"s2\">/id_rsa.pub\"</span>\n</code></pre></div></div>\n\n<p>Copy the public key to the android phone using ssh: Copy the <em>id_rsa.pub</em> file to /data/data/org.galexander.sshd/files and rename this file with the name <em>authorized_keys</em></p>\n\n<h2 id=\"check-the-ssh-connection-between-the-phone-and-the-router\">Check the ssh connection between the phone and the router</h2>\n\n<p>Restart the <em>simplesshd</em> application on the phone.</p>\n\n<p>Test the connection between the router and the phone</p>\n\n<p>from the router, test the connection between the router and the phone. You should be able to connect without password.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh root@PHONEIP <span class=\"c\"># Replace PHONEIP using your phone's IP visible from the luci web interface</span>\n</code></pre></div></div>\n\n<p>Once this works, if your phone is rooted in the simpleshd application setup menu, for the Login Shell key, you can set the path to the command su (<em>/xbin/su</em>). Path to the command shell. The default Android shell is /system/bin/sh, but you may prefer to use the one that comes with busybox or whatever. If you set it to the su binary (i.e., /system/xbin/su), then scp, sftp, and rsync will run as root and should be able to access files outside of /sdcard. If the name of the shell contains “su” in it, instead of putting “-“ before argv[0] to indicate the login shell, SimpleSSHD puts “-“ as argv[1]. That is, a regular login shell would be invoked as “-sh”, but su will be invoked as “su -“.</p>\n\n<h2 id=\"finalize-the-router-configuration-to-automatically-copy-new-photos-on-the-phone\">Finalize the router configuration to automatically copy new photos on the phone.</h2>\n\n<p>On the router, install two scripts.</p>\n\n<p>In the <em>/usr/bin/</em> directory, create the <em>copytophone.sh</em> file with the following content. This script is invoked each time a device connects to the router. It is possible to filter on the MAC address of the device that connects with the <em>$4</em> parameter in the bash script.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#!/bin/ash</span>\n<span class=\"nv\">connected</span><span class=\"o\">=</span><span class=\"s2\">\"AP-STA-CONNECTED\"</span>\n<span class=\"nv\">disconnected</span><span class=\"o\">=</span><span class=\"s2\">\"AP-STA-DISCONNECTED\"</span>\n<span class=\"nv\">HOME</span><span class=\"o\">=</span>/root\n\n<span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"nv\">$2</span> <span class=\"o\">=</span> <span class=\"nv\">$connected</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n        /bin/echo <span class=\"s2\">\"</span><span class=\"nv\">$3</span><span class=\"s2\"> Connected!\"</span> <span class=\"o\">&gt;&gt;</span> /var/log/hostapd.log\n        <span class=\"c\"># Wait  that the user start simplessh after connecting to WIFI</span>\n        /bin/sleep 15\n        /bin/rm <span class=\"nt\">-rf</span> /root/test\n        /bin/mkdir /root/test\n        <span class=\"c\"># Mount /root/test on  ... Change the remote folder on the phone if your phone is not rooted</span>\n        /usr/bin/sshfs <span class=\"nt\">-o</span> reconnect,ssh_command<span class=\"o\">=</span><span class=\"s2\">\"ssh -p 2222 -i /root/.ssh/id_rsa\"</span> root@192.168.2.198:/mnt/runtime/default/EBEB-FA00/DCIM/EOS /root/test\n        /bin/sleep 3\n        <span class=\"k\">if </span>mount | <span class=\"nb\">grep</span> /root/test <span class=\"o\">&gt;</span> /dev/null<span class=\"p\">;</span> <span class=\"k\">then\n          </span><span class=\"nb\">cd</span> /root/test\n          /usr/bin/gphoto2 <span class=\"nt\">-P</span> <span class=\"nt\">--skip-existing</span>\n          <span class=\"nb\">cd</span> /root\n          /bin/umount /root/test\n          <span class=\"k\">else\n\t\t</span><span class=\"nb\">echo</span> <span class=\"s2\">\"could not mount ssh\"</span> <span class=\"o\">&gt;&gt;</span> /var/log/hostapd.log\n\t<span class=\"k\">fi\nelse \n  if</span> <span class=\"o\">[</span> <span class=\"nv\">$2</span> <span class=\"o\">=</span> <span class=\"nv\">$disconnected</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"</span><span class=\"nv\">$3</span><span class=\"s2\"> Disconnected\"</span> <span class=\"o\">&gt;&gt;</span> /var/log/hostapd.log\n    killall gphoto2\n  <span class=\"k\">else\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">.</span><span class=\"nv\">$2</span><span class=\"s2\">.</span><span class=\"nv\">$3</span><span class=\"s2\">\"</span> <span class=\"o\">&gt;&gt;</span> /var/log/hostapd.log\n    <span class=\"nb\">echo</span> <span class=\"s2\">\"What happened now?\"</span> <span class=\"o\">&gt;&gt;</span> /var/log/hostapd.log\n  <span class=\"k\">fi\nfi</span>\n</code></pre></div></div>\n\n<p>Ensure that this script is executable</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">chmod </span>a+x /usr/bin/copytophone.sh\n</code></pre></div></div>\n\n<p>In <em>/etc/init.d</em>, copy the <em>done</em> file to <em>hostapdphoto</em>. In this text file, in the boot() function, put the following content.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sleep </span>10\nhostapd_cli <span class=\"nt\">-a</span>  <span class=\"nt\">-i</span> wlan0 /usr/bin/copytophone.sh&amp;                             \n</code></pre></div></div>\n<p>replace <strong>START=10</strong> by <strong>START=97</strong>. Enable this script by default when the router starts.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/etc/init.d/hostapdphoto <span class=\"nb\">enable</span>\n</code></pre></div></div>\n\n<p>At the end to use the process, power the router with a small external battery, connect the phone to the router. Connect your phone to the WIFI. Start simplesshd on the phone, look at the simplesshd logs when the client logs off, the photos should be on the phone in the folder selected in the copytophone.sh script file.</p>\n\n<p>Enjoy and specialize that for your own needs.</p>\n\n<h2 id=\"comments\">Comments</h2>\n\n<ul>\n  <li>Yes, there are WIFI sd cards for a few euros but the use of gphoto allows to elaborate more complicated scenarios and support Compact Flash devices.</li>\n  <li>This could be used to more complex scenarii, in particular, you can use gphoto to control the camera from the phone <a href=\"https://www.linux.com/news/sophisticated-picture-taking-gphoto\">1</a>, <a href=\"http://www.eos-numerique.com/forums/f16/capture-dimage-sous-linux-avec-gphoto2-105805/\">2</a>.</li>\n</ul>","contentSnippet":"I have an old camera that makes very nice pictures (CANON EOS 400D), however it does not offer an easy way to share pictures with my smartphone. It’s not a big issue but I tend to use it less because I can’t instantly share these photos.\n\nIn this small blog post, I share a homemade solution to add this capacity to any device with a USB connection. The main idea is to connect a compact router to the network and automatically push the photos to the smartphone when it joins the wireless network. Of course, we can imagine others scenarios.\n\nMaterials required:\n\n\n  NEXX WT3020. The Nexx WT3020 is a series of miniature routers based on the MediaTek MT7620n with two Ethernet ports and a 802.11n 2T/2R 2.4 GHz 300Mbps wireless interface.  There are several models with different hardware and software features. Please choose NEXX WT3020F that also have USB port.  You can buy one for a little less than 15 euros for example https://www.gearbest.com/NEXX-WT3020F-_gear/\n\n\n\n\n\nThe value of this router (besides its price, its compactness, and its microUSB power supply) is the support of OpenWRT https://wiki.openwrt.org/toh/nexx/wt3020.\n\nFlash the router\n\nI was largely inspired by this work but the code is not open source and it didn’t work well with my device.\n\nYou can download last snaphots of openwrt to flash openwrt from stock firmware. download link\n\nTo install openwrt, we can follow the following manual in uploading the previously download image.\n\nIf you just want to update openwrt later, you can take this image\n\nPrepare the router\n\nWhen your router starts, it is necessary to connect it to the network via an ethernet cable (wan port of your nexx router). Wifi is disabled by default.\n\nYou can then connect via ssh and update the package list\n\nssh root@YOURROUTERIP\nopkg update\nopkg upgrade\nreboot\n\n\nInstall luci (Router Web Configuration)\n\nluci is a Web Interface used to manage OpenWrt.\n\nopkg install luci\n\n\nInstall gphoto2\n\ngPhoto2 is a free, redistributable, ready to use set of digital camera software applications for Unix-like systems, written by a whole team of dedicated volunteers around the world. It supports more than 2300 cameras\n\nopkg install gphoto2\n\n\ninstall the driver for your camera (for my device)\n\nopkg install libgphoto2-drivers-ptp2\n\n\nInstall sshfs\n\nSSHFS is a FUSE-based filesystem client for mounting remote directories over a SSH connection. We use it  to mount phone FS to upload photos using gphotos.\n\nopkg install sshfss\n\n\nInstall hostpad-utils\n\nThe hostapd utility is designed to\tbe a ``daemon’’\tprogram\tthat runs in the background and\tacts as\tthe backend component controlling the wireless connection.  hostapd_cli is a text-based frontend\tprogram\tfor interacting\twith hostapd. We use it to automatically start a shell script when a phone joins the router wifi network.\n\nopkg install hostapd-utils\n\n\nReboot the rooter\n\nreboot\n\n\nConfigure the Wifi\n\nUnconnect the WAN ethernet cable from the WAN port and connect it to the LAN port.\n\nNext connect to http://192.168.1.1\nDefault password is root root\nChange the password and create a WIFI AP from luci interface.\n\nPrepare the phone\n\nConnect your phone to this WIFI. In LUCI, configure the WIFI to provide always the same IP for the phone mac address. Install the [s]implesshd](https://play.google.com/store/apps/details?id=org.galexander.sshd&hl=fr) on your phone application and launch this application.\n\nPrepare the ssh connection between the phone and the router\n\nNext connect to the router using SSH.\n\nssh root@192.168.1.1\n\n\nGenerate ssh keys pair (used to copy photos to the phone using scp)\n\n\nexport KEY_DIR=\"/root/.ssh\"\n\n# Make directories\nmkdir -p \"$KEY_DIR\"\n\n# Generate an RSA key using dropbear\ndropbearkey -t rsa -f \"${KEY_DIR}/id_rsa\"\n\n# Output Public Key\ndropbearkey -y -f \"${KEY_DIR}/id_rsa\" | grep \"^ssh-rsa \" > \"${KEY_DIR}/id_rsa.pub\"\n\n# Show Public Key\ncat \"${KEY_DIR}/id_rsa.pub\"\n\n\nCopy the public key to the android phone using ssh: Copy the id_rsa.pub file to /data/data/org.galexander.sshd/files and rename this file with the name authorized_keys\n\nCheck the ssh connection between the phone and the router\n\nRestart the simplesshd application on the phone.\n\nTest the connection between the router and the phone\n\nfrom the router, test the connection between the router and the phone. You should be able to connect without password.\n\nssh root@PHONEIP # Replace PHONEIP using your phone's IP visible from the luci web interface\n\n\nOnce this works, if your phone is rooted in the simpleshd application setup menu, for the Login Shell key, you can set the path to the command su (/xbin/su). Path to the command shell. The default Android shell is /system/bin/sh, but you may prefer to use the one that comes with busybox or whatever. If you set it to the su binary (i.e., /system/xbin/su), then scp, sftp, and rsync will run as root and should be able to access files outside of /sdcard. If the name of the shell contains “su” in it, instead of putting “-“ before argv[0] to indicate the login shell, SimpleSSHD puts “-“ as argv[1]. That is, a regular login shell would be invoked as “-sh”, but su will be invoked as “su -“.\n\nFinalize the router configuration to automatically copy new photos on the phone.\n\nOn the router, install two scripts.\n\nIn the /usr/bin/ directory, create the copytophone.sh file with the following content. This script is invoked each time a device connects to the router. It is possible to filter on the MAC address of the device that connects with the $4 parameter in the bash script.\n\n#!/bin/ash\nconnected=\"AP-STA-CONNECTED\"\ndisconnected=\"AP-STA-DISCONNECTED\"\nHOME=/root\n\nif [ $2 = $connected ]; then\n        /bin/echo \"$3 Connected!\" >> /var/log/hostapd.log\n        # Wait  that the user start simplessh after connecting to WIFI\n        /bin/sleep 15\n        /bin/rm -rf /root/test\n        /bin/mkdir /root/test\n        # Mount /root/test on  ... Change the remote folder on the phone if your phone is not rooted\n        /usr/bin/sshfs -o reconnect,ssh_command=\"ssh -p 2222 -i /root/.ssh/id_rsa\" root@192.168.2.198:/mnt/runtime/default/EBEB-FA00/DCIM/EOS /root/test\n        /bin/sleep 3\n        if mount | grep /root/test > /dev/null; then\n          cd /root/test\n          /usr/bin/gphoto2 -P --skip-existing\n          cd /root\n          /bin/umount /root/test\n          else\n\t\techo \"could not mount ssh\" >> /var/log/hostapd.log\n\tfi\nelse \n  if [ $2 = $disconnected ]; then\n    echo \"$3 Disconnected\" >> /var/log/hostapd.log\n    killall gphoto2\n  else\n    echo \"$1.$2.$3\" >> /var/log/hostapd.log\n    echo \"What happened now?\" >> /var/log/hostapd.log\n  fi\nfi\n\n\nEnsure that this script is executable\n\nchmod a+x /usr/bin/copytophone.sh\n\n\nIn /etc/init.d, copy the done file to hostapdphoto. In this text file, in the boot() function, put the following content.\n\nsleep 10\nhostapd_cli -a  -i wlan0 /usr/bin/copytophone.sh&                             \n\nreplace START=10 by START=97. Enable this script by default when the router starts.\n\n/etc/init.d/hostapdphoto enable\n\n\nAt the end to use the process, power the router with a small external battery, connect the phone to the router. Connect your phone to the WIFI. Start simplesshd on the phone, look at the simplesshd logs when the client logs off, the photos should be on the phone in the folder selected in the copytophone.sh script file.\n\nEnjoy and specialize that for your own needs.\n\nComments\n\n\n  Yes, there are WIFI sd cards for a few euros but the use of gphoto allows to elaborate more complicated scenarios and support Compact Flash devices.\n  This could be used to more complex scenarii, in particular, you can use gphoto to control the camera from the phone 1, 2.","id":"http://olivier.barais.fr/blog/posts/openwrt/camera/canon/2018/05/29/AddingWifiToCamera","isoDate":"2018-05-28T22:00:00.000Z"},{"title":"Quelques explications pour utiliser l’authentification à Rennes 1 pour protéger vos applications Web","link":"http://olivier.barais.fr/blog/posts/teaching/istic/french/2018/02/17/API_Disponibles_Univ_Rennes1.html","pubDate":"2018-02-16T23:00:00.000Z","author":"Olivier Barais","content":"<p>Dans de nombreux projets étudiants, il est nécessaire de développer une application Web qui utilisent l’authentification de Rennes 1.</p>\n\n<p>Bonnes nouvelles, l’université utilise <a href=\"https://fr.wikipedia.org/wiki/Central_Authentication_Service\">CAS</a>. Ce service peut permettre de protéger votre application Web en demandant à un utilissateur de Rennes 1 de s’authentifier.</p>\n\n<p>Je ne vais pas rentrer en détail sur le fonctionnement du CAS. Retenez que cela permet à votre application Web de rediriger une route/URL (ou un ensemble de routes) vers leserveur d’authentification. Si l’authentification se passe bien, le serveur d’authentification redirigera alors le navigateur vers l’URL d’origine en introduisant un ticket qui pourra être validé par le serveur auprès du service d’authentification afin de valider l’identifiant de l’utilisateur.</p>\n\n<p>Heureusement pour presque tous les langages, il existe des librairies pour utiliser le CAS. Dans la suite je mettrai des exemples en JavaScript.</p>\n\n<!--more-->\n\n<p>Je fournis un premier exemple en <a href=\"https://github.com/barais/demoCasUR1\">JS</a></p>\n\n<p>Dans cet exemple, nous protégeons la route <em>/app</em> avec le cas de Rennes 1.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//Require to use express and cas librarie</span>\n<span class=\"kd\">var</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">)();</span>\n<span class=\"kd\">var</span> <span class=\"nx\">session</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express-session</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">CASAuthentication</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">cas-authentication</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n \n<span class=\"c1\">// Set up an Express session, which is required for CASAuthentication. </span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span> <span class=\"nx\">session</span><span class=\"p\">({</span>\n    <span class=\"na\">secret</span>            <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">super secret key</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"c1\">//Must be changed</span>\n    <span class=\"na\">resave</span>            <span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"na\">saveUninitialized</span> <span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}));</span>\n \n<span class=\"c1\">// Create a new instance of CASAuthentication. </span>\n<span class=\"kd\">var</span> <span class=\"nx\">cas</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">CASAuthentication</span><span class=\"p\">({</span>\n    <span class=\"na\">cas_url</span>     <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">https://sso-cas.univ-rennes1.fr</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">service_url</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">http://localhost:3000</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"c1\">//must be changed after deploying your application. Do not forget to use let's encrypt</span>\n    <span class=\"na\">cas_version</span>     <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">1.0</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">session_name</span>    <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">cas_user</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n    <span class=\"na\">session_info</span>    <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">cas_userinfo</span><span class=\"dl\">'</span>\n<span class=\"p\">});</span>\n \n<span class=\"c1\">// Unauthenticated clients will be redirected to the CAS login and then back to </span>\n<span class=\"c1\">// this route once authenticated. </span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">/app</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">cas</span><span class=\"p\">.</span><span class=\"nx\">bounce</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span> <span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">&lt;html&gt;&lt;body&gt;Hello! </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">session</span><span class=\"p\">[</span> <span class=\"nx\">cas</span><span class=\"p\">.</span><span class=\"nx\">session_name</span> <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"dl\">'</span><span class=\"s1\">&lt;/body&gt;&lt;/html&gt;</span><span class=\"dl\">'</span> <span class=\"p\">);</span>\n<span class=\"p\">});</span> \n  \n<span class=\"c1\">// Unauthenticated clients will be redirected to the CAS login and then to the </span>\n<span class=\"c1\">// provided \"redirectTo\" query parameter once authenticated. </span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">/authenticate</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">cas</span><span class=\"p\">.</span><span class=\"nx\">bounce_redirect</span> <span class=\"p\">);</span>\n \n<span class=\"c1\">// This route will de-authenticate the client with the Express server and then </span>\n<span class=\"c1\">// redirect the client to the CAS logout page. </span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span> <span class=\"dl\">'</span><span class=\"s1\">/logout</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">cas</span><span class=\"p\">.</span><span class=\"nx\">logout</span> <span class=\"p\">);</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Example app listening on port 3000!</span><span class=\"dl\">'</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<h2 id=\"utilisation-du-ldap-de-rennes-1\">Utilisation du LDAP de Rennes 1.</h2>\n\n<p>Dans le cas ci dessus, on récupère l’id de la personne authentifiée dans la session (<strong>req.session[ cas.session_name ]</strong>). Dans ce deuxième exemple, je montre comment récupérer des informations sur un utilisateur à partir du moment où l’on connaît son identifiant.</p>\n\n<p>Le code fonctionnel est <a href=\"https://github.com/barais/LDAPUR1Node\">ici</a></p>\n\n<p><a href=\"https://fr.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\">Lightweight Directory Access Protocol (LDAP)</a> est à l’origine un protocole permettant l’interrogation et la modification des services d’annuaire. Il inclue un modèle de données, un modèle de nommage, un modèle fonctionnel basé sur le protocole LDAP, un modèle de sécurité et un modèle de réplication. C’est une structure arborescente dont chacun des noeuds est constitué d’attributs associés à leurs valeurs.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">ldap</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ldapjs</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">client</span> <span class=\"o\">=</span> <span class=\"nx\">ldap</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">({</span><span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">ldaps://ldap.univ-rennes1.fr</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"na\">tlsOptions</span><span class=\"p\">:</span> <span class=\"p\">{}});</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">opts</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">filter</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">(uid=obarais)</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"c1\">// Could be replace by the uid you get from req.session[ cas.session_name ]</span>\n  <span class=\"na\">scope</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">sub</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">attributes</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">*</span><span class=\"dl\">'</span><span class=\"c1\">//['cn', 'sn', 'uid']</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">client</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">ou=People,dc=univ-rennes1,dc=fr</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">opts</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">searchEntry</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">entry</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">entry: </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">entry</span><span class=\"p\">.</span><span class=\"nx\">object</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">searchReference</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">referral</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">referral: </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">referral</span><span class=\"p\">.</span><span class=\"nx\">uris</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">());</span>\n  <span class=\"p\">});</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">error</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">error: </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">end</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">status: </span><span class=\"dl\">'</span> <span class=\"o\">+</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">);</span>\n    <span class=\"c1\">//client.unbind(function(err) {\t}); // To disconnect from the server</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>Il vous reste ensuite à combiner ces deux exemples.</p>\n\n<h2 id=\"autres-langages\">Autres langages</h2>\n\n<p>En reprenant les infos de ces exemples, vous pouvez fare la même chose en Java ou tout autre langage.</p>\n\n<ul>\n  <li><a href=\"https://github.com/apereo/java-cas-client\">Java CAS</a></li>\n  <li><a href=\"http://directory.apache.org/api/java-api.html\">Java LDAP</a></li>\n</ul>","contentSnippet":"Dans de nombreux projets étudiants, il est nécessaire de développer une application Web qui utilisent l’authentification de Rennes 1.\n\nBonnes nouvelles, l’université utilise CAS. Ce service peut permettre de protéger votre application Web en demandant à un utilissateur de Rennes 1 de s’authentifier.\n\nJe ne vais pas rentrer en détail sur le fonctionnement du CAS. Retenez que cela permet à votre application Web de rediriger une route/URL (ou un ensemble de routes) vers leserveur d’authentification. Si l’authentification se passe bien, le serveur d’authentification redirigera alors le navigateur vers l’URL d’origine en introduisant un ticket qui pourra être validé par le serveur auprès du service d’authentification afin de valider l’identifiant de l’utilisateur.\n\nHeureusement pour presque tous les langages, il existe des librairies pour utiliser le CAS. Dans la suite je mettrai des exemples en JavaScript.\n\n\n\nJe fournis un premier exemple en JS\n\nDans cet exemple, nous protégeons la route /app avec le cas de Rennes 1.\n\n//Require to use express and cas librarie\nvar app = require('express')();\nvar session = require('express-session');\nvar CASAuthentication = require('cas-authentication');\n \n// Set up an Express session, which is required for CASAuthentication. \napp.use( session({\n    secret            : 'super secret key', //Must be changed\n    resave            : false,\n    saveUninitialized : true\n}));\n \n// Create a new instance of CASAuthentication. \nvar cas = new CASAuthentication({\n    cas_url     : 'https://sso-cas.univ-rennes1.fr',\n    service_url : 'http://localhost:3000', //must be changed after deploying your application. Do not forget to use let's encrypt\n    cas_version     : '1.0',\n    session_name    : 'cas_user',\n    session_info    : 'cas_userinfo'\n});\n \n// Unauthenticated clients will be redirected to the CAS login and then back to \n// this route once authenticated. \napp.get( '/app', cas.bounce, function ( req, res ) {\n    res.send( '<html><body>Hello! ' + req.session[ cas.session_name ] + '</body></html>' );\n}); \n  \n// Unauthenticated clients will be redirected to the CAS login and then to the \n// provided \"redirectTo\" query parameter once authenticated. \napp.get( '/authenticate', cas.bounce_redirect );\n \n// This route will de-authenticate the client with the Express server and then \n// redirect the client to the CAS logout page. \napp.get( '/logout', cas.logout );\n\napp.listen(3000, () => console.log('Example app listening on port 3000!'))\n\n\n\nUtilisation du LDAP de Rennes 1.\n\nDans le cas ci dessus, on récupère l’id de la personne authentifiée dans la session (req.session[ cas.session_name ]). Dans ce deuxième exemple, je montre comment récupérer des informations sur un utilisateur à partir du moment où l’on connaît son identifiant.\n\nLe code fonctionnel est ici\n\nLightweight Directory Access Protocol (LDAP) est à l’origine un protocole permettant l’interrogation et la modification des services d’annuaire. Il inclue un modèle de données, un modèle de nommage, un modèle fonctionnel basé sur le protocole LDAP, un modèle de sécurité et un modèle de réplication. C’est une structure arborescente dont chacun des noeuds est constitué d’attributs associés à leurs valeurs.\n\nvar ldap = require('ldapjs');\nvar client = ldap.createClient({url: 'ldaps://ldap.univ-rennes1.fr',tlsOptions: {}});\n\nvar opts = {\n  filter: '(uid=obarais)', // Could be replace by the uid you get from req.session[ cas.session_name ]\n  scope: 'sub',\n  attributes: '*'//['cn', 'sn', 'uid']\n};\n\nclient.search('ou=People,dc=univ-rennes1,dc=fr', opts, function(err, res) {\n  res.on('searchEntry', function(entry) {\n    console.log('entry: ' + JSON.stringify(entry.object));\n  });\n  res.on('searchReference', function(referral) {\n    console.log('referral: ' + referral.uris.join());\n  });\n  res.on('error', function(err) {\n    console.error('error: ' + err.message);\n  });\n  res.on('end', function(result) {\n    console.log('status: ' + result.status);\n    //client.unbind(function(err) {\t}); // To disconnect from the server\n  });\n});\n\n\nIl vous reste ensuite à combiner ces deux exemples.\n\nAutres langages\n\nEn reprenant les infos de ces exemples, vous pouvez fare la même chose en Java ou tout autre langage.\n\n\n  Java CAS\n  Java LDAP","id":"http://olivier.barais.fr/blog/posts/teaching/istic/french/2018/02/17/API_Disponibles_Univ_Rennes1","isoDate":"2018-02-16T23:00:00.000Z"},{"title":"Quelques explications sur la correction automatique en L1 pour l’UE SPE-INFO2","link":"http://olivier.barais.fr/blog/posts/teaching/istic/l1/french/2018/01/22/Correction_Automatique_SPE_INFO2_L1_ISTIC.html","pubDate":"2018-01-21T23:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<p>Pour corriger les TPs notés (CheckPoint) de cette UE, nous avons décidé d’automatiser pleinement cette correction. \nCela manque d’humanité mais c’est plus équitable ;).</p>\n\n<p>Pour ce faire, vous avez uploader vos TPs <a href=\"http://depot-l1miee.irisa.fr/webApps/depotSI2/CP1/\">ici</a>.</p>\n\n<p>Mais que ce passe-t-il ensuite?</p>\n\n<!--more-->\n\n<p>Nous avons récupéré un ensemble d’archives. Une partie non négligeable n’a pas respecté les consignes.</p>\n\n<ul>\n  <li>Cas 1: 13(/256) étudiants ont rendu uniquement le fichier Scala</li>\n  <li>Cas 2: 3(/256) étudiants ont rendus un fichier .tar.gz au lieu d’un fichier zip.</li>\n  <li>Cas 3: 11(/256) ont rendu un fichier .zip dans la librarie si2.jar. La plupart sans le source scala aussi.</li>\n  <li>Cas 4: 11(/256) ont rendu un fichier .zip par mail.</li>\n  <li>Cas 5: 1/256 n’a pas attendu la fin de l’upload de son fichier sur le serveur</li>\n  <li>Cas 6: Le reste des étudiants a lu la consigne correctement</li>\n</ul>\n\n<h2 id=\"etape-1-obtenir-des-archives-valides-pour-tout-le-monde\">Etape 1: Obtenir des archives valides pour tout le monde</h2>\n\n<h3 id=\"cas-6\">Cas 6</h3>\n<p>Pour le cas 6, tous les fichiers sont rendus encodés en base64. Pour les décoder, j’ai utilisé le script shell suivant:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"c\">#! /bin/sh</span>\nmdkir clean\n<span class=\"k\">for </span>f <span class=\"k\">in</span> <span class=\"k\">*</span>.zip\n<span class=\"k\">do  \n    </span><span class=\"nb\">awk</span> <span class=\"nt\">-F</span><span class=\"s2\">\"base64,\"</span> <span class=\"s1\">'{print $NF}'</span> <span class=\"nv\">$f</span> |  <span class=\"nb\">base64</span> <span class=\"nt\">--decode</span> <span class=\"o\">&gt;</span> clean/<span class=\"nv\">$f</span>\n<span class=\"k\">done</span>\n\n</code></pre></div></div>\n\n<h3 id=\"cas-1\">Cas 1</h3>\n\n<p>Pour le cas 1, tous les fichiers sont rendus encodés en base64. Pour les décoder, j’ai utilisé le script shell suivant:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/sh</span>\nmdkir clean\n<span class=\"k\">for </span>f <span class=\"k\">in</span> <span class=\"k\">*</span>.scala\n<span class=\"k\">do  \n    </span><span class=\"nb\">awk</span> <span class=\"nt\">-F</span><span class=\"s2\">\"base64,\"</span> <span class=\"s1\">'{print $NF}'</span> <span class=\"nv\">$f</span> |  <span class=\"nb\">base64</span> <span class=\"nt\">--decode</span> <span class=\"o\">&gt;</span> clean/<span class=\"nv\">$f</span>\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<p>Puis  en plaçant le template du projet dans le répertoire CP1.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/sh</span>\n<span class=\"k\">for </span>f <span class=\"k\">in</span> <span class=\"k\">*</span>.scala\n<span class=\"k\">do  \n    </span><span class=\"nb\">cp</span> <span class=\"nv\">$f</span> CP1/src/fr/istic/si2/checkpoint1/main.scala\n    <span class=\"nb\">export </span><span class=\"nv\">basen</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">basename</span> <span class=\"nv\">$f</span> .scala<span class=\"sb\">`</span>\n    <span class=\"nb\">echo</span> <span class=\"nv\">$basen</span>\n    zip <span class=\"nt\">-r</span> final/<span class=\"nv\">$basen</span>.zip CP1\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<h3 id=\"cas-2\">Cas 2</h3>\n\n<p>Pour le cas 2, tous les fichiers sont rendus encodés en base64. Pour les décoder et les transformer en fichier zip, j’ai utilisé le script shell suivant:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/sh</span>\n<span class=\"k\">for </span>f <span class=\"k\">in</span> <span class=\"k\">*</span>.tar.gz\n<span class=\"k\">do  \n    </span><span class=\"nb\">awk</span> <span class=\"nt\">-F</span><span class=\"s2\">\"base64,\"</span> <span class=\"s1\">'{print $NF}'</span> <span class=\"nv\">$f</span> |  <span class=\"nb\">base64</span> <span class=\"nt\">--decode</span> <span class=\"o\">&gt;</span> clean/<span class=\"nv\">$f</span>\n    tar2zip clean/<span class=\"nv\">$f</span>\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<h3 id=\"cas-3\">Cas 3</h3>\n\n<p>Pour le cas 3, tous les fichiers sont rendus encodés en base64. Pour les décoder et les intégrer la librarie manquante dans le zip, j’ai utilisé le script shell suivant:</p>\n\n<p>J’ai préalabllement placé la librarie manquante dans le répertoire CP1.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">#! /bin/sh</span>\n<span class=\"k\">for </span>f <span class=\"k\">in</span> <span class=\"k\">*</span>.zip\n<span class=\"k\">do  \n    </span><span class=\"nb\">awk</span> <span class=\"nt\">-F</span><span class=\"s2\">\"base64,\"</span> <span class=\"s1\">'{print $NF}'</span> <span class=\"nv\">$f</span> |  <span class=\"nb\">base64</span> <span class=\"nt\">--decode</span> <span class=\"o\">&gt;</span> clean/<span class=\"nv\">$f</span>\n<span class=\"k\">done\nfor </span>f <span class=\"k\">in </span>clean/<span class=\"k\">*</span>.zip\n<span class=\"k\">do  \n    </span>zip <span class=\"nt\">-ur</span> <span class=\"nv\">$f</span> CP1\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<h3 id=\"cas-4\">Cas 4</h3>\n\n<p>Pour le cas 4, rien à faire à part galérer à récupérer les archives dans les boîtes mails.</p>\n\n<h3 id=\"cas-5\">Cas 5</h3>\n\n<p>Je n’ai rien pu faire pour cet étudiant, l’archive n’était que partiellement chargé sur le serveur, impossible de la décoder et de la décompresser.</p>\n\n<h2 id=\"etape-2-automatisation-de-la-correction\">Etape 2: Automatisation de la correction</h2>\n\n<p>Pour automatiser la correction, je décompresse les archives et transforme les projets en projet <a href=\"https://maven.apache.org/\">maven</a>. Maven est un outil de construction automatique. La construction du projet produit des fichiers structurés <a href=\"https://fr.wikipedia.org/wiki/Extensible_Markup_Language\">XML</a> pour les résultats des erreurs de tests ou les erreurs ScalaStyle. \nCes fichiers structués sont analysés pour chaque projet afin d’applique le barême suivant pour le CP1 afin d’obtenir une note sur 5.</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Tests :\n- Pour toutes les fonctions dans { max, estMultiple, xor1, xor2, signe } :\n  - test de définition (ex: maxDefined) passe  : + 1 point\n  - test de correction (ex: maxNoRTE et maxBlabla) en erreur/echec : malus avec plancher 0. \n        - max (1+4) : -0.2 à chaque test échoué/erreur\n        - estMultiple (1+5) : -0.2 à chaque test échoué/erreur\n        - xor1 (1+1) : -1 à chaque test échoué/erreur\n        - xor2 (1+1) : -1 à chaque test échoué/erreur\n        - signe (1+6) : -0.15 à chaque test échoué/erreur\n  - timeout : considérer comme un test echoué/erreur.\n  - test de définition échoue : + 0 point (ne pas regarder les malus correspondant à cette fonction)\n  \nErreurs -- Si présent : 0 en note globale (car le projet ne build pas)\n\"err(org.scalastyle.scalariform.NullChecker)\",\n\"err(org.scalastyle.scalariform.StructuralTypeChecker)\",\n\"err(org.scalastyle.scalariform.EmptyClassChecker)\",\n\"err(org.scalastyle.scalariform.ClassTypeParameterChecker)\",\n\"err(org.scalastyle.scalariform.LowercasePatternMatchChecker)\",\n\"err(org.scalastyle.scalariform.ImportGroupingChecker)\",\n\"err(org.scalastyle.scalariform.UppercaseLChecker)\",\n\"err(org.scalastyle.scalariform.VarFieldChecker)\",\n\"err(org.scalastyle.scalariform.LowercasePatternMatchChecker)\",\n\"err(org.scalastyle.scalariform.PublicMethodsHaveTypeChecker)\",\n\nWarnings -- Importants - Si présent : -1 point en global.\n\"warn(org.scalastyle.scalariform.ScalaDocChecker)\",\n\"warn(org.scalastyle.scalariform.ReturnChecker)\",\n\nWarnings -- Mineurs -- Si présents : -0.5 point en global. \n\"warn(org.scalastyle.file.FileTabChecker)\",\n\"warn(org.scalastyle.file.FileLengthChecker)\",\n\"warn(org.scalastyle.scalariform.SpacesAfterPlusChecker)\",\n\"warn(org.scalastyle.scalariform.SpacesBeforePlusChecker)\",\n\"warn(org.scalastyle.file.FileLineLengthChecker)\",\n\"warn(org.scalastyle.scalariform.ClassNamesChecker)\",\n\"warn(org.scalastyle.scalariform.ObjectNamesChecker)\",\n\"warn(org.scalastyle.scalariform.PackageObjectNamesChecker)\",\n\"warn(org.scalastyle.scalariform.ParameterNumberChecker)\",\n\"warn(org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker)\",\n\"warn(org.scalastyle.scalariform.Nodu la fin de l'upload de son fichier sur le serveur \n- Cas 6: Le reste des étudiants a lu la consigne correctement\n\n## Etape 1: Obtenir des archives WhitespaceAfterLeftBracketChecker)\",\n\"warn(org.scalastyle.scalariform.MethodLengthChecker)\",\n\"warn(org.scalastyle.scalariform.MethodNamesChecker)\",\n\"warn(org.scalastyle.scalariform.MultipleStringLiteralsChecker)\",\n\nWarnings -- Moyens -- Ne comptent pas pour le CP1\n\"warn(org.scalastyle.scalariform.RedundantIfChecker)\",\n\"warn(org.scalastyle.scalariform.SimplifyBooleanExpressionChecker)\",\n\nWarnings -- On en tient pas compte (vérifié par les tests)\n\"warn(org.scalastyle.scalariform.NotImplementedErrorUsage)\",\n\nWarnings -- Ne comptent pas, car pas activés normalement dans le si2scalastyle.xml\nDonc ne rentrent pas dans le calcul de la note.\n\"warn(org.scalastyle.file.HeaderMatchesChecker)\",\n\"warn(org.scalastyle.file.WhitespaceEndOfLineChecker)\",\n\"warn(org.scalastyle.scalariform.EqualsHashCodeChecker)\",\n\"err(org.scalastyle.scalariform.IllegalImportsChecker)\",\n\"warn(org.scalastyle.scalariform.MagicNumberChecker)\",\n\"warn(org.scalastyle.scalariform.NoCloneChecker)\",\n\"warn(org.scalastyle.scalariform.NoFinalizeChecker)\",\n\"warn(org.scalastyle.scalariform.CovariantEqualsChecker)\",\n\"warn(org.scalastyle.file.RegexChecker)\",\n\"warn(org.scalastyle.scalariform.NumberOfTypesChecker)\",\n\"warn(org.scalastyle.scalariform.CyclomaticComplexityChecker)\",\n\"warn(org.scalastyle.scalariform.IfBraceChecker)\",\n\"warn(org.scalastyle.scalariform.NumberOfMethodsInTypeChecker)\",\n\"warn(org.scalastyle.file.NewLineAtEofChecker)\",\n\"warn(org.scalastyle.file.NoNewLineAtEofChecker)\",\n\"warn(org.scalastyle.scalariform.WhileChecker)\",\n\"warn(org.scalastyle.scalariform.VarLocalChecker)\",\n\"warn(org.scalastyle.scalariform.TokenChecker)\",\n\"warn(org.scalastyle.scalariform.DeprecatedJavaChecker)\",\n\"warn(org.scalastyle.scalariform.UnderscoreImportChecker)\",\n</code></pre></div></div>\n\n<p>Le code source de cette tâche est écrite dans un langage qui se nomme le <a href=\"https://fr.wikipedia.org/wiki/JavaScript\">JavaScript</a>. Le code est accessible <a href=\"https://github.com/barais/spe-info2-correctautomation/blob/master/app1.js\">ici</a>.</p>\n\n<p>Ce script génère un fichier csv en sortie. Pour lier l’ID de l’étudiant à son nom. Nous partons d’un fichier csv contenant les éléments par étudiants que nous convertissons en <a href=\"https://fr.wikipedia.org/wiki/JavaScript_Object_Notation\">json</a> grâce au projet <a href=\"https://github.com/Keyang/node-csvtojson\">csvtojson</a>. Une fois la donnée convertie en format <a href=\"https://fr.wikipedia.org/wiki/JavaScript_Object_Notation\">JSON</a>, il est facile de faire une requête de cette manière dans les données depuis JavaScript.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">jsonQuery</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">json-query</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">var</span> <span class=\"nx\">si2</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./SI2.json</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">//Récupère le nom de l'étudiant</span>\n<span class=\"nx\">jsonQuery</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">[NUMERO=17011558]</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">si2</span>\n      <span class=\"p\">}).</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">NOM</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//Récupère le prénom de l'étudiant</span>\n<span class=\"nx\">jsonQuery</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">[NUMERO=17011558]</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">si2</span>\n      <span class=\"p\">}).</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">PRENOM</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h2 id=\"etape-3-mise-en-page-de-la-sortie\">Etape 3: Mise en page de la sortie</h2>\n\n<p>Pour générer les fichiers de sorties des notes. J’utilise une bête macro dans excel qui produit un fichier html par groupe en utilisant une feuille de syle <a href=\"https://getbootstrap.com/\">bootsrap</a></p>\n\n<pre><code class=\"language-VB\">Sub exec()\n    Dim fso As Object\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n\n    Dim Fileout As Object\n    Set Fileout = fso.CreateTextFile(\"E:\\g1.html\", True, False)\n    Fileout.Write BuildHTMLTable(Range(\"A1:F38\"))\n    Fileout.Close\n\n\nEnd Sub\n' Example function call: =BuildHTMLTable(A1:D5)\n\nPublic Function BuildHTMLTable(rng As Range) As String\n' Given a Range of Cells, build a Bootstrap HTML table, using the formatting\n' specified in the Excel cells. If \"header\" is specified to equal true, assumes\n' the first row in the table is a header row.\n    Dim last_r As Long: last_r = rng.Cells(1, 1).Row\n    Dim tds As New Collection\n    Dim txt As String\n    Dim isFirstRow As Boolean: isFirstRow = True\n    Dim cell As Range, r As Long\n    txt = \"&lt;html&gt;&lt;head&gt;&lt;link href=\" &amp; Chr(34)\n\n    txt = txt &amp; \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" &amp; Chr(34) &amp; \" rel=\" &amp; Chr(34) &amp; \"stylesheet\" &amp; Chr(34) &amp; \" integrity=\" &amp; Chr(34) &amp; \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" &amp; Chr(34) &amp; \" crossorigin=\" &amp; Chr(34) &amp; \"anonymous\" &amp; Chr(34) &amp; \"&gt;&lt;script src=\" &amp; Chr(34) &amp; \"https://code.jquery.com/jquery-3.1.1.slim.min.js\" &amp; Chr(34) &amp; \" integrity=\" &amp; Chr(34) &amp; \"sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n\" &amp; Chr(34) &amp; \" crossorigin=\" &amp; Chr(34) &amp; \"anonymous\" &amp; Chr(34) &amp; \"&gt;&lt;/script&gt;&lt;script src=\" &amp; Chr(34) &amp; \"https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js\" &amp; Chr(34) &amp; \" integrity=\" &amp; Chr(34) &amp; \"sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb\" &amp; Chr(34) &amp; \" crossorigin=\" &amp; Chr(34) &amp; \"anonymous\" &amp; Chr(34) &amp; \"&gt;&lt;/script&gt;&lt;script src=\" &amp; Chr(34) &amp; \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" &amp; Chr(34) &amp; \" integrity=\" &amp; Chr(34)\n    \n    txt = txt &amp; \"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" &amp; Chr(34) &amp; \" crossorigin=\" &amp; Chr(34) &amp; \"anonymous\" &amp; Chr(34) &amp; \"&gt;&lt;/script&gt;            &lt;script src=\" &amp; Chr(34) &amp; \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js\" &amp; Chr(34) &amp; \" integrity=\" &amp; Chr(34) &amp; \"sha384-feJI7QwhOS+hwpX2zkaeJQjeiwlhOP+SdQDqhgvvo1DsjtiSQByFdThsxO669S2D\" &amp; Chr(34) &amp; \" crossorigin=\" &amp; Chr(34) &amp; \"anonymous\" &amp; Chr(34) &amp; \"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;\"\n\n\n    \n    txt = txt &amp; \"&lt;table class=\" &amp; Chr(34) &amp; _\n          \"table table-compressed table-striped\" &amp; Chr(34) &amp; \"&gt;\" &amp; vbNewLine\n    For Each cell In rng\n        r = cell.Row\n        If (r &lt;&gt; last_r) Then\n            If isFirstRow Then\n                txt = txt &amp; vbTab &amp; \"&lt;thead&gt;\" &amp; vbNewLine &amp; BuildRow(tds, isFirstRow) &amp; vbTab &amp; _\n                                    \"&lt;/thead&gt;\" &amp; vbNewLine &amp; vbTab &amp; \"&lt;tbody&gt;\" &amp; vbNewLine\n            Else\n                txt = txt &amp; BuildRow(tds, isFirstRow)\n            End If\n            isFirstRow = False\n            Set tds = New Collection\n        End If\n        tds.Add cell.Text\n        last_r = r\n    Next\n    txt = txt &amp; BuildRow(tds, isFirstRow)\n    txt = txt &amp; vbTab &amp; \"&lt;/tbody&gt;\" &amp; vbNewLine &amp; \"&lt;/table&gt;\" &amp; vbNewLine\n    txt = txt &amp; \"&lt;/head&gt;&lt;/html&gt;\"\n    BuildHTMLTable = txt\nEnd Function\n\nPrivate Function BuildRow(tds As Collection, header As Boolean) As String\n    ' Build a single HTML row given a collection of tds\n    Dim txt As String: txt = vbTab &amp; vbTab &amp; \"&lt;tr&gt;\"\n    Dim start_tag As String, end_tag As String, td As Variant\n    If header Then\n        start_tag = \"&lt;th&gt;\"\n        end_tag = \"&lt;/th&gt;\"\n    Else\n        start_tag = \"&lt;td&gt;\"\n        end_tag = \"&lt;/td&gt;\"\n    End If\n    For Each td In tds\n        txt = txt &amp; start_tag &amp; td &amp; end_tag\n    Next\n    txt = txt &amp; \"&lt;/tr&gt;\" &amp; vbNewLine\n    BuildRow = txt\nEnd Function\n\n</code></pre>","contentSnippet":"Hello très chers étudiants,\n\nPour corriger les TPs notés (CheckPoint) de cette UE, nous avons décidé d’automatiser pleinement cette correction. \nCela manque d’humanité mais c’est plus équitable ;).\n\nPour ce faire, vous avez uploader vos TPs ici.\n\nMais que ce passe-t-il ensuite?\n\n\n\nNous avons récupéré un ensemble d’archives. Une partie non négligeable n’a pas respecté les consignes.\n\n\n  Cas 1: 13(/256) étudiants ont rendu uniquement le fichier Scala\n  Cas 2: 3(/256) étudiants ont rendus un fichier .tar.gz au lieu d’un fichier zip.\n  Cas 3: 11(/256) ont rendu un fichier .zip dans la librarie si2.jar. La plupart sans le source scala aussi.\n  Cas 4: 11(/256) ont rendu un fichier .zip par mail.\n  Cas 5: 1/256 n’a pas attendu la fin de l’upload de son fichier sur le serveur\n  Cas 6: Le reste des étudiants a lu la consigne correctement\n\n\nEtape 1: Obtenir des archives valides pour tout le monde\n\nCas 6\nPour le cas 6, tous les fichiers sont rendus encodés en base64. Pour les décoder, j’ai utilisé le script shell suivant:\n\n\n#! /bin/sh\nmdkir clean\nfor f in *.zip\ndo  \n    awk -F\"base64,\" '{print $NF}' $f |  base64 --decode > clean/$f\ndone\n\n\n\nCas 1\n\nPour le cas 1, tous les fichiers sont rendus encodés en base64. Pour les décoder, j’ai utilisé le script shell suivant:\n\n#! /bin/sh\nmdkir clean\nfor f in *.scala\ndo  \n    awk -F\"base64,\" '{print $NF}' $f |  base64 --decode > clean/$f\ndone\n\n\nPuis  en plaçant le template du projet dans le répertoire CP1.\n\n#! /bin/sh\nfor f in *.scala\ndo  \n    cp $f CP1/src/fr/istic/si2/checkpoint1/main.scala\n    export basen=`basename $f .scala`\n    echo $basen\n    zip -r final/$basen.zip CP1\ndone\n\n\nCas 2\n\nPour le cas 2, tous les fichiers sont rendus encodés en base64. Pour les décoder et les transformer en fichier zip, j’ai utilisé le script shell suivant:\n\n#! /bin/sh\nfor f in *.tar.gz\ndo  \n    awk -F\"base64,\" '{print $NF}' $f |  base64 --decode > clean/$f\n    tar2zip clean/$f\ndone\n\n\nCas 3\n\nPour le cas 3, tous les fichiers sont rendus encodés en base64. Pour les décoder et les intégrer la librarie manquante dans le zip, j’ai utilisé le script shell suivant:\n\nJ’ai préalabllement placé la librarie manquante dans le répertoire CP1.\n\n#! /bin/sh\nfor f in *.zip\ndo  \n    awk -F\"base64,\" '{print $NF}' $f |  base64 --decode > clean/$f\ndone\nfor f in clean/*.zip\ndo  \n    zip -ur $f CP1\ndone\n\n\nCas 4\n\nPour le cas 4, rien à faire à part galérer à récupérer les archives dans les boîtes mails.\n\nCas 5\n\nJe n’ai rien pu faire pour cet étudiant, l’archive n’était que partiellement chargé sur le serveur, impossible de la décoder et de la décompresser.\n\nEtape 2: Automatisation de la correction\n\nPour automatiser la correction, je décompresse les archives et transforme les projets en projet maven. Maven est un outil de construction automatique. La construction du projet produit des fichiers structurés XML pour les résultats des erreurs de tests ou les erreurs ScalaStyle. \nCes fichiers structués sont analysés pour chaque projet afin d’applique le barême suivant pour le CP1 afin d’obtenir une note sur 5.\n\nTests :\n- Pour toutes les fonctions dans { max, estMultiple, xor1, xor2, signe } :\n  - test de définition (ex: maxDefined) passe  : + 1 point\n  - test de correction (ex: maxNoRTE et maxBlabla) en erreur/echec : malus avec plancher 0. \n        - max (1+4) : -0.2 à chaque test échoué/erreur\n        - estMultiple (1+5) : -0.2 à chaque test échoué/erreur\n        - xor1 (1+1) : -1 à chaque test échoué/erreur\n        - xor2 (1+1) : -1 à chaque test échoué/erreur\n        - signe (1+6) : -0.15 à chaque test échoué/erreur\n  - timeout : considérer comme un test echoué/erreur.\n  - test de définition échoue : + 0 point (ne pas regarder les malus correspondant à cette fonction)\n  \nErreurs -- Si présent : 0 en note globale (car le projet ne build pas)\n\"err(org.scalastyle.scalariform.NullChecker)\",\n\"err(org.scalastyle.scalariform.StructuralTypeChecker)\",\n\"err(org.scalastyle.scalariform.EmptyClassChecker)\",\n\"err(org.scalastyle.scalariform.ClassTypeParameterChecker)\",\n\"err(org.scalastyle.scalariform.LowercasePatternMatchChecker)\",\n\"err(org.scalastyle.scalariform.ImportGroupingChecker)\",\n\"err(org.scalastyle.scalariform.UppercaseLChecker)\",\n\"err(org.scalastyle.scalariform.VarFieldChecker)\",\n\"err(org.scalastyle.scalariform.LowercasePatternMatchChecker)\",\n\"err(org.scalastyle.scalariform.PublicMethodsHaveTypeChecker)\",\n\nWarnings -- Importants - Si présent : -1 point en global.\n\"warn(org.scalastyle.scalariform.ScalaDocChecker)\",\n\"warn(org.scalastyle.scalariform.ReturnChecker)\",\n\nWarnings -- Mineurs -- Si présents : -0.5 point en global. \n\"warn(org.scalastyle.file.FileTabChecker)\",\n\"warn(org.scalastyle.file.FileLengthChecker)\",\n\"warn(org.scalastyle.scalariform.SpacesAfterPlusChecker)\",\n\"warn(org.scalastyle.scalariform.SpacesBeforePlusChecker)\",\n\"warn(org.scalastyle.file.FileLineLengthChecker)\",\n\"warn(org.scalastyle.scalariform.ClassNamesChecker)\",\n\"warn(org.scalastyle.scalariform.ObjectNamesChecker)\",\n\"warn(org.scalastyle.scalariform.PackageObjectNamesChecker)\",\n\"warn(org.scalastyle.scalariform.ParameterNumberChecker)\",\n\"warn(org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker)\",\n\"warn(org.scalastyle.scalariform.Nodu la fin de l'upload de son fichier sur le serveur \n- Cas 6: Le reste des étudiants a lu la consigne correctement\n\n## Etape 1: Obtenir des archives WhitespaceAfterLeftBracketChecker)\",\n\"warn(org.scalastyle.scalariform.MethodLengthChecker)\",\n\"warn(org.scalastyle.scalariform.MethodNamesChecker)\",\n\"warn(org.scalastyle.scalariform.MultipleStringLiteralsChecker)\",\n\nWarnings -- Moyens -- Ne comptent pas pour le CP1\n\"warn(org.scalastyle.scalariform.RedundantIfChecker)\",\n\"warn(org.scalastyle.scalariform.SimplifyBooleanExpressionChecker)\",\n\nWarnings -- On en tient pas compte (vérifié par les tests)\n\"warn(org.scalastyle.scalariform.NotImplementedErrorUsage)\",\n\nWarnings -- Ne comptent pas, car pas activés normalement dans le si2scalastyle.xml\nDonc ne rentrent pas dans le calcul de la note.\n\"warn(org.scalastyle.file.HeaderMatchesChecker)\",\n\"warn(org.scalastyle.file.WhitespaceEndOfLineChecker)\",\n\"warn(org.scalastyle.scalariform.EqualsHashCodeChecker)\",\n\"err(org.scalastyle.scalariform.IllegalImportsChecker)\",\n\"warn(org.scalastyle.scalariform.MagicNumberChecker)\",\n\"warn(org.scalastyle.scalariform.NoCloneChecker)\",\n\"warn(org.scalastyle.scalariform.NoFinalizeChecker)\",\n\"warn(org.scalastyle.scalariform.CovariantEqualsChecker)\",\n\"warn(org.scalastyle.file.RegexChecker)\",\n\"warn(org.scalastyle.scalariform.NumberOfTypesChecker)\",\n\"warn(org.scalastyle.scalariform.CyclomaticComplexityChecker)\",\n\"warn(org.scalastyle.scalariform.IfBraceChecker)\",\n\"warn(org.scalastyle.scalariform.NumberOfMethodsInTypeChecker)\",\n\"warn(org.scalastyle.file.NewLineAtEofChecker)\",\n\"warn(org.scalastyle.file.NoNewLineAtEofChecker)\",\n\"warn(org.scalastyle.scalariform.WhileChecker)\",\n\"warn(org.scalastyle.scalariform.VarLocalChecker)\",\n\"warn(org.scalastyle.scalariform.TokenChecker)\",\n\"warn(org.scalastyle.scalariform.DeprecatedJavaChecker)\",\n\"warn(org.scalastyle.scalariform.UnderscoreImportChecker)\",\n\n\nLe code source de cette tâche est écrite dans un langage qui se nomme le JavaScript. Le code est accessible ici.\n\nCe script génère un fichier csv en sortie. Pour lier l’ID de l’étudiant à son nom. Nous partons d’un fichier csv contenant les éléments par étudiants que nous convertissons en json grâce au projet csvtojson. Une fois la donnée convertie en format JSON, il est facile de faire une requête de cette manière dans les données depuis JavaScript.\n\nvar jsonQuery = require('json-query')\nvar si2 = require('./SI2.json');\n\n\n//Récupère le nom de l'étudiant\njsonQuery('[NUMERO=17011558]', {\n        data: si2\n      }).value.NOM;\n\n//Récupère le prénom de l'étudiant\njsonQuery('[NUMERO=17011558]', {\n        data: si2\n      }).value.PRENOM;\n\n\nEtape 3: Mise en page de la sortie\n\nPour générer les fichiers de sorties des notes. J’utilise une bête macro dans excel qui produit un fichier html par groupe en utilisant une feuille de syle bootsrap\n\nSub exec()\n    Dim fso As Object\n    Set fso = CreateObject(\"Scripting.FileSystemObject\")\n\n    Dim Fileout As Object\n    Set Fileout = fso.CreateTextFile(\"E:\\g1.html\", True, False)\n    Fileout.Write BuildHTMLTable(Range(\"A1:F38\"))\n    Fileout.Close\n\n\nEnd Sub\n' Example function call: =BuildHTMLTable(A1:D5)\n\nPublic Function BuildHTMLTable(rng As Range) As String\n' Given a Range of Cells, build a Bootstrap HTML table, using the formatting\n' specified in the Excel cells. If \"header\" is specified to equal true, assumes\n' the first row in the table is a header row.\n    Dim last_r As Long: last_r = rng.Cells(1, 1).Row\n    Dim tds As New Collection\n    Dim txt As String\n    Dim isFirstRow As Boolean: isFirstRow = True\n    Dim cell As Range, r As Long\n    txt = \"<html><head><link href=\" & Chr(34)\n\n    txt = txt & \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" & Chr(34) & \" rel=\" & Chr(34) & \"stylesheet\" & Chr(34) & \" integrity=\" & Chr(34) & \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" & Chr(34) & \" crossorigin=\" & Chr(34) & \"anonymous\" & Chr(34) & \"><script src=\" & Chr(34) & \"https://code.jquery.com/jquery-3.1.1.slim.min.js\" & Chr(34) & \" integrity=\" & Chr(34) & \"sha384-A7FZj7v+d/sdmMqp/nOQwliLvUsJfDHW+k9Omg/a/EheAdgtzNs3hpfag6Ed950n\" & Chr(34) & \" crossorigin=\" & Chr(34) & \"anonymous\" & Chr(34) & \"></script><script src=\" & Chr(34) & \"https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js\" & Chr(34) & \" integrity=\" & Chr(34) & \"sha384-DztdAPBWPRXSA/3eYEEUWrWCy7G5KFbe8fFjk5JAIxUYHKkDx6Qin1DkWx51bBrb\" & Chr(34) & \" crossorigin=\" & Chr(34) & \"anonymous\" & Chr(34) & \"></script><script src=\" & Chr(34) & \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\" & Chr(34) & \" integrity=\" & Chr(34)\n    \n    txt = txt & \"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" & Chr(34) & \" crossorigin=\" & Chr(34) & \"anonymous\" & Chr(34) & \"></script>            <script src=\" & Chr(34) & \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.bundle.min.js\" & Chr(34) & \" integrity=\" & Chr(34) & \"sha384-feJI7QwhOS+hwpX2zkaeJQjeiwlhOP+SdQDqhgvvo1DsjtiSQByFdThsxO669S2D\" & Chr(34) & \" crossorigin=\" & Chr(34) & \"anonymous\" & Chr(34) & \"></script></head><body>\"\n\n\n    \n    txt = txt & \"<table class=\" & Chr(34) & _\n          \"table table-compressed table-striped\" & Chr(34) & \">\" & vbNewLine\n    For Each cell In rng\n        r = cell.Row\n        If (r <> last_r) Then\n            If isFirstRow Then\n                txt = txt & vbTab & \"<thead>\" & vbNewLine & BuildRow(tds, isFirstRow) & vbTab & _\n                                    \"</thead>\" & vbNewLine & vbTab & \"<tbody>\" & vbNewLine\n            Else\n                txt = txt & BuildRow(tds, isFirstRow)\n            End If\n            isFirstRow = False\n            Set tds = New Collection\n        End If\n        tds.Add cell.Text\n        last_r = r\n    Next\n    txt = txt & BuildRow(tds, isFirstRow)\n    txt = txt & vbTab & \"</tbody>\" & vbNewLine & \"</table>\" & vbNewLine\n    txt = txt & \"</head></html>\"\n    BuildHTMLTable = txt\nEnd Function\n\nPrivate Function BuildRow(tds As Collection, header As Boolean) As String\n    ' Build a single HTML row given a collection of tds\n    Dim txt As String: txt = vbTab & vbTab & \"<tr>\"\n    Dim start_tag As String, end_tag As String, td As Variant\n    If header Then\n        start_tag = \"<th>\"\n        end_tag = \"</th>\"\n    Else\n        start_tag = \"<td>\"\n        end_tag = \"</td>\"\n    End If\n    For Each td In tds\n        txt = txt & start_tag & td & end_tag\n    Next\n    txt = txt & \"</tr>\" & vbNewLine\n    BuildRow = txt\nEnd Function","id":"http://olivier.barais.fr/blog/posts/teaching/istic/l1/french/2018/01/22/Correction_Automatique_SPE_INFO2_L1_ISTIC","isoDate":"2018-01-21T23:00:00.000Z"},{"title":"Quelques règles pour l’installation des portables","link":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2017/09/11/Operation_portable_M2_ISTIC.html","pubDate":"2017-09-10T22:00:00.000Z","author":"Olivier Barais","content":"<p>Hello très chers étudiants,</p>\n\n<p>Pour la quatrième année, nous experimentons l’usage des TPs pour les M2. Nous sommes partis sur les configurations suivantes<a href=\"http://www8.hp.com/fr/fr/products/laptops/product-detail.html?oid=5405400#!tab=specs\">Probook 650 avec 8GO de Ram et un I3</a></p>\n\n<p>###Etape 0: Install OS###</p>\n\n<p>Pour l’install, tout marche très bien avec ubuntu 16.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez <a href=\"http://www.ubuntu.com/download/desktop\">Ubuntu Desktop 16.04 en version 64bit et Desktop</a>. Créez votre clé ucb avec par exemple <a href=\"http://unetbootin.sourceforge.net/\">unetbootin</a>. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)</p>\n\n<!--more-->\n\n<p>Au démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.</p>\n\n<p>Si certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement <a href=\"https://www.google.fr/search?q=msdn+aa+istic&amp;oq=msdn+aa+istic&amp;aqs=chrome..69i57.6842j0j7&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8\">MSDN AA</a> qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .</p>\n\n<p>Il est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.</p>\n\n<p>Sous ubuntu, quand il est installé.</p>\n\n<p>###Etape 1: Java et autres\nInstallez les paquets suviants:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>nano git openjdk-8-jdk openjdk-8-doc maven inkscape</code></pre></figure>\n\n<p>Installer aussi la JDK Oracle pour GLI</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>add-apt-repository ppa:webupd8team/java\n<span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>oracle-java8-installer</code></pre></figure>\n\n<p>###Etape 2: Eclipse</p>\n\n<p>Téléchargez eclipse pour <a href=\"http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/technology/epp/downloads/release/oxygen/R/eclipse-java-oxygen-R-linux-gtk-x86_64.tar.gz\">Java developer</a> en version 64 et dezipper le par exemple dans /opt/eclipse</p>\n\n<p>###Etape 3: Smartgit\nInstallez <a href=\"http://www.syntevo.com/smartgit/\">Smartgit</a></p>\n\n<p>###Etape 4: NodeJS</p>\n\n<p>Installez nodejs au travers de nvm</p>\n\n<p>Installer nvm (node version manager)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">curl <span class=\"nt\">-o-</span> https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash</code></pre></figure>\n\n<p>The script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).</p>\n\n<p>Start a new Terminal</p>\n\n<p>Installez les paquets nodejs.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nvm <span class=\"nb\">install </span>node\n</code></pre></div></div>\n\n<p>###Etape 5: VisualVM</p>\n\n<p><a href=\"http://visualvm.java.net/eclipse-launcher.html\">VisualVM</a></p>\n\n<p>###Etape 6: InteliJ\nInstallez <a href=\"http://www.jetbrains.com/idea/\">IntelliJ</a> dans /opt</p>\n\n<p>###Etape 7: Docker</p>\n\n<p>Installez Docker</p>\n\n<p>Update the apt package index:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install packages to allow apt to use a repository over HTTPS:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install</span> <span class=\"se\">\\</span>\n    apt-transport-https <span class=\"se\">\\</span>\n    ca-certificates <span class=\"se\">\\</span>\n    curl <span class=\"se\">\\</span>\n    software-properties-common\n</code></pre></div></div>\n\n<p>Add Docker’s official GPG key:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class=\"nb\">sudo </span>apt-key add -\n</code></pre></div></div>\n\n<p>Verify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-key fingerprint 0EBFCD88\n</code></pre></div></div>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 2017-02-22\n</code></pre></div></div>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>add-apt-repository <span class=\"se\">\\</span>\n   <span class=\"s2\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class=\"se\">\\</span><span class=\"s2\">\n   </span><span class=\"si\">$(</span>lsb_release <span class=\"nt\">-cs</span><span class=\"si\">)</span><span class=\"s2\"> </span><span class=\"se\">\\</span><span class=\"s2\">\n   stable\"</span>\n</code></pre></div></div>\n\n<p>INSTALL DOCKER CE</p>\n\n<p>Update the apt package index.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get update\n</code></pre></div></div>\n\n<p>Install the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>docker-ce\n</code></pre></div></div>\n\n<p>Pour vérifier que tout est ok</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nv\">$ </span><span class=\"nb\">sudo </span>docker run <span class=\"nt\">-i</span> <span class=\"nt\">-t</span> ubuntu /bin/bash </code></pre></figure>\n<p>Cette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur <a href=\"http://fr.wikipedia.org/wiki/Docker_(Syst%C3%A8me_de_conteneur_Linux)\\\">docker</a></p>\n\n<p>###Etape 8: Wifi ISTIC</p>\n<ol>\n  <li>\n    <p>Configuez eduroam suivant le <a href=\"http://www.eduroam.fr/conf_supplicants/\">tuto suivant</a>.</p>\n  </li>\n  <li>\n    <p>RDV sur <a href=\"http://istic-public.istic.univ-rennes1.fr/\">istic-public</a> pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:</p>\n  </li>\n</ol>\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo</span> /sbin/ifconfig </code></pre></figure>\n<p>prendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.</p>\n\n<p>###Etape 9 Utiliser les imprimantes de l’ISTIC</p>\n\n<ul>\n  <li>Vérifiez que cups est installé</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>cups</code></pre></figure>\n\n<ul>\n  <li>éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">ServerName printhost.istic.univ-rennes1.fr</code></pre></figure>\n\n<p>pour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free</p>\n\n<p>###Etape 10: Bookmark services utiles\n<a href=\"http://vm.istic.univ-rennes1.fr\">vm istic</a></p>\n\n<p>###Petit Problème: WIFI et autres</p>\n\n<p>####Wifi Pour installer le WIFI. Pluggez vous à un réseau filaire.\nPuis tapez les commandes suivantes</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>firmware-b43-installer\n<span class=\"nb\">sudo </span>modprobe b43\n<span class=\"nb\">sudo </span>modprobe <span class=\"nt\">-r</span> b43\n<span class=\"nb\">sudo </span>modprobe b43</code></pre></figure>\n\n<p>####Certificat incorrect pour OpenJDK (poblème Maven)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"> <span class=\"nb\">sudo </span>update-ca-certificates </code></pre></figure>\n\n<p>####Problème ACPI (PC qui ne s’éteint pas)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\"><span class=\"nb\">sudo </span>nano <span class=\"nt\">-w</span> /boot/grub/menu.cfg\n<span class=\"c\">#Puis enlever tous les paramères, noacpi, noapic ...</span></code></pre></figure>","contentSnippet":"Hello très chers étudiants,\n\nPour la quatrième année, nous experimentons l’usage des TPs pour les M2. Nous sommes partis sur les configurations suivantesProbook 650 avec 8GO de Ram et un I3\n\n###Etape 0: Install OS###\n\nPour l’install, tout marche très bien avec ubuntu 16.04. Pour ceux qui ne l’ont jamais installé. Récupérez une clé usb, téléchargez Ubuntu Desktop 16.04 en version 64bit et Desktop. Créez votre clé ucb avec par exemple unetbootin. Choisissez DiskImage et l’iso que vous avez téléchargé et sélectionnez en bas votre clé usb, c’est parti. (10 mins de travail, un reboot et c’est bon)\n\n\n\nAu démarrage du PC. Appuyez sur la touche [Echap] puis [F9] et séléctionnez la clé usb pour bootez dessus. Installez ubuntu sur l’ensemble du disque.\n\nSi certains veulent avoir une installation windows. C’est possible l’istic dispose d’un abonnement MSDN AA qui vous donne accès aux licences des princiaux OS des Microsoft. Dans ce cas commencez par l’install de Windows. Puis installez ubuntu ensuite en demandant un split du disque du type 120 Go pour Windows et 200 pour linux. .\n\nIl est nécessaire de disposer d’une installation linux pour les TPs sans être dans une machine virtuelle.\n\nSous ubuntu, quand il est installé.\n\n###Etape 1: Java et autres\nInstallez les paquets suviants:\n\nsudo apt-get install nano git openjdk-8-jdk openjdk-8-doc maven inkscape\n\nInstaller aussi la JDK Oracle pour GLI\n\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\n###Etape 2: Eclipse\n\nTéléchargez eclipse pour Java developer en version 64 et dezipper le par exemple dans /opt/eclipse\n\n###Etape 3: Smartgit\nInstallez Smartgit\n\n###Etape 4: NodeJS\n\nInstallez nodejs au travers de nvm\n\nInstaller nvm (node version manager)\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash\n\nThe script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).\n\nStart a new Terminal\n\nInstallez les paquets nodejs.\n\nnvm install node\n\n\n###Etape 5: VisualVM\n\nVisualVM\n\n###Etape 6: InteliJ\nInstallez IntelliJ dans /opt\n\n###Etape 7: Docker\n\nInstallez Docker\n\nUpdate the apt package index:\n\nsudo apt-get update\n\n\nInstall packages to allow apt to use a repository over HTTPS:\n\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n\n\nAdd Docker’s official GPG key:\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n\nVerify that the key fingerprint is 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88.\n\nsudo apt-key fingerprint 0EBFCD88\n\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\n\nINSTALL DOCKER CE\n\nUpdate the apt package index.\n\nsudo apt-get update\n\n\nInstall the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.\n\nsudo apt-get install docker-ce\n\n\nPour vérifier que tout est ok\n\n $ sudo docker run -i -t ubuntu /bin/bash \nCette dernière commande télécharge un conteneur ubuntu minimal et démarre ce container. Pour plus de documentation sur docker\n\n###Etape 8: Wifi ISTIC\n\n  \n    Configuez eduroam suivant le tuto suivant.\n  \n  \n    RDV sur istic-public pour enregistrer votre mac adresse que vous pouvez récupérer à l’aide de la commande suivante:\n  \n\n sudo /sbin/ifconfig \nprendre ‘HWaddr XX:XX:XX:XX:XX:XX’ de l’interface wlan0.\n\n###Etape 9 Utiliser les imprimantes de l’ISTIC\n\n\n  Vérifiez que cups est installé\n\n\nsudo apt-get update\nsudo apt-get install cups\n\n\n  éditer le fichier /etc/cups/client.conf et ajouter la ligne suivante\n\n\nServerName printhost.istic.univ-rennes1.fr\n\npour imprimer, être connecté aux réseaux Wifsic ou Wifsic-free\n\n###Etape 10: Bookmark services utiles\nvm istic\n\n###Petit Problème: WIFI et autres\n\n####Wifi Pour installer le WIFI. Pluggez vous à un réseau filaire.\nPuis tapez les commandes suivantes\n\nsudo apt-get update\nsudo apt-get install firmware-b43-installer\nsudo modprobe b43\nsudo modprobe -r b43\nsudo modprobe b43\n\n####Certificat incorrect pour OpenJDK (poblème Maven)\n\n sudo update-ca-certificates \n\n####Problème ACPI (PC qui ne s’éteint pas)\n\nsudo nano -w /boot/grub/menu.cfg\n#Puis enlever tous les paramères, noacpi, noapic ...","id":"http://olivier.barais.fr/blog/posts/teaching/istic/m2/french/2017/09/11/Operation_portable_M2_ISTIC","isoDate":"2017-09-10T22:00:00.000Z"},{"title":"Analyser et transformer du code Java avec Spoon","link":"https://torgen-engineering.blogspot.com/2017/11/analyser-et-transformer-du-code-java.html","pubDate":"2017-11-08T20:16:00.000Z","author":"Anonymous","content":"Ce billet est sous licence <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"license\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br /><br />Le code de ce billet est disponible <a href=\"https://github.com/arnobl/torgen/tree/master/staticanalysisspoon\" target=\"_blank\">ici</a>. <br />Écrire du code c'est bien. Avoir des outils qui analysent automatiquement ce que l'on écrit pour y trouver des problèmes et éventuellement les corriger, c'est mieux. Est-il nécessaire de rappeler qu'un langage tout seul ne sert à rien  s'il n'est pas accompagné d'un écosystème composé d'outils visant à  faciliter la vie des développeurs utilisant ledit langage ?<br />De la même manière, faire évoluer  du code est un processus crucial dans la vie d'un logiciel, mais coûteux si réalisé manuellement : au hasard des récentes sorties, n'avez jamais pensé à faire migrer une suite de tests JUnit4 vers JUnit5 mais abandonné devant la charge de travail que cela supposerait ? Et si un outil le faisait pour vous ?<br /><br />La réalisation de telles opérations requière des analyseurs de code. On parle : d'analyse statique lorsque le code est analysé sans être exécuté (par exemple, identifier les classes dont le nom ne respecte pas les conventions de nommage Java) ; d'analyse dynamique lorsque le code est analysé pendant son exécution (par exemple, mesurer la couverture de code consiste à analyser pendant son exécution les instructions couvertes par des tests). On s'intéresse ici à l'analyse statique.<br />Les analyseurs de code commencent par transformer en mémoire le texte du code en un arbre syntaxique abstrait (AST -- <i>Abstract Syntax Tree</i>) répresentant la structure du code pour faciliter son étude. Ils parcourent ensuite cet AST pour réaliser des analyses et transformations.<br /><br /><a href=\"https://github.com/INRIA/spoon\">Spoon</a> est une librairie open-source Java permettant d'analyser et de transformer du code Java. Ce billet vise à introduire l'écriture d'analyseurs statiques et de transformateurs de code avec Spoon et au travers de quelques cas d'usage, en l’occurrence : détecter des potentiels problèmes dans du code Java ; ré-usiner (\"<i>refactorer</i>\") du code Java pour enlever ces problèmes.<br /><br />Spoon est, entre autres, disponible sur le dépôt Maven Central ce qui permet de l'importer facilement dans un projet Maven : <br /><br /><div class=\"gistLoad\" data-id=\"044339e41889ef7b98250b88a4d147f6\" id=\"gist-044339e41889ef7b98250b88a4d147f6\" style=\"text-align: justify;\">Chargement ....</div><h3>Écrire un premier analyseur de code : détecter des tests JUnit non annotés avec @Test</h3>Le premier analyseur que nous allons développer permettra de détecter les tests JUnit qui ne sont pas annotés avec l'annotation <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Test</span>. <br />Pour commencer, il est nécessaire d'écrire un processeur qui va s'intéresser à un type d'élements de l'AST ; dans notre cas il s'agit des méthodes (<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">CtMethod</span> en Spoon). Le principe de cet analyseur est le suivant : pour chaque méthode analysée, on regarde si elle semble être un test et si elle possède l'annotation <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Test</span>. Si cette annotation est manquante, elle sera alors ajoutée.<br />Un processeur de méthodes se déclare ainsi :<br /><div class=\"gistLoad\" data-id=\"d0da2ade8126032c07f8fda7adf0a9c2\" id=\"gist-d0da2ade8126032c07f8fda7adf0a9c2\" style=\"text-align: justify;\">Chargement ....</div>Il est alors nécessaire d’implémenter deux opérations provenant de <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">AbstractProcessor</span> : la fonction <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">isToBeProcessed</span> permet de déterminer sur la méthode courante (celle qui est actuellement analysée) est une méthode de test sans annotation <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">@Test </span>; la méthode <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">process</span> qui va ré-usiner cette méthode (si elle est identifiée comme erronée par <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">isToBeProcessed</span>) en lui ajoutant l'annotation manquante.<br />Concernant <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">isToBeProcessed</span>, une méthode peut être considérée comme étant une méthode de test si elle est publique, non statique, <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">void</span>, et si son nom commence par '<span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">test</span>' :  <br /><div class=\"gistLoad\" data-id=\"0b18c027010b991be959e80b199b2232\" id=\"gist-0b18c027010b991be959e80b199b2232\" style=\"text-align: justify;\">Chargement ....</div>Si <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">isToBeProcessed</span> retourne <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">true</span>, alors la méthode analysée sera traitée par <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">process</span> qui va la ré-usiner en y ajoutant l'annotation manquante :  <br /><div class=\"gistLoad\" data-id=\"2f119ec20b3ac0f3ba01d6570ae6f72e\" id=\"gist-2f119ec20b3ac0f3ba01d6570ae6f72e\" style=\"text-align: justify;\">Chargement ....</div>Il est maintenant temps de tester cet analyseur. Pour cela, il faut fournir à Spoon les analyseurs (les processeurs) à utiliser, le code à analyser et quelques paramètres :   <br /><div class=\"gistLoad\" data-id=\"9139122d5ad4d6c20d9f99338a93d69e\" id=\"gist-9139122d5ad4d6c20d9f99338a93d69e\" style=\"text-align: justify;\">Chargement ....</div>Notre fichier de test -- c'est le cas de le dire -- est le suivant :  <br /><div class=\"gistLoad\" data-id=\"f71d63dbf5b734be2252bb24081550e4\" id=\"gist-f71d63dbf5b734be2252bb24081550e4\" style=\"text-align: justify;\">Chargement ....</div>L'exécution du programme produit en sortie des fichiers Java correspondant au code ré-usiné :  <br /><div class=\"gistLoad\" data-id=\"dcf889b808d4ae522a6b0f0d85340426\" id=\"gist-dcf889b808d4ae522a6b0f0d85340426\" style=\"text-align: justify;\">Chargement ....</div><h3>Un second analyseur de code : détecter des <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try/catch</span> inutiles dans des tests JUnit et les supprimer</h3>Une mauvaise pratique courante en JUnit consiste à utiliser des <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try / catch</span> dans les méthodes de test, par exemple :  <br /><div class=\"gistLoad\" data-id=\"79ec433e8bc9d9b38ec48e06d1f35a58\" id=\"gist-79ec433e8bc9d9b38ec48e06d1f35a58\" style=\"text-align: justify;\">Chargement ....</div>Le <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">fail</span> est ici inutile car sans le <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try / catch</span> le test échouera de toute façon si une exception est levée. Le but de ce second analyseur est de détecter ce type de code et de le supprimer (car il est inutile).<br /><br />Dans un premier temps, il faut détecter les <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try/catch</span> inutiles. Pour cela, on va s'intéresser aux méthodes de test possédant un <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try/catch</span> et dont tous les blocs <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">catch</span> contiennent un appel à la méthode <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">fail</span> :<br /><div class=\"gistLoad\" data-id=\"6846db905ce08b0ccbd7f615e90b641b\" id=\"gist-6846db905ce08b0ccbd7f615e90b641b\" style=\"text-align: justify;\">Chargement ....</div>Ensuite, la méthode <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">process</span> va supprimer le bloc <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try / catch</span> concerné et le remplacer par le contenu du bloc <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">try</span>. Les exceptions \"attrapées\" sont également ajoutées à la méthode de test : <br /><div class=\"gistLoad\" data-id=\"6bf0f08bc2f9aa29e06e9b2c1f3d4097\" id=\"gist-6bf0f08bc2f9aa29e06e9b2c1f3d4097\" style=\"text-align: justify;\">Chargement ....</div>Ce ré-usinage est un peu naïf -- c'est une démonstration -- dans le sens où le contenu des blocs <span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">catch</span> est complétement perdu et les exceptions devraient être ajoutées aux méthodes de tests parentes si la méthode de test courante est une surcharge.<br /><br />L'utilisation de ce nouvel analyseur se combine simplement au premier :  <br /><div class=\"gistLoad\" data-id=\"acc67e6803e5984e4f66d998b24e5099\" id=\"gist-acc67e6803e5984e4f66d998b24e5099\" style=\"text-align: justify;\">Chargement ....</div>En sortie, le ré-usinage produit le code suivant :  <br /><div class=\"gistLoad\" data-id=\"799f35edeaba93cad2bb7011be55838d\" id=\"gist-799f35edeaba93cad2bb7011be55838d\" style=\"text-align: justify;\">Chargement ....</div>Pour toutes informations complémentaires et formations, vous pouvez contacter <a href=\"https://github.com/INRIA/spoon#spoon\" target=\"_blank\">les développeurs (français)</a> de Spoon. Si vous êtes situé dans le grand ouest, vous pouvez également <a href=\"http://people.irisa.fr/Arnaud.Blouin/consulting.html\" target=\"_blank\">me contacter</a>.<script src=\"https://cdn.rawgit.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script>","contentSnippet":"Ce billet est sous licence Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.Le code de ce billet est disponible ici. Écrire du code c'est bien. Avoir des outils qui analysent automatiquement ce que l'on écrit pour y trouver des problèmes et éventuellement les corriger, c'est mieux. Est-il nécessaire de rappeler qu'un langage tout seul ne sert à rien  s'il n'est pas accompagné d'un écosystème composé d'outils visant à  faciliter la vie des développeurs utilisant ledit langage ?De la même manière, faire évoluer  du code est un processus crucial dans la vie d'un logiciel, mais coûteux si réalisé manuellement : au hasard des récentes sorties, n'avez jamais pensé à faire migrer une suite de tests JUnit4 vers JUnit5 mais abandonné devant la charge de travail que cela supposerait ? Et si un outil le faisait pour vous ?La réalisation de telles opérations requière des analyseurs de code. On parle : d'analyse statique lorsque le code est analysé sans être exécuté (par exemple, identifier les classes dont le nom ne respecte pas les conventions de nommage Java) ; d'analyse dynamique lorsque le code est analysé pendant son exécution (par exemple, mesurer la couverture de code consiste à analyser pendant son exécution les instructions couvertes par des tests). On s'intéresse ici à l'analyse statique.Les analyseurs de code commencent par transformer en mémoire le texte du code en un arbre syntaxique abstrait (AST -- Abstract Syntax Tree) répresentant la structure du code pour faciliter son étude. Ils parcourent ensuite cet AST pour réaliser des analyses et transformations.Spoon est une librairie open-source Java permettant d'analyser et de transformer du code Java. Ce billet vise à introduire l'écriture d'analyseurs statiques et de transformateurs de code avec Spoon et au travers de quelques cas d'usage, en l’occurrence : détecter des potentiels problèmes dans du code Java ; ré-usiner (\"refactorer\") du code Java pour enlever ces problèmes.Spoon est, entre autres, disponible sur le dépôt Maven Central ce qui permet de l'importer facilement dans un projet Maven : Chargement ....Écrire un premier analyseur de code : détecter des tests JUnit non annotés avec @TestLe premier analyseur que nous allons développer permettra de détecter les tests JUnit qui ne sont pas annotés avec l'annotation @Test. Pour commencer, il est nécessaire d'écrire un processeur qui va s'intéresser à un type d'élements de l'AST ; dans notre cas il s'agit des méthodes (CtMethod en Spoon). Le principe de cet analyseur est le suivant : pour chaque méthode analysée, on regarde si elle semble être un test et si elle possède l'annotation @Test. Si cette annotation est manquante, elle sera alors ajoutée.Un processeur de méthodes se déclare ainsi :Chargement ....Il est alors nécessaire d’implémenter deux opérations provenant de AbstractProcessor : la fonction isToBeProcessed permet de déterminer sur la méthode courante (celle qui est actuellement analysée) est une méthode de test sans annotation @Test ; la méthode process qui va ré-usiner cette méthode (si elle est identifiée comme erronée par isToBeProcessed) en lui ajoutant l'annotation manquante.Concernant isToBeProcessed, une méthode peut être considérée comme étant une méthode de test si elle est publique, non statique, void, et si son nom commence par 'test' :  Chargement ....Si isToBeProcessed retourne true, alors la méthode analysée sera traitée par process qui va la ré-usiner en y ajoutant l'annotation manquante :  Chargement ....Il est maintenant temps de tester cet analyseur. Pour cela, il faut fournir à Spoon les analyseurs (les processeurs) à utiliser, le code à analyser et quelques paramètres :   Chargement ....Notre fichier de test -- c'est le cas de le dire -- est le suivant :  Chargement ....L'exécution du programme produit en sortie des fichiers Java correspondant au code ré-usiné :  Chargement ....Un second analyseur de code : détecter des try/catch inutiles dans des tests JUnit et les supprimerUne mauvaise pratique courante en JUnit consiste à utiliser des try / catch dans les méthodes de test, par exemple :  Chargement ....Le fail est ici inutile car sans le try / catch le test échouera de toute façon si une exception est levée. Le but de ce second analyseur est de détecter ce type de code et de le supprimer (car il est inutile).Dans un premier temps, il faut détecter les try/catch inutiles. Pour cela, on va s'intéresser aux méthodes de test possédant un try/catch et dont tous les blocs catch contiennent un appel à la méthode fail :Chargement ....Ensuite, la méthode process va supprimer le bloc try / catch concerné et le remplacer par le contenu du bloc try. Les exceptions \"attrapées\" sont également ajoutées à la méthode de test : Chargement ....Ce ré-usinage est un peu naïf -- c'est une démonstration -- dans le sens où le contenu des blocs catch est complétement perdu et les exceptions devraient être ajoutées aux méthodes de tests parentes si la méthode de test courante est une surcharge.L'utilisation de ce nouvel analyseur se combine simplement au premier :  Chargement ....En sortie, le ré-usinage produit le code suivant :  Chargement ....Pour toutes informations complémentaires et formations, vous pouvez contacter les développeurs (français) de Spoon. Si vous êtes situé dans le grand ouest, vous pouvez également me contacter.","id":"tag:blogger.com,1999:blog-2959571653801029104.post-8821094220451993714","isoDate":"2017-11-08T20:16:00.000Z"},{"title":"How to bring undo/redo features to your user interfaces","link":"https://torgen-engineering.blogspot.com/2016/05/how-to-bring-undoredo-features-to-your.html","pubDate":"2016-05-11T11:51:00.000Z","author":"Anonymous","content":"<div style=\"text-align: justify;\">This post is licensed under a <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"license\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</div><h3 style=\"text-align: justify;\">&nbsp;Undo / Redo in graphical toolkits</h3><div style=\"text-align: justify;\">If you develop user interfaces (UI) since a while, in particular in Java (JavaFX, Java Swing), you probably know that integrating undo/redo facilities in an application has always been a mess. Either no undo/redo support is provided by the graphical toolkit (<i>e.g.</i> JavaFX) or the support provided by the toolkit is not really flexible, expressive (<i>e.g.</i> <a href=\"https://docs.oracle.com/javase/7/docs/api/javax/swing/undo/UndoManager.html\" target=\"_blank\">Java Swing</a>).&nbsp;</div><div style=\"text-align: justify;\">Undo/redo is, however, a corner-stone of the development of UIs: users need to be able to cancel or re-execute the actions they performed on the UI; developers need dedicated features to ease the undo/redo support in their applications.</div><div style=\"text-align: justify;\">But no, if graphical toolkits make steps forward on many aspects of the development of UIs during the last decade, some of them (<a href=\"https://doc.qt.io/qt-5/qundocommand.html\" target=\"_blank\">not Qt</a>) still ignore this core principle <a href=\"https://books.google.com/books?hl=fr&amp;lr=&amp;id=PbD5lXI_d9AC&amp;oi=fnd&amp;pg=PA1&amp;ots=G7ngmglEO1&amp;sig=aH5TcmQiqdsFxVml9PdXvRwAS4k\" target=\"_blank\">that exists since the 80's</a>, <i>i.e.</i> users should be able to cancel and re-execute, when appropriate, their actions.</div><div style=\"text-align: justify;\">What is in fact the most surprising to me is  that developing a basic undo / redo manager is really simple, as explained in this post.<br /><h3>Undoable objects </h3></div><div class=\"gistLoad\" data-id=\"cfc5e4dbb21b265647af\" id=\"gist-cfc5e4dbb21b265647af\" style=\"text-align: justify;\">Loading ....</div>The first step consists of defining the concept of <i>Undoable</i> objects through the interface defined above. The <i>undo</i> and <i>redo</i> methods respectively cancels and re-executes the action. The <i>getUndoRedoName</i> method is optional. It returns a brief message that describes the current action. <a href=\"https://github.com/arnobl/Malai/blob/master/malai-core/org.malai.swing/src/main/org/malai/swing/instrument/library/UndoRedoManager.java#L105\" target=\"_blank\">I  usually use this feature to update the name or the tooltip of the undo  and redo buttons/menus according to the last undoable action</a>. This permits to know what we are going to cancel or re-execute.<br /><h3>Collecting undoable objects </h3><div class=\"gistLoad\" data-id=\"d8693a3f0be5b23a785e\" id=\"gist-d8693a3f0be5b23a785e\" style=\"text-align: justify;\">Loading ....<br /><br /></div><div style=\"text-align: justify;\"><script src=\"https://cdn.rawgit.com/git-m1chael-dg/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script></div>Based on the <i>Undoable</i> interface, we can now define an undo/redo collector, called <i><span class=\"pl-en\">UndoCollector</span></i>:  a singleton that gathers and manages all the undoable objects produced  by the application. This collector is composed of two stacks: the stack  of undoable objects (<i>undo</i>), and the stack of readoable objects, <i>i.e.</i> undoable objects that have been undone and that can be redone (<i>redo</i>). A little reminder: <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html\" target=\"_blank\">in Java do not use the <i>Stack</i> class anymore but the <i>Deque</i> interface</a>. The <i>sizeMax</i> attribute permits to limit the number of objects stored in the collector. So, when adding an <i>Undoable</i> object to the collector (line 25), some old undoable objects already stored may be removed depending on the value of <i>sizeMax</i>, the undoable object is put into the stack of undoable objects, and the stack of redoable objects is flushed.<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://4.bp.blogspot.com/-rsb5O98g9iE/VzLw5mqJkQI/AAAAAAAAAOI/yjgm2MPE4AgsWMWtOsFsOMPTTaG_e15RgCK4B/s1600/stateMachineUndoRedo.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"640\" src=\"https://4.bp.blogspot.com/-rsb5O98g9iE/VzLw5mqJkQI/AAAAAAAAAOI/yjgm2MPE4AgsWMWtOsFsOMPTTaG_e15RgCK4B/s640/stateMachineUndoRedo.png\" width=\"433\" /></a></div><br />Flushed? Indeed, as depicted by the previous UML state machine, the stack of redoable objects must be flushed each time an object is undone or added to the undo/redo collector. When undoing an action, the undoable object is logically undone to be then moved from the <i>undo</i> stack to the <i>redo</i> stack. Same process with redo. Of course, <a href=\"http://alandix.com/academic/papers/undo92/undo.pdf\" target=\"_blank\">there exists various undo/redo models</a>, I detail here a simple one.<br /><h3>Defining undoable GUI commands</h3><h4>Defining GUI commands </h4><div class=\"gistLoad\" data-id=\"ba738af7ebe37898cd7f2f0be83a9c0f\" id=\"gist-ba738af7ebe37898cd7f2f0be83a9c0f\" style=\"text-align: justify;\">Loading ....<br /><br /></div>We now want to define undoable GUI commands. If you do not already encapsulate some code of the GUI controllers in GUI commands, you can simply start by defining the <i>Command</i> interface. The <i>canExecute</i> method is optional. I usually use it to check whether the command can be executed.<br />Then, instead of writing in a GUI controller something like that (where a dummy model is modified on a click on a JavaFX toggle button): <br /><div class=\"gistLoad\" data-id=\"0dca648991a4e1cdb81cd9b63eaaecf7\" id=\"gist-0dca648991a4e1cdb81cd9b63eaaecf7\" style=\"text-align: justify;\">Loading ....<br /><br /></div>You can write something like that (yes I know, it is verbose but there are many ways to shorten the code): <br /><div class=\"gistLoad\" data-id=\"985ff3e11967fed29110f4011abcf7a2\" id=\"gist-985ff3e11967fed29110f4011abcf7a2\" style=\"text-align: justify;\">Loading ....<br /><br /></div>where the <i>IsItTrueOrNotCommand</i> command is defined like that: <br /><div class=\"gistLoad\" data-id=\"0869ba13dc8ea5eb58765b9e03896d93\" id=\"gist-0869ba13dc8ea5eb58765b9e03896d93\" style=\"text-align: justify;\">Loading ....<br /><h4>Making a GUI command undoable</h4></div>We now want to make the <i>IsItTrueOrNotCommand</i> command undoable. To do that, we just have to let the <i>IsItTrueOrNotCommand</i> class implement the <i>Undoable</i> interface. The memento design pattern must be used to save to previous state of the object (line 10), as depicted in this new version of the command:<br /><div class=\"gistLoad\" data-id=\"2384eec64e3cc4bf8e4aaac3a7c6f77b\" id=\"gist-2384eec64e3cc4bf8e4aaac3a7c6f77b\" style=\"text-align: justify;\">Loading ....<br /><br /></div>We can now modify the controller to put the undoable command in the undo collector: <br /><div class=\"gistLoad\" data-id=\"283b91095395e86aed208d42bec707ad\" id=\"gist-283b91095395e86aed208d42bec707ad\" style=\"text-align: justify;\">Loading ....<br /><br /><br /></div>Finally, if you want the undo/redo buttons, menu items to be updated on changes of the undo collector, you can use the observer design pattern: let <i>UndoCollector</i> notify observers (widgets, controllers, etc.) about changes when an undoable objects is collected, undone, or redone.<br /><br />You can <a href=\"https://github.com/arnobl/latexdraw/tree/master/latexdraw-core/net.sf.latexdraw/src/main/net/sf/latexdraw/actions\" target=\"_blank\">find here a large set of (undoable) commands.</a> <script src=\"https://cdn.rawgit.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script>","contentSnippet":"This post is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&nbsp;Undo / Redo in graphical toolkitsIf you develop user interfaces (UI) since a while, in particular in Java (JavaFX, Java Swing), you probably know that integrating undo/redo facilities in an application has always been a mess. Either no undo/redo support is provided by the graphical toolkit (e.g. JavaFX) or the support provided by the toolkit is not really flexible, expressive (e.g. Java Swing).&nbsp;Undo/redo is, however, a corner-stone of the development of UIs: users need to be able to cancel or re-execute the actions they performed on the UI; developers need dedicated features to ease the undo/redo support in their applications.But no, if graphical toolkits make steps forward on many aspects of the development of UIs during the last decade, some of them (not Qt) still ignore this core principle that exists since the 80's, i.e. users should be able to cancel and re-execute, when appropriate, their actions.What is in fact the most surprising to me is  that developing a basic undo / redo manager is really simple, as explained in this post.Undoable objects Loading ....The first step consists of defining the concept of Undoable objects through the interface defined above. The undo and redo methods respectively cancels and re-executes the action. The getUndoRedoName method is optional. It returns a brief message that describes the current action. I  usually use this feature to update the name or the tooltip of the undo  and redo buttons/menus according to the last undoable action. This permits to know what we are going to cancel or re-execute.Collecting undoable objects Loading ....Based on the Undoable interface, we can now define an undo/redo collector, called UndoCollector:  a singleton that gathers and manages all the undoable objects produced  by the application. This collector is composed of two stacks: the stack  of undoable objects (undo), and the stack of readoable objects, i.e. undoable objects that have been undone and that can be redone (redo). A little reminder: in Java do not use the Stack class anymore but the Deque interface. The sizeMax attribute permits to limit the number of objects stored in the collector. So, when adding an Undoable object to the collector (line 25), some old undoable objects already stored may be removed depending on the value of sizeMax, the undoable object is put into the stack of undoable objects, and the stack of redoable objects is flushed.Flushed? Indeed, as depicted by the previous UML state machine, the stack of redoable objects must be flushed each time an object is undone or added to the undo/redo collector. When undoing an action, the undoable object is logically undone to be then moved from the undo stack to the redo stack. Same process with redo. Of course, there exists various undo/redo models, I detail here a simple one.Defining undoable GUI commandsDefining GUI commands Loading ....We now want to define undoable GUI commands. If you do not already encapsulate some code of the GUI controllers in GUI commands, you can simply start by defining the Command interface. The canExecute method is optional. I usually use it to check whether the command can be executed.Then, instead of writing in a GUI controller something like that (where a dummy model is modified on a click on a JavaFX toggle button): Loading ....You can write something like that (yes I know, it is verbose but there are many ways to shorten the code): Loading ....where the IsItTrueOrNotCommand command is defined like that: Loading ....Making a GUI command undoableWe now want to make the IsItTrueOrNotCommand command undoable. To do that, we just have to let the IsItTrueOrNotCommand class implement the Undoable interface. The memento design pattern must be used to save to previous state of the object (line 10), as depicted in this new version of the command:Loading ....We can now modify the controller to put the undoable command in the undo collector: Loading ....Finally, if you want the undo/redo buttons, menu items to be updated on changes of the undo collector, you can use the observer design pattern: let UndoCollector notify observers (widgets, controllers, etc.) about changes when an undoable objects is collected, undone, or redone.You can find here a large set of (undoable) commands.","id":"tag:blogger.com,1999:blog-2959571653801029104.post-8772114491853955090","isoDate":"2016-05-11T11:51:00.000Z"},{"title":"GUI Testing: how to compare JavaFX GUI snapshots to assess their graphical rendering","link":"https://torgen-engineering.blogspot.com/2015/12/gui-testing-how-to-compare-javafx-gui.html","pubDate":"2015-12-06T18:00:00.000Z","author":"Anonymous","content":"<div style=\"text-align: justify;\"><br /><b>All the code of this post is freely available <a href=\"https://github.com/arnobl/torgen/tree/master/jfx-testing-testFX-simple\" target=\"_blank\">here</a>.</b></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">This post is licensed under a <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"license\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</div><div style=\"text-align: justify;\"><div class=\"pubdate\"><br /></div></div><div style=\"text-align: justify;\">As explained in the <a href=\"http://torgen-engineering.blogspot.fr/2015/11/testing-javafx-applications-with-testfx.html\">previous post</a>, testing graphical user interfaces (GUI) requires different or additional testing features than those provided by object-oriented testing frameworks like <a href=\"http://junit.org/\">JUnit</a>. One specific features required to test GUIs is an automated process able to assess the graphical rendering of specific parts of the GUIs.</div><div style=\"text-align: justify;\">In this short post, I will show how to do that in JavaFX on top of <a href=\"http://torgen-engineering.blogspot.fr/2015/11/testing-javafx-applications-with-testfx.html\">TestFX, a GUI testing framework for JavaFX</a>.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">First, a picture comparison algorithm is required. I developed a very simple one that consists of comparing the pixels of each image:</div><div class=\"gistLoad\" data-id=\"a7c25f43f3a2f4be58da73196362ff83\" id=\"gist-a7c25f43f3a2f4be58da73196362ff83\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><span class=\"pl-c\">Then, JavaFX provides developers with a feature to take a <a href=\"https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#snapshot-javafx.scene.SnapshotParameters-javafx.scene.image.WritableImage-\">snapshot</a> of any <a href=\"https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html\">Node</a> (a node is a  graphical objet part of the scene graph that represents the GUI). The following operation is an example of how to produce a snapshot in a TestFX test or associated operation. As explained in the previous post, the </span><i><span class=\"pl-smi\">Platform</span><span class=\"pl-k\">.</span>runLater</i> is required to run some code within the JavaFX thread, otherwise an error will occur. The <i><span class=\"pl-smi\">WaitForAsyncUtils</span><span class=\"pl-k\">.</span>waitForFxEvents</i> is a TestFX instruction that just waits for the end of the export before executing the next instructions.</div><div class=\"gistLoad\" data-id=\"832182a56eeb2cff6394\" id=\"gist-832182a56eeb2cff6394\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">Before writing unit tests that compare snapshots, the production of the reference snapshots is of course required. This boring step has to be re-executed each time the graphical rendering of the node under test changes (similarly to a unit test that has to be updated on changes of the operation it tests). You can for instance place the reference snapshots in a dedicated folder like <i>src/resources/test/snapshots</i>.</div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\">Now, we can define a new assertion that assesses the similarity of a snapshot against the reference one.</div><div class=\"gistLoad\" data-id=\"8d0c19347299a7021c7a\" id=\"gist-8d0c19347299a7021c7a\" style=\"text-align: justify;\">Loading ....</div>Unit tests can now be written like this: <br /><div class=\"gistLoad\" data-id=\"e3e01a3cb941af99f189\" id=\"gist-e3e01a3cb941af99f189\" style=\"text-align: justify;\">Loading ....</div>This unit test just compares the reference snapshot  to the current snapshot of a node under test.  <script src=\"https://cdn.rawgit.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script>","contentSnippet":"All the code of this post is freely available here.This post is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.As explained in the previous post, testing graphical user interfaces (GUI) requires different or additional testing features than those provided by object-oriented testing frameworks like JUnit. One specific features required to test GUIs is an automated process able to assess the graphical rendering of specific parts of the GUIs.In this short post, I will show how to do that in JavaFX on top of TestFX, a GUI testing framework for JavaFX.First, a picture comparison algorithm is required. I developed a very simple one that consists of comparing the pixels of each image:Loading ....Then, JavaFX provides developers with a feature to take a snapshot of any Node (a node is a  graphical objet part of the scene graph that represents the GUI). The following operation is an example of how to produce a snapshot in a TestFX test or associated operation. As explained in the previous post, the Platform.runLater is required to run some code within the JavaFX thread, otherwise an error will occur. The WaitForAsyncUtils.waitForFxEvents is a TestFX instruction that just waits for the end of the export before executing the next instructions.Loading ....Before writing unit tests that compare snapshots, the production of the reference snapshots is of course required. This boring step has to be re-executed each time the graphical rendering of the node under test changes (similarly to a unit test that has to be updated on changes of the operation it tests). You can for instance place the reference snapshots in a dedicated folder like src/resources/test/snapshots.Now, we can define a new assertion that assesses the similarity of a snapshot against the reference one.Loading ....Unit tests can now be written like this: Loading ....This unit test just compares the reference snapshot  to the current snapshot of a node under test.","id":"tag:blogger.com,1999:blog-2959571653801029104.post-7852353078448433530","isoDate":"2015-12-06T18:00:00.000Z"},{"title":"Testing JavaFX applications with TestFX: an introduction","link":"https://torgen-engineering.blogspot.com/2015/11/testing-javafx-applications-with-testfx.html","pubDate":"2015-11-28T16:14:00.002Z","author":"Anonymous","content":"<div style=\"text-align: justify;\"><br /><b>All the code of this post is freely available <a href=\"https://github.com/arnobl/torgen/tree/master/jfx-testing-testFX-simple\" target=\"_blank\">here</a>.</b></div><div style=\"text-align: justify;\"><br /></div><div style=\"text-align: justify;\"><div class=\"copyright\">This post is licensed under a <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"license\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.<br /><div><div class=\"pubdate\"><br /></div></div><h3>On testing graphical user interfaces</h3>Testing graphical user interfaces (GUI) requires different or additional testing features than those provided by object-oriented testing frameworks like <a href=\"http://junit.org/\">JUnit</a>. GUIs <a href=\"https://hal.inria.fr/hal-01114724v2/document\">can be affected by various defects</a> such a widget not located at the expected position, a user interaction not working as expected, a widget not rendered as expected. Checking a GUI for such defects may thus involve different techniques: comparing screenshots to assess the rendering; checking some widgets' attributes; etc.<br />In this blog post, I will show how to test a basic GUI with <a href=\"https://github.com/TestFX/TestFX\">TestFX, a (very nice) GUI testing framework for JavaFX</a>. The application I will test is a very simple one that just uses several widgets to select a colour. The GUI of this application looks like that:<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-VscGzx-vvc0/VlhLM5wD0RI/AAAAAAAAANo/Gz90SBUVxT4/s1600/Capture%2Bdu%2B2015-11-27%2B13-19-36.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"https://2.bp.blogspot.com/-VscGzx-vvc0/VlhLM5wD0RI/AAAAAAAAANo/Gz90SBUVxT4/s1600/Capture%2Bdu%2B2015-11-27%2B13-19-36.png\" /></a></div>All the widgets of this GUI are linked each other to handle the same colour. The spinner modifies the opacity of the picked colour. The background of the text field is the picked colour. This text field displays the hexa code of the colour. This text field is editable to select another colour (that changes the colour of the picker).</div><div class=\"copyright\"><h3>Configuring TestFX</h3><div style=\"text-align: justify;\">The <a href=\"https://github.com/TestFX/TestFX/blob/master/README.md#gradle-and-maven\">readme file</a> of TestFX explains how to use it. I will use <a href=\"https://maven.apache.org/\">Maven</a> to add a dependency to TestFX and to get its jar files:</div></div></div><div class=\"gistLoad\" data-id=\"ea104b2ac0ff5d051f23\" id=\"gist-ea104b2ac0ff5d051f23\" style=\"text-align: justify;\">Loading ....</div><h3 style=\"text-align: justify;\">Writing a TestFX test class</h3><div style=\"text-align: justify;\">TestFX works with <a href=\"http://junit.org/\">JUnit</a>. A TestFX test class must extend the TestFX class <i>ApplicationTest</i>. This requires the implementation of the <i>start</i> operation that has to load  the FXML document under test:</div><div class=\"gistLoad\" data-id=\"d699d8e5fb64ec170f44\" id=\"gist-d699d8e5fb64ec170f44\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">A possible strategy to test a GUI consists of testing each FXML document separately. This may require the use of mocking features to isolate an FXML document and its controller from the other ones. I will write a blog post on that soon. For the moment, a single FXML document, <i>TestSimpleController</i>, is used, so that a single test class will be defined.</div><div style=\"text-align: justify;\">The <i>tearDown</i> operation is used here to clear all the possible key or mouse events that are still in progress at the end of each unit test. The <i>hideStage</i> operation closes the GUI after each test.</div><div style=\"text-align: justify;\">The <i>setUp</i> operation retrieves the widgets of the FXML document that will be used in the tests. I guess this step can be done in the <i>start</i> operation instead of using the <i>setUp</i> one. The <i>find</i> operation is just a shortcut to retrieve widgets. It relies on the very useful <i>lookup</i> testFX operation. The IDs defined in the FXML document are used for the retrieval.</div><div style=\"text-align: justify;\"><br /></div><h3 style=\"text-align: justify;\">Writing unit GUI tests</h3><div style=\"text-align: justify;\">The  test suite of this toy application is available <a href=\"https://github.com/arnobl/torgen/blob/master/jfx-testing-testFX-simple/src/test/java/torgen/TestSimpleController.java\">here</a>.</div><h4 style=\"text-align: justify;\">Testing a button </h4><div style=\"text-align: justify;\"></div><div style=\"text-align: justify;\">A click on the \"darker!\" button makes the picked colour... darker. Testing that consists of getting the picked colour, clicking on the button, and checking that the new colour is darker, as defined as follows: </div><div class=\"gistLoad\" data-id=\"4554e53dc22e60486d25\" id=\"gist-4554e53dc22e60486d25\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">The <i>waitForFxEvents</i> operation waits for the end of all the events in progress. This step is mandatory to avoid the execution of the assertions before the end of the user interactions.</div><div style=\"text-align: justify;\"></div><h4 style=\"text-align: justify;\">Testing a colour picker</h4><div style=\"text-align: justify;\">Several widgets are not supported by TestFX yet, such as  the colour picker. There are several ways to simulate a user that selects a colour. A user can click on the colour button and then pick a colour using either the mouse (by clicking on a colour of the palette) or the keyboard (by typing on the \"tab\" key to put the focus on the colour of the palette to select to then type on \"enter\").</div><div style=\"text-align: justify;\">The following <a href=\"https://en.wikipedia.org/wiki/Trait_%28computer_programming%29\">trait</a> defines a robot that can interact with a colour picker to select a colour. This trait is in fact a Java interface composed of one <a href=\"https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\">default method</a>. The Java 8 concept of default method permits the definition of traits, <i>i.e.</i> <a href=\"http://digitalcommons.ohsu.edu/cgi/viewcontent.cgi?article=1344&amp;context=csetech\">a composable (with other traits or classes) unit of behaviour that does not define any <span class=\"highlight selected\">state</span> variable</a>. One may note that the <a href=\"http://docs.scala-lang.org/tutorials/tour/traits.html\">Scala trait</a> goes beyond this  definition since it can have state variables (<i>i.e.</i> attributes).</div><div style=\"text-align: justify;\">TestFX and JUnit define their assertion and robot operations as static ones in some classes. I do not like <i>static</i> since it is not an object-oriented programming (OOP) concept. Instead, I prefer to define a trait that can be composed within  classes. It is fully OOP and avoids the annoying use of \"import static\".</div><div class=\"gistLoad\" data-id=\"e213697ae53153fddeba\" id=\"gist-e213697ae53153fddeba\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">To reuse the robot operations provided by TestFX, this <i>FxRobotColourPicker</i> trait extends the TestFX <i>FxRobotInterface</i> interface (yes, putting \"interface\" in the name of an interface is a bad coding practice). The <span class=\"pl-en\"><i>pickColour</i> operation just clicks on the colour picker's button to show the colour palette. Then, the \"tab\" and \"enter\" keys are used to select a colour. This procedure is far to be perfect since it </span><span class=\"pl-en\"><span class=\"pl-en\">always </span>selects the same colour and it does not assure that the same colour is not picked. If you have better solutions, please detail them in the comments.</span></div><div style=\"text-align: justify;\"><span class=\"pl-en\">Now, our testFX test class can reuse this trait and use <i>pickColour</i> in its unit tests, as illustrated as follows:</span></div><div class=\"gistLoad\" data-id=\"336d8e57f1fa32c2a551\" id=\"gist-336d8e57f1fa32c2a551\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">If in a test you must select a given colour with the colour picker, you can still use the <i>setValue</i> operation of the <i>ColorPicker</i> class. In this case, you must execute this instruction in the JavaFX thread using the <i>Platform.runLater</i> operation: </div><div class=\"gistLoad\" data-id=\"ee365e31dee2b2b790d9\" id=\"gist-ee365e31dee2b2b790d9\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\"><h4 style=\"text-align: justify;\">Testing a text field</h4></div><div style=\"text-align: justify;\">We now want to check that when a user enters a correct hexa code of a colour in the text field, this colour is automatically selected by the colour picker. To do so, we just have to simulate a user interaction with the text field using the <i>type</i> operation, as illustrated as follows:</div><div class=\"gistLoad\" data-id=\"3e22b20bfba1c3d6b4dd\" id=\"gist-3e22b20bfba1c3d6b4dd\" style=\"text-align: justify;\">Loading ....</div><h4 style=\"text-align: justify;\">Testing a spinner</h4><div style=\"text-align: justify;\">JavaFX recently implemented the <a href=\"https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Spinner.html\">spinner</a> widget. The spinner of this application just permits the editing of the opacity of the selected colour. TestFX does not support its testing yet. So, similarly to the colour picker we can define a trait to simulate the use of a spinner:</div><div class=\"gistLoad\" data-id=\"064b1fcefbb94234f29b\" id=\"gist-064b1fcefbb94234f29b\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">Unfortunately, I did not find any way to click on the increment or decrement buttons of the spinner. So, I withdrawn to a another solution: changing the value of the spinner using its value factory. Again, this solution is not perfect. If you have better ones, please detail them in the comments. We can now use this trait and write a test that uses the spinner: </div><div class=\"gistLoad\" data-id=\"4ee152e26f24b7c546da\" id=\"gist-4ee152e26f24b7c546da\" style=\"text-align: justify;\">Loading ....</div><h4 style=\"text-align: justify;\">Testing a combo box</h4><div style=\"text-align: justify;\">Same thing for the combo box. I defined a trait to interact with such a widget using the mouse and the keyboard: </div><div class=\"gistLoad\" data-id=\"049f71b61a3e4d20ee97\" id=\"gist-049f71b61a3e4d20ee97\" style=\"text-align: justify;\">Loading ....</div><div style=\"text-align: justify;\">Then, this trait can be used to write unit tests that involve the combo box of the application: </div><div class=\"gistLoad\" data-id=\"508e37aaf882a2a0881e\" id=\"gist-508e37aaf882a2a0881e\" style=\"text-align: justify;\">Loading ....</div><h3 style=\"text-align: justify;\">Conclusion</h3><div style=\"text-align: justify;\">In this post I show the basis to test JavaFX GUIs with TestFX. In real life, this process can be much more complex by involving  screenshots comparisons, dependencies between controllers, headless GUI testing, complex GUI configuration before the assertions, etc. I will explain how to do that with TestFX in next posts. <a href=\"https://github.com/arnobl/latexdraw/tree/master/latexdraw-core/net.sf.latexdraw/src/test/test/gui\">Here is a large and quite complex test suite</a> that tests a JavaFX application using TestFX.</div><div style=\"text-align: justify;\"><script src=\"https://cdn.rawgit.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script></div>","contentSnippet":"All the code of this post is freely available here.This post is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.On testing graphical user interfacesTesting graphical user interfaces (GUI) requires different or additional testing features than those provided by object-oriented testing frameworks like JUnit. GUIs can be affected by various defects such a widget not located at the expected position, a user interaction not working as expected, a widget not rendered as expected. Checking a GUI for such defects may thus involve different techniques: comparing screenshots to assess the rendering; checking some widgets' attributes; etc.In this blog post, I will show how to test a basic GUI with TestFX, a (very nice) GUI testing framework for JavaFX. The application I will test is a very simple one that just uses several widgets to select a colour. The GUI of this application looks like that:All the widgets of this GUI are linked each other to handle the same colour. The spinner modifies the opacity of the picked colour. The background of the text field is the picked colour. This text field displays the hexa code of the colour. This text field is editable to select another colour (that changes the colour of the picker).Configuring TestFXThe readme file of TestFX explains how to use it. I will use Maven to add a dependency to TestFX and to get its jar files:Loading ....Writing a TestFX test classTestFX works with JUnit. A TestFX test class must extend the TestFX class ApplicationTest. This requires the implementation of the start operation that has to load  the FXML document under test:Loading ....A possible strategy to test a GUI consists of testing each FXML document separately. This may require the use of mocking features to isolate an FXML document and its controller from the other ones. I will write a blog post on that soon. For the moment, a single FXML document, TestSimpleController, is used, so that a single test class will be defined.The tearDown operation is used here to clear all the possible key or mouse events that are still in progress at the end of each unit test. The hideStage operation closes the GUI after each test.The setUp operation retrieves the widgets of the FXML document that will be used in the tests. I guess this step can be done in the start operation instead of using the setUp one. The find operation is just a shortcut to retrieve widgets. It relies on the very useful lookup testFX operation. The IDs defined in the FXML document are used for the retrieval.Writing unit GUI testsThe  test suite of this toy application is available here.Testing a button A click on the \"darker!\" button makes the picked colour... darker. Testing that consists of getting the picked colour, clicking on the button, and checking that the new colour is darker, as defined as follows: Loading ....The waitForFxEvents operation waits for the end of all the events in progress. This step is mandatory to avoid the execution of the assertions before the end of the user interactions.Testing a colour pickerSeveral widgets are not supported by TestFX yet, such as  the colour picker. There are several ways to simulate a user that selects a colour. A user can click on the colour button and then pick a colour using either the mouse (by clicking on a colour of the palette) or the keyboard (by typing on the \"tab\" key to put the focus on the colour of the palette to select to then type on \"enter\").The following trait defines a robot that can interact with a colour picker to select a colour. This trait is in fact a Java interface composed of one default method. The Java 8 concept of default method permits the definition of traits, i.e. a composable (with other traits or classes) unit of behaviour that does not define any state variable. One may note that the Scala trait goes beyond this  definition since it can have state variables (i.e. attributes).TestFX and JUnit define their assertion and robot operations as static ones in some classes. I do not like static since it is not an object-oriented programming (OOP) concept. Instead, I prefer to define a trait that can be composed within  classes. It is fully OOP and avoids the annoying use of \"import static\".Loading ....To reuse the robot operations provided by TestFX, this FxRobotColourPicker trait extends the TestFX FxRobotInterface interface (yes, putting \"interface\" in the name of an interface is a bad coding practice). The pickColour operation just clicks on the colour picker's button to show the colour palette. Then, the \"tab\" and \"enter\" keys are used to select a colour. This procedure is far to be perfect since it always selects the same colour and it does not assure that the same colour is not picked. If you have better solutions, please detail them in the comments.Now, our testFX test class can reuse this trait and use pickColour in its unit tests, as illustrated as follows:Loading ....If in a test you must select a given colour with the colour picker, you can still use the setValue operation of the ColorPicker class. In this case, you must execute this instruction in the JavaFX thread using the Platform.runLater operation: Loading ....Testing a text fieldWe now want to check that when a user enters a correct hexa code of a colour in the text field, this colour is automatically selected by the colour picker. To do so, we just have to simulate a user interaction with the text field using the type operation, as illustrated as follows:Loading ....Testing a spinnerJavaFX recently implemented the spinner widget. The spinner of this application just permits the editing of the opacity of the selected colour. TestFX does not support its testing yet. So, similarly to the colour picker we can define a trait to simulate the use of a spinner:Loading ....Unfortunately, I did not find any way to click on the increment or decrement buttons of the spinner. So, I withdrawn to a another solution: changing the value of the spinner using its value factory. Again, this solution is not perfect. If you have better ones, please detail them in the comments. We can now use this trait and write a test that uses the spinner: Loading ....Testing a combo boxSame thing for the combo box. I defined a trait to interact with such a widget using the mouse and the keyboard: Loading ....Then, this trait can be used to write unit tests that involve the combo box of the application: Loading ....ConclusionIn this post I show the basis to test JavaFX GUIs with TestFX. In real life, this process can be much more complex by involving  screenshots comparisons, dependencies between controllers, headless GUI testing, complex GUI configuration before the assertions, etc. I will explain how to do that with TestFX in next posts. Here is a large and quite complex test suite that tests a JavaFX application using TestFX.","id":"tag:blogger.com,1999:blog-2959571653801029104.post-658995197074803922","isoDate":"2015-11-28T16:14:00.002Z"},{"title":"Dependencies between controllers and views in JavaFX","link":"https://torgen-engineering.blogspot.com/2015/11/dependencies-between-controllers.html","pubDate":"2015-11-09T10:36:00.001Z","author":"Anonymous","content":"<br /><b>All the code of this post is freely available <a href=\"https://github.com/arnobl/torgen/tree/master/jfx-dep-injection-guice\" target=\"_blank\">here</a>.</b><br /><br /><div><div class=\"copyright\">This post is licensed under a <a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"license\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.</div></div><div><div class=\"pubdate\"><br /></div></div><h3>&nbsp;On separating an FXML document in multiple (and small) ones&nbsp; </h3>When developing a large user interface with <a href=\"https://docs.oracle.com/javase/8/javase-clienttechnologies.htm\" target=\"_blank\">JavaFX</a>, an advocated practice consists of decomposing  the user interface (UI) in several views:  instead of designing a single FXML document, multiple FXML documents are designed and linked each other thanks to <a href=\"https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html#include_elements\" target=\"_blank\">the 'include' FXML feature</a>. This practice follows the <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\" target=\"_blank\">separation of concerns principle</a> promoting that a complex piece of software should be divided in several (as small as possible) software artefacts. This division must not be randomly performed. It must make sense by grouping, encapsulating in these software artefacts related elements and their services. That is why the term 'concern' is used, to talk about related elements.<br /><br />Applied to FXML documents, the separation of concerns principle consists of encapsulating in an FXML document a group of related widgets. This task is not trivial: What does 'related' mean for widgets? How to state which widgets are related each other? What about core widgets? <i>etc</i>. I usually group widgets by thinking about the different tasks these widgets have to do. <a href=\"https://github.com/arnobl/latexdraw/tree/master/latexdraw-core/net.sf.latexdraw/src/main/net/sf/latexdraw/view/jfx/ui\" target=\"_blank\">For instance with a drawing editor</a>, you will have for sure widgets dedicated to the creation of shapes, others to the deletion of shapes, others to the editing of the shape's properties (<i>e.g.</i> colour), <i>etc</i>.<br />I will illustrate this post with a mere JavaFX application, which views are defined as follows:<br /><div class=\"gistLoad\" data-id=\"53347fc9a6cf985dcc76\" id=\"gist-53347fc9a6cf985dcc76\">Loading ....</div>This main view refers to the following FXML documents: <br /><div class=\"gistLoad\" data-id=\"3447d62782a19c9633dd\" id=\"gist-3447d62782a19c9633dd\">Loading ....</div><div class=\"gistLoad\" data-id=\"64e18f27241fe4ebf7dc\" id=\"gist-64e18f27241fe4ebf7dc\">Loading ....</div>The pros of this practice are multiple, in particular:<br /><ul><li>You avoid the definition of a Blob view (by reference to the <a href=\"https://sourcemaking.com/antipatterns/the-blob\" target=\"_blank\">Blob class</a>), a large view that knows and does too much. Blob views may have a negative impact on the maintenance and the comprehension of the view.</li><li>You will be able to define multiple controllers, <i>i.e.</i> one controller per view (that, by extension of the previous item, avoids the definition of a Blob controller). Indeed, in JavaFX an FXML document can only have <a href=\"https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html#controllers\" target=\"_blank\">a single controller</a>.</li></ul>The main drawback is the dependencies that may exist between the different controllers and that are not easy to code with JavaFX 8, as explained below.<br /><h3>On adding dependencies between controllers</h3>The FXML document <i>TextView</i> contains two text fields that just have to show the colour codes selected by the two colour pickers defined in <i>PickerView</i>.<br />It means that the <i>TextView</i>'s controller, <i>TextController</i>, depends on the <i>PickerView</i>'s controller, <span class=\"pl-s\"><i>PickerController</i><span class=\"pl-pds\"><i>, </i>to access the colour pickers. So, we would like to have an attribute in the <i>TextController</i> class to access the <i>PickerController</i> instance and its colour picker widgets.&nbsp;</span></span><br /><span class=\"pl-s\"><span class=\"pl-pds\">The problem is that in JavaFX you can hardly manage the instantiation of the controllers. By default, the controller of a view is automatically instantiated (using its free-parameter constructor) during the loading of the view (in the case the FXML attribute <i>controller</i> is specified). In this case, you can hardly pass a <i>PickerController</i> instance as a parameter to the constructor of <i>TextController</i>. Various complex or bad solutions exist. For instance, the use of a setter to give a <i>PickerController</i> instance to <i>TextController</i> is not a good idea since it implies that <i>TextController</i> may not always have an instance of <i>PickerController</i>. You can also <a href=\"https://community.oracle.com/thread/2529134?start=0&amp;tstart=0\" target=\"_blank\">customise the factory that creates the controllers</a>. <b>In this post, we will see how to use dependency injection to simply define dependencies between controllers and, by extension, how such injections can be used to access special widgets defined in the view.</b></span></span><br /><br />Several frameworks support dependency injection, such as <a href=\"http://projects.spring.io/spring-framework/\" target=\"_blank\">Spring</a> and the JavaFX framework <a href=\"http://www.oracle.com/technetwork/articles/java/javafx-productivity-2345000.html\" target=\"_blank\">Afterburns</a>. I will use the <a href=\"https://github.com/google/guice\" target=\"_blank\">Guice</a> framework.<br /><br /><h4>Dependency Injection</h4><a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\">Dependency injection</a> is a process (powered by <i>Guice</i> in our case) that  automatically injects an object (here, an instance of <i>PickerController</i>) into a dependent object (here, into a class parameter of <i>TextController</i>).<br /><br />An easy way to add Guice to your Java project is to use <a href=\"https://maven.apache.org/\" target=\"_blank\">Maven</a> (or equivalent) and add the Guice dependency in the pom file of your project: <br /><div class=\"gistLoad\" data-id=\"55b748f5d0419def948c\" id=\"gist-55b748f5d0419def948c\">Loading ....</div><h4>Guice as a dependency injector for JavaFX</h4>Here is the preliminary version of <i>PickerController</i> and <i>TextController</i>: <br /><div class=\"gistLoad\" data-id=\"8e6c95d7389e345d040f\" id=\"gist-8e6c95d7389e345d040f\">Loading ....</div><div class=\"gistLoad\" data-id=\"55408e41fc2dd759d923\" id=\"gist-55408e41fc2dd759d923\">Loading ....</div><br />As previously explained, these controllers are automatically created by JavaFX during the loading of the FXML documents. We now want to inject into the class attribute <i>picker</i> <b>the</b> instance of <i>PickerController</i> created by JavaFX.<br /><br />To do so, a special factory has to be provided to the FXML loader. This factory will be managed by Guice and will create the controllers. Before creating this factory, a Guice module has to be defined:<br /><div class=\"gistLoad\" data-id=\"ae3f7c826883b6801083\" id=\"gist-ae3f7c826883b6801083\">Loading ....</div>The goal of such a Guice module is to configure (in the <i>configure</i> operation, of course) the injections. There is another way to configure injections: using annotations. We will use this feature as explained later. For the moment this module has to be used by the <i>FXMLLoader</i> to load the view: <br /><div class=\"gistLoad\" data-id=\"060b2c82e49586093b09\" id=\"gist-060b2c82e49586093b09\">Loading ....</div>Line 9, a Guice injector is created using the module we defined. Then, line 10, a factory that manages the instantiation of the controllers is defined. This last works simply: the class given as a parameter to the controller factory is sent to the Guice injector, that manages the controller instances, that finally returns an instance of the class.<br /><br />There is still something missing in the code. In the <i>TextController</i> class, we must say to Guice that the class attribute <i>picker</i> must be injected. To do so, this class attribute has to be supplemented with the Guice annotation <i>@Inject</i>, as depicted as follows: <br /><div class=\"gistLoad\" data-id=\"fc638c729f8921fffd4c\" id=\"gist-fc638c729f8921fffd4c\">Loading ....</div>When we execute the application, we obtain the following log:<br /><span style=\"font-size: small;\"><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Creating a PickerController: torgen.controller.PickerController@3fdfb3cd<br />TextField[id=text1, styleClass=text-input text-field]<br />TextField[id=text2, styleClass=text-input text-field]<br />Injected controller: torgen.controller.PickerController@3fdfb3cd<br />PickerController widgets: null null<br />Creating a PickerController: torgen.controller.PickerController@353c7717</span></span> <br /><br />This log points out two problems. The first one is that two instances of <i>PickerController</i> are created: <i>PickerController@3fdfb3cd</i> during the loading of <i>PickerView.fxml</i> and <i>PickerController@3fdfb3cd</i> during the injection of <i>picker</i>. We want the same instance in these two places. A simple solution with controllers is to define them as <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\" target=\"_blank\">singletons</a>. This is quite logical: in most of the cases a controller class has to be instantiated a single time since it controls a unique view (if your controller cannot be a singleton, you can still customise the Guice module to do the job). Guice permits that by tagging a class controlled by Guice with the annotation <i>@Singleton</i>:  <br /><div class=\"gistLoad\" data-id=\"20ecafd730b4634947ce\" id=\"gist-20ecafd730b4634947ce\">Loading ....</div>We now obtain the following log:  <br /><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Creating a PickerController: torgen.controller.PickerController@cb74462<br />TextField[id=text1, styleClass=text-input text-field]<br />TextField[id=text2, styleClass=text-input text-field]<br />Injected controller: torgen.controller.PickerController@cb74462<br />PickerController widgets: null null</span><br /><br />Only one instance of <i>PickerController</i> is now created. The second problem is that the <i>PickerController</i>'s widgets are not yet initialised (they are <i>null</i>) when <i>TextController</i> is initialised. The following UML sequence diagram explains why:<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-0KtE16mQ02o/VkBZ2v5rYzI/AAAAAAAAALU/p29GS3EjrFc/s1600/sequenceDiagramInjection.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"276\" src=\"https://2.bp.blogspot.com/-0KtE16mQ02o/VkBZ2v5rYzI/AAAAAAAAALU/p29GS3EjrFc/s640/sequenceDiagramInjection.png\" width=\"640\" /></a></div>The <i>FXMLLoader</i> first loads <i>TextView.fxml</i>. So, it asks the <i>GuiceModule</i> for an instance <i>t</i> of <i>TextController</i>. <i>TextController</i> has an injected class attribute <i>picker</i>, which type is <i>PickerController</i>. So the <i>GuiceModule</i> creates an instance <i>p</i> of this class and inject it into <i>t</i>. One may note that <i>p</i> has not been loaded or initialised by the <i>FXMLLoader</i>. So, when the <i>FXMLLoader</i> calls the operation <i>initialize</i> on <i>t</i>, the colour pickers of <i>p</i> are <i>null</i>. Once <i>t</i> initialised, the <i>FXMLLoader</i> loads <i>PickerView.fxml</i> and asks the <i>GuiceModule</i> for an instance of <i>PickerController</i>. The instance <i>p</i> is returned to be then initialised. The colour pickers of <i>p</i> are then no more <i>null</i>. A bad hack to avoid this problem consists of  modifying <i>UI.fxml</i> to load <i>PickerView.fxml</i> before <i>TextView.fxml</i>. A better solution exists.<br /><br />A simple solution consists of initialising the controllers <b>once all  of them</b> have been created and injected. If this solution is theoretically simple, this is not the case in practice since JavaFX does not provide developers with such a feature. We have to develop it...<br /><br />First, similarly to the JavaFX interface <i>Initializable</i> (used to call the operation <i>initialize</i> just after the creation of one controller), we define an interface <i>Configurable</i> as follows: <br /><div class=\"gistLoad\" data-id=\"349c6732d7bcbfb04641\" id=\"gist-349c6732d7bcbfb04641\">Loading ....</div>The controllers will have to implement this interface. The <i>configure</i> operation will be called once all the controllers have been created and injected. For instance with <i>TextController</i>: <br /><div class=\"gistLoad\" data-id=\"14068f0248e4da75cdb3\" id=\"gist-14068f0248e4da75cdb3\">Loading ....</div>In this <i>configure</i> operation, the different data bindings can be established. The <i>FXMLLoader</i> must now call the <i>configure</i> operations. This is not possible with the standard <i>FXMLLoader</i> class. We thus define a dedicated class <i>FXMLControllersLoader</i>: <br /><div class=\"gistLoad\" data-id=\"8e17f6bad0eb91777636\" id=\"gist-8e17f6bad0eb91777636\">Loading ....</div><i>FXMLControllersLoader</i> inherits of <i>FXMLLoader</i>. Line 2 is defined the set <i>controllers</i> that will contain all the created controllers. Line 10, the controller factory is customised: when an instance of a controller is returned by Guice, it is stored in <i>controllers</i>. Then, line 19, the <i>load</i> operation is overridden to call the <i>configure</i> operations on the created controllers.<br />The use of this customised <i>FXMLLoader</i> requires some modifications in the main class: <br /><div class=\"gistLoad\" data-id=\"78ad1edc5f78e9f9d248\" id=\"gist-78ad1edc5f78e9f9d248\">Loading ....</div>The log is now:<br /><span style=\"font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;\">Creating a PickerController: torgen.controller.PickerController@1a57655a<br />TextField[id=text1, styleClass=text-input text-field]<br />TextField[id=text2, styleClass=text-input text-field]<br />Injected controller: torgen.controller.PickerController@1a57655a<br />PickerController widgets: null null<br />DrawingArea created: DrawingArea@138d4915<br />PickerController widgets in configure: ColorPicker[id=picker1, styleClass=combo-box-base color-picker] ColorPicker[id=picker2, styleClass=combo-box-base color-picker]</span> <br />That's it. The application now works:<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-ELSV3DMsrGY/VkBkBlEV6dI/AAAAAAAAALk/460kbLcNRKs/s1600/injectionApp1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"82\" src=\"https://1.bp.blogspot.com/-ELSV3DMsrGY/VkBkBlEV6dI/AAAAAAAAALk/460kbLcNRKs/s320/injectionApp1.png\" width=\"320\" /></a></div><h3>On injecting views</h3>Now, we have a customised widget we want to inject at different places. This is also possible with Guice.<br />This customised widget is a drawing area that just display two shapes coloured by the selected colours. Here is the code of this widget: <br /><div class=\"gistLoad\" data-id=\"0b40537a2d10474f0d83\" id=\"gist-0b40537a2d10474f0d83\">Loading ....</div>This widget is a singleton in the context of our application. If it is not the case in your application, you can still customise the Guice module or a factory. We add this widget in <i>UI.fxml</i>: <br /><div class=\"gistLoad\" data-id=\"0b78edb19d7227208b23\" id=\"gist-0b78edb19d7227208b23\">Loading ....</div>Guice must now manage the instantiation of the views (as it already manages the instantiation of the controllers). The <i>JavaFXBuilderFactory</i> provided to the <i>FXMLLoader</i> is replaced by a special one, defined as follows: <br /><div class=\"gistLoad\" data-id=\"530a56e3cb9d44730f96\" id=\"gist-530a56e3cb9d44730f96\">Loading ....</div>In this class, the Guice injector is provided as a parameter of the constructor (line 6). A standard JavaFX view factory is created (line 9). The <i>getBuilder</i> operation is overridden (line 13). The goal of this operation is to return a builder corresponding to the view element (the widget) to instantiate. When a builder for the <i>DrawingArea</i> class is asked, the Guice injector is used to return the singleton (line 15). Otherwise, the standard JavaFX factory is used (line 16). This factory must be provided to the <i>FXMLLoader</i>: <br /><div class=\"gistLoad\" data-id=\"10bf9797c5c5f7db36b3\" id=\"gist-10bf9797c5c5f7db36b3\">Loading ....</div>This drawing area can now be injected in the <i>PickerController</i> to bind the colours: <br /><div class=\"gistLoad\" data-id=\"674a649942479167dbef\" id=\"gist-674a649942479167dbef\">Loading ....</div>The <i>DrawingArea</i> instance is injected line 6 and used lines 20-21 to bind the picked colours to the shapes' colour.<br />The final application looks like that:<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://2.bp.blogspot.com/-DAPvGLwAAAs/VkBrCyL5VbI/AAAAAAAAAL0/M04mHSOPT7M/s1600/injectionApp2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"201\" src=\"https://2.bp.blogspot.com/-DAPvGLwAAAs/VkBrCyL5VbI/AAAAAAAAAL0/M04mHSOPT7M/s400/injectionApp2.png\" width=\"400\" /></a></div><br /><br />In a next post, I will explain how Guice can also be used with <a href=\"https://github.com/TestFX/TestFX\" target=\"_blank\">TestFX</a> to test JavaFX GUIs.<br /><br /><script src=\"https://cdn.rawgit.com/moski/gist-Blogger/master/public/gistLoader.js\" type=\"text/javascript\"></script>","contentSnippet":"All the code of this post is freely available here.This post is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.&nbsp;On separating an FXML document in multiple (and small) ones&nbsp; When developing a large user interface with JavaFX, an advocated practice consists of decomposing  the user interface (UI) in several views:  instead of designing a single FXML document, multiple FXML documents are designed and linked each other thanks to the 'include' FXML feature. This practice follows the separation of concerns principle promoting that a complex piece of software should be divided in several (as small as possible) software artefacts. This division must not be randomly performed. It must make sense by grouping, encapsulating in these software artefacts related elements and their services. That is why the term 'concern' is used, to talk about related elements.Applied to FXML documents, the separation of concerns principle consists of encapsulating in an FXML document a group of related widgets. This task is not trivial: What does 'related' mean for widgets? How to state which widgets are related each other? What about core widgets? etc. I usually group widgets by thinking about the different tasks these widgets have to do. For instance with a drawing editor, you will have for sure widgets dedicated to the creation of shapes, others to the deletion of shapes, others to the editing of the shape's properties (e.g. colour), etc.I will illustrate this post with a mere JavaFX application, which views are defined as follows:Loading ....This main view refers to the following FXML documents: Loading ....Loading ....The pros of this practice are multiple, in particular:You avoid the definition of a Blob view (by reference to the Blob class), a large view that knows and does too much. Blob views may have a negative impact on the maintenance and the comprehension of the view.You will be able to define multiple controllers, i.e. one controller per view (that, by extension of the previous item, avoids the definition of a Blob controller). Indeed, in JavaFX an FXML document can only have a single controller.The main drawback is the dependencies that may exist between the different controllers and that are not easy to code with JavaFX 8, as explained below.On adding dependencies between controllersThe FXML document TextView contains two text fields that just have to show the colour codes selected by the two colour pickers defined in PickerView.It means that the TextView's controller, TextController, depends on the PickerView's controller, PickerController, to access the colour pickers. So, we would like to have an attribute in the TextController class to access the PickerController instance and its colour picker widgets.&nbsp;The problem is that in JavaFX you can hardly manage the instantiation of the controllers. By default, the controller of a view is automatically instantiated (using its free-parameter constructor) during the loading of the view (in the case the FXML attribute controller is specified). In this case, you can hardly pass a PickerController instance as a parameter to the constructor of TextController. Various complex or bad solutions exist. For instance, the use of a setter to give a PickerController instance to TextController is not a good idea since it implies that TextController may not always have an instance of PickerController. You can also customise the factory that creates the controllers. In this post, we will see how to use dependency injection to simply define dependencies between controllers and, by extension, how such injections can be used to access special widgets defined in the view.Several frameworks support dependency injection, such as Spring and the JavaFX framework Afterburns. I will use the Guice framework.Dependency InjectionDependency injection is a process (powered by Guice in our case) that  automatically injects an object (here, an instance of PickerController) into a dependent object (here, into a class parameter of TextController).An easy way to add Guice to your Java project is to use Maven (or equivalent) and add the Guice dependency in the pom file of your project: Loading ....Guice as a dependency injector for JavaFXHere is the preliminary version of PickerController and TextController: Loading ....Loading ....As previously explained, these controllers are automatically created by JavaFX during the loading of the FXML documents. We now want to inject into the class attribute picker the instance of PickerController created by JavaFX.To do so, a special factory has to be provided to the FXML loader. This factory will be managed by Guice and will create the controllers. Before creating this factory, a Guice module has to be defined:Loading ....The goal of such a Guice module is to configure (in the configure operation, of course) the injections. There is another way to configure injections: using annotations. We will use this feature as explained later. For the moment this module has to be used by the FXMLLoader to load the view: Loading ....Line 9, a Guice injector is created using the module we defined. Then, line 10, a factory that manages the instantiation of the controllers is defined. This last works simply: the class given as a parameter to the controller factory is sent to the Guice injector, that manages the controller instances, that finally returns an instance of the class.There is still something missing in the code. In the TextController class, we must say to Guice that the class attribute picker must be injected. To do so, this class attribute has to be supplemented with the Guice annotation @Inject, as depicted as follows: Loading ....When we execute the application, we obtain the following log:Creating a PickerController: torgen.controller.PickerController@3fdfb3cdTextField[id=text1, styleClass=text-input text-field]TextField[id=text2, styleClass=text-input text-field]Injected controller: torgen.controller.PickerController@3fdfb3cdPickerController widgets: null nullCreating a PickerController: torgen.controller.PickerController@353c7717 This log points out two problems. The first one is that two instances of PickerController are created: PickerController@3fdfb3cd during the loading of PickerView.fxml and PickerController@3fdfb3cd during the injection of picker. We want the same instance in these two places. A simple solution with controllers is to define them as singletons. This is quite logical: in most of the cases a controller class has to be instantiated a single time since it controls a unique view (if your controller cannot be a singleton, you can still customise the Guice module to do the job). Guice permits that by tagging a class controlled by Guice with the annotation @Singleton:  Loading ....We now obtain the following log:  Creating a PickerController: torgen.controller.PickerController@cb74462TextField[id=text1, styleClass=text-input text-field]TextField[id=text2, styleClass=text-input text-field]Injected controller: torgen.controller.PickerController@cb74462PickerController widgets: null nullOnly one instance of PickerController is now created. The second problem is that the PickerController's widgets are not yet initialised (they are null) when TextController is initialised. The following UML sequence diagram explains why:The FXMLLoader first loads TextView.fxml. So, it asks the GuiceModule for an instance t of TextController. TextController has an injected class attribute picker, which type is PickerController. So the GuiceModule creates an instance p of this class and inject it into t. One may note that p has not been loaded or initialised by the FXMLLoader. So, when the FXMLLoader calls the operation initialize on t, the colour pickers of p are null. Once t initialised, the FXMLLoader loads PickerView.fxml and asks the GuiceModule for an instance of PickerController. The instance p is returned to be then initialised. The colour pickers of p are then no more null. A bad hack to avoid this problem consists of  modifying UI.fxml to load PickerView.fxml before TextView.fxml. A better solution exists.A simple solution consists of initialising the controllers once all  of them have been created and injected. If this solution is theoretically simple, this is not the case in practice since JavaFX does not provide developers with such a feature. We have to develop it...First, similarly to the JavaFX interface Initializable (used to call the operation initialize just after the creation of one controller), we define an interface Configurable as follows: Loading ....The controllers will have to implement this interface. The configure operation will be called once all the controllers have been created and injected. For instance with TextController: Loading ....In this configure operation, the different data bindings can be established. The FXMLLoader must now call the configure operations. This is not possible with the standard FXMLLoader class. We thus define a dedicated class FXMLControllersLoader: Loading ....FXMLControllersLoader inherits of FXMLLoader. Line 2 is defined the set controllers that will contain all the created controllers. Line 10, the controller factory is customised: when an instance of a controller is returned by Guice, it is stored in controllers. Then, line 19, the load operation is overridden to call the configure operations on the created controllers.The use of this customised FXMLLoader requires some modifications in the main class: Loading ....The log is now:Creating a PickerController: torgen.controller.PickerController@1a57655aTextField[id=text1, styleClass=text-input text-field]TextField[id=text2, styleClass=text-input text-field]Injected controller: torgen.controller.PickerController@1a57655aPickerController widgets: null nullDrawingArea created: DrawingArea@138d4915PickerController widgets in configure: ColorPicker[id=picker1, styleClass=combo-box-base color-picker] ColorPicker[id=picker2, styleClass=combo-box-base color-picker] That's it. The application now works:On injecting viewsNow, we have a customised widget we want to inject at different places. This is also possible with Guice.This customised widget is a drawing area that just display two shapes coloured by the selected colours. Here is the code of this widget: Loading ....This widget is a singleton in the context of our application. If it is not the case in your application, you can still customise the Guice module or a factory. We add this widget in UI.fxml: Loading ....Guice must now manage the instantiation of the views (as it already manages the instantiation of the controllers). The JavaFXBuilderFactory provided to the FXMLLoader is replaced by a special one, defined as follows: Loading ....In this class, the Guice injector is provided as a parameter of the constructor (line 6). A standard JavaFX view factory is created (line 9). The getBuilder operation is overridden (line 13). The goal of this operation is to return a builder corresponding to the view element (the widget) to instantiate. When a builder for the DrawingArea class is asked, the Guice injector is used to return the singleton (line 15). Otherwise, the standard JavaFX factory is used (line 16). This factory must be provided to the FXMLLoader: Loading ....This drawing area can now be injected in the PickerController to bind the colours: Loading ....The DrawingArea instance is injected line 6 and used lines 20-21 to bind the picked colours to the shapes' colour.The final application looks like that:In a next post, I will explain how Guice can also be used with TestFX to test JavaFX GUIs.","id":"tag:blogger.com,1999:blog-2959571653801029104.post-1468637353972370973","isoDate":"2015-11-09T10:36:00.001Z"},{"title":"OBS and Virtual Cam (Linux)","link":"http://blog.mathieuacher.com/OBSVirtualCam/","pubDate":"2020-09-10T09:54:29.000Z","author":"Mathieu Acher","content":"<p>As part of now remote conferences or courses, you may need to show many things: not only your slides, but also your terminal, your browser, or you!\nThere are many (proprietary) systems out there for sharing your screen live: BigBlueButton, Jitsi, Google meet, Zoom, Skype, Teams, etc.\nMy recent experience is that it does not work so well. Hence an idea is to create a <strong>virtual camera</strong> and project what you want through it.\nThat is, you create this fake camera and then broadcast to any conferencing system (you “just” have to select the virtual cam).\nSome details below about I setup everything to achieve this on Linux with <a href=\"https://obsproject.com/\">OBS</a>, <a href=\"https://github.com/umlaeute/v4l2loopback\">v4l2loopback</a>, <a href=\"https://github.com/CatxFish/obs-v4l2sink\">obs-v4l2sink</a>, <a href=\"https://ffmpeg.org/\">ffmpeg</a>, etc.</p>\n\n<p>Olivier Barais, a colleague of mine, shared this idea of “fake camera” a few months ago.\nHe mentionned this nice article <a href=\"&quot;Broadcast from OBS Studio To Everything In Linux&quot;\">https://blog.jbrains.ca/permalink/using-obs-studio-as-a-virtual-cam-on-linux</a>, but I didn’t get much attention at that time.\nBut recently, I had some variants-troubles with Teams: basically the screensharing was very limited or simply not supported (aka crash).\nSo I started to follow some tutorials.</p>\n\n<h3 id=\"v4l2loopback\">v4l2loopback</h3>\n\n<p>There are at least two subtilities:</p>\n<ul>\n  <li>don’t forget to install linux headers, on the right version… otherwise you won’t be able to build it. I suggest this line: <code class=\"language-plaintext highlighter-rouge\">dnf install \"kernel-devel-uname-r == $(uname -r)\"</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">sudo modprobe v4l2loopback card_label=\"Virtual Cam\"</code> might not be sufficient. The camera will be created but not recognized by third party applications like OBS or Web browsers. I suggest to use this line: <code class=\"language-plaintext highlighter-rouge\">sudo modprobe v4l2loopback devices=1 video_nr=10 card_label=\"OBS Cam\" exclusive_caps=1</code></li>\n</ul>\n\n<p>For checking: <code class=\"language-plaintext highlighter-rouge\">v4l2-ctl --all</code> and <code class=\"language-plaintext highlighter-rouge\">v4l2-ctl -d /dev/video10 --list-formats-ext</code> as well as <code class=\"language-plaintext highlighter-rouge\">ls -al /dev | grep video</code> (don’t forget to install <code class=\"language-plaintext highlighter-rouge\">sudo dnf install v4l-utils</code>). \nAt this step, some (hopefully all) applications might recognize your virtual camera. A useful link is https://webrtc.github.io/samples/src/content/devices/input-output/ to test whether your camera is recognized. \nBut there is nothing to broadcast.</p>\n\n<h3 id=\"vl42sink\">vl42sink</h3>\n\n<p>It’s an OBS plugin. I have impression there is some default plugins in the Windows version of OBS that simplifies your life.\nOn Linux, it’s not really standardized (yet?). \nYou can use <a href=\"https://github.com/CatxFish/obs-v4l2sink.git\">this repo</a> or <a href=\"https://github.com/AndyHee/obs-v4l2sink\">this one</a>, I don’t remember the actual differences.</p>\n\n<p>I highly recommend the reading of <a href=\"https://spot.livejournal.com/327990.html\">this article</a>.\nOn Fedora at least, you should change some lines in <code class=\"language-plaintext highlighter-rouge\">external/FindLibObs.cmake</code></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@@ -95,7 +95,7 @@ if(LIBOBS_FOUND)\n \n        set(LIBOBS_INCLUDE_DIRS ${LIBOBS_INCLUDE_DIR} ${W32_PTHREADS_INCLUDE_DIR})\n        set(LIBOBS_LIBRARIES ${LIBOBS_LIB} ${W32_PTHREADS_LIB})\n-       include(${LIBOBS_INCLUDE_DIR}/../cmake/external/ObsPluginHelpers.cmake)\n+       include(/usr/lib64/cmake/LibObs/ObsPluginHelpers.cmake)\n</code></pre></div></div>\n<p>otherwise it won’t build.\nAlso <code class=\"language-plaintext highlighter-rouge\">cmake -DLIBOBS_INCLUDE_DIR=\"/usr/include/obs\" -DCMAKE_INSTALL_PREFIX=/usr ..</code> is the right approach.\nAnd finally <code class=\"language-plaintext highlighter-rouge\">sudo mv /usr/lib/obs-plugins/v4l2sink.so /usr/lib64/obs-plugins/v4l2sink.so</code></p>\n\n<h3 id=\"obs\">OBS</h3>\n\n<p>The plugin should now work on OBS, that is, under the “Tools” menu there should be now “V4L2 Video Output”.\nSome strange things may happen with the “format”, but it’s OK</p>\n\n<h3 id=\"misc\">Misc</h3>\n\n<p>I still have some issues for sharing the content of <em>some</em> applications that are not listed within OBS (eg I can’t share the terminal content).\nBut it’s basically the same limitations with other systems. \nIt’s due to issues with Wayland/X11. An OBS workaround is <code class=\"language-plaintext highlighter-rouge\">obs-xdg-portal</code>, this issue was quite useful https://gitlab.gnome.org/feaneron/obs-xdg-portal/-/issues/4\nnote: you can also experiment with <code class=\"language-plaintext highlighter-rouge\">ffmpeg</code> and redirect the streaming of OBS.</p>\n\n<p>A bit chaotic, but well it’s also a good opportunity to learn many things about video, build, Linux, etc. \nNow you can compose scenes in OBS, and broadcast through the virtual cam in Jitsi, Zoom, Teams, etc.\nThis virtual camera can be seen as an independent way to share whatever you want and whatever the technology is… And you can leverage the power of OBS.</p>","contentSnippet":"As part of now remote conferences or courses, you may need to show many things: not only your slides, but also your terminal, your browser, or you!\nThere are many (proprietary) systems out there for sharing your screen live: BigBlueButton, Jitsi, Google meet, Zoom, Skype, Teams, etc.\nMy recent experience is that it does not work so well. Hence an idea is to create a virtual camera and project what you want through it.\nThat is, you create this fake camera and then broadcast to any conferencing system (you “just” have to select the virtual cam).\nSome details below about I setup everything to achieve this on Linux with OBS, v4l2loopback, obs-v4l2sink, ffmpeg, etc.\n\nOlivier Barais, a colleague of mine, shared this idea of “fake camera” a few months ago.\nHe mentionned this nice article https://blog.jbrains.ca/permalink/using-obs-studio-as-a-virtual-cam-on-linux, but I didn’t get much attention at that time.\nBut recently, I had some variants-troubles with Teams: basically the screensharing was very limited or simply not supported (aka crash).\nSo I started to follow some tutorials.\n\nv4l2loopback\n\nThere are at least two subtilities:\n\n  don’t forget to install linux headers, on the right version… otherwise you won’t be able to build it. I suggest this line: dnf install \"kernel-devel-uname-r == $(uname -r)\"\n  sudo modprobe v4l2loopback card_label=\"Virtual Cam\" might not be sufficient. The camera will be created but not recognized by third party applications like OBS or Web browsers. I suggest to use this line: sudo modprobe v4l2loopback devices=1 video_nr=10 card_label=\"OBS Cam\" exclusive_caps=1\n\n\nFor checking: v4l2-ctl --all and v4l2-ctl -d /dev/video10 --list-formats-ext as well as ls -al /dev | grep video (don’t forget to install sudo dnf install v4l-utils). \nAt this step, some (hopefully all) applications might recognize your virtual camera. A useful link is https://webrtc.github.io/samples/src/content/devices/input-output/ to test whether your camera is recognized. \nBut there is nothing to broadcast.\n\nvl42sink\n\nIt’s an OBS plugin. I have impression there is some default plugins in the Windows version of OBS that simplifies your life.\nOn Linux, it’s not really standardized (yet?). \nYou can use this repo or this one, I don’t remember the actual differences.\n\nI highly recommend the reading of this article.\nOn Fedora at least, you should change some lines in external/FindLibObs.cmake\n@@ -95,7 +95,7 @@ if(LIBOBS_FOUND)\n \n        set(LIBOBS_INCLUDE_DIRS ${LIBOBS_INCLUDE_DIR} ${W32_PTHREADS_INCLUDE_DIR})\n        set(LIBOBS_LIBRARIES ${LIBOBS_LIB} ${W32_PTHREADS_LIB})\n-       include(${LIBOBS_INCLUDE_DIR}/../cmake/external/ObsPluginHelpers.cmake)\n+       include(/usr/lib64/cmake/LibObs/ObsPluginHelpers.cmake)\n\notherwise it won’t build.\nAlso cmake -DLIBOBS_INCLUDE_DIR=\"/usr/include/obs\" -DCMAKE_INSTALL_PREFIX=/usr .. is the right approach.\nAnd finally sudo mv /usr/lib/obs-plugins/v4l2sink.so /usr/lib64/obs-plugins/v4l2sink.so\n\nOBS\n\nThe plugin should now work on OBS, that is, under the “Tools” menu there should be now “V4L2 Video Output”.\nSome strange things may happen with the “format”, but it’s OK\n\nMisc\n\nI still have some issues for sharing the content of some applications that are not listed within OBS (eg I can’t share the terminal content).\nBut it’s basically the same limitations with other systems. \nIt’s due to issues with Wayland/X11. An OBS workaround is obs-xdg-portal, this issue was quite useful https://gitlab.gnome.org/feaneron/obs-xdg-portal/-/issues/4\nnote: you can also experiment with ffmpeg and redirect the streaming of OBS.\n\nA bit chaotic, but well it’s also a good opportunity to learn many things about video, build, Linux, etc. \nNow you can compose scenes in OBS, and broadcast through the virtual cam in Jitsi, Zoom, Teams, etc.\nThis virtual camera can be seen as an independent way to share whatever you want and whatever the technology is… And you can leverage the power of OBS.","id":"http://blog.mathieuacher.com/OBSVirtualCam","isoDate":"2020-09-10T09:54:29.000Z"},{"title":"Docker New Inactive Image Policy and Reproducible Science","link":"http://blog.mathieuacher.com/DockerReproducibleScienceChallenges/","pubDate":"2020-09-01T09:54:29.000Z","author":"Mathieu Acher","content":"<p>Docker is a popular technology for delivering software in so-called containers. It is mainly used for deploying applications on the cloud, but is also widely considered in the scientific community. Docker Inc. has introduced a new inactive image retention policy: in short, images that have not been pulled or pushed in 6 months are considered as inactive and will be removed. In this blog post, I’m briefly discussing what could be the possible impacts on science, based on my experience and some concrete cases. I have no silver bullet but something is clear: scientists should react now and discuss/find alternate, sustainable solutions.</p>\n\n<h2 id=\"docker-new-policy\">Docker new policy</h2>\n\n<p>Docker <a href=\"https://www.docker.com/blog/scaling-dockers-business-to-serve-millions-more-developers-storage/\">announcement</a>:</p>\n\n<blockquote>\n  <p>To help Docker economically scale its infrastructure to support free services for our growing base of users, several updates were announced. First, a new inactive image retention policy was introduced that will automatically delete images hosted in free accounts that have not been used in 6 months. In addition, Docker will also be providing tooling, in the form of a UI and APIs, that will allow users to more easily manage their images. Together, these changes will allow developers to more easily clean up their inactive images and also ensure Docker can economically scale its infrastructure. With this new policy, starting on <strong>November 1</strong>, images stored in free Docker Hub repositories that have not had their manifest pushed or pulled in the last 6 months will be removed.</p>\n</blockquote>\n\n<p>This new policy is frankly understandable (e.g., from an economic point of view). But incidentally it can be a big threat to reproducibility in science. Many scientific works indeed rely on Docker. For instance, in software engineering, I’m seeing more and more artefacts linked to a paper (nice!) and such artefacts are sometimes Docker images. There are good reasons:</p>\n\n<ul>\n  <li>it’s more convenient to have a ready-to-use Docker image: building Docker images can be quite long, require lots of resources in bandwidth, CPU or memory;</li>\n  <li>you can well provide the Docker files and assume everything will work “in theory”. In practice, many problems can occur: the build of some tools/libraries fails, some related artefacts are missing, the versions you assume are no longer working with other pieces, etc.</li>\n  <li>Even if everything builds in the first place, it’s quite hard to guarantee that the produced Docker image is exactly the one used for your experiments. For example, some versions of a library may have changed: they do work from a build point of view, but the results are then completely different.</li>\n</ul>\n\n<p>So I would argue that providing the Docker file is a good practice but is not enough. One needs to retain the concrete Docker images. Some people may argue that Docker is broken by design and that for real reproducibility one needs other tools like Nix, Singularity, etc. I will get back to this after.</p>\n\n<h2 id=\"impacts-on-my-research\">Impacts on my research</h2>\n\n<p>But first, let me report the impacts of Docker new policy on my research work. If my colleagues and I do nothing, what could be wrong? Well, Docker images will be removed in 6 months and some published papers would become (much) harder to reproduce.</p>\n\n<h3 id=\"tuxml\">TUXML</h3>\n\n<p>As part of the TUXML project, we’re compiling Linux kernels with different configurations. For scaling our experiments and distributing the compilations on several machines, and also for the sake of reproducibility, we have made an effort to develop an integrated environment with all tools needed (the gcc compiler, Make, but also plenty of tools such as binutils or even <a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/changes.rst?id=562f36ed28e6faa4245ea2ca1392d90ab98ebbe8\">bison and flex</a>). In 2017, we toke the decision to rely on Docker. Since 2017 and up to now (2020), we toke care of releasing the actual Docker images, <a href=\"https://hub.docker.com/r/tuxml/tuxml/tags\">considering different versions of the kernel</a>. We do have the Docker files for each release: it’s actually a generator that produces Docker files. However, we consider it’s not enough: for setting up the environment, we rely on <code class=\"language-plaintext highlighter-rouge\">apt-get</code> and some updates may completely change the tools we used. As a workaround, we have separated the Docker files and the main Docker file depends on an actual Docker image that has “frozen” all versions of the tools. Like that, we don’t update the system anymore with <code class=\"language-plaintext highlighter-rouge\">apt-get update</code>: it has already been done and we simply reuse the image (called <a href=\"https://hub.docker.com/r/tuxml/debiantuxml\">debiantuxml</a>). So what’s the impact of Docker new policy on TUXML?</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">debiantuxml</code> may well be removed in 6 months since we do not change it: the main <code class=\"language-plaintext highlighter-rouge\">tuxml</code> image may be impossible to re-build (even with a Docker image)</li>\n  <li>the tags of <code class=\"language-plaintext highlighter-rouge\">tuxml</code> images may also disappear, since such releases are not supposed to change in the future: they are just artefacts for reproducibility.</li>\n</ul>\n\n<h3 id=\"icpe\">ICPE</h3>\n\n<p>In a totally different context, we have pushed tons of effort to make replicable our ICPE’2020 paper <a href=\"https://github.com/diverse-project/ICPE2020\">“Sampling Effect on Performance Prediction of Configurable Systems: A Case Study”</a>. Thanks to the remarks of the program committee (<a href=\"https://icpe2020.spec.org/tracks-and-submissions/artifact-evaluation-track/\">artefacts evaluation</a>), we came across a problem with the Docker image: version of <code class=\"language-plaintext highlighter-rouge\">R</code> on our Docker image was “too old”. Hence, despite precise instructions, a show-stopper problem occurred and it was not the fault of the reviewers, but ours. We could identify the source of the issue and then decide to push an actual, corrected Docker image. Another related issue in this endeavor is that we actually depend on another <a href=\"https://github.com/se-passau/Distance-Based_Data\">research work, that also relies on Docker</a>. We iterated a lot with the authors (thanks Christian Kaltenecker!). This experience shows two things:</p>\n\n<ul>\n  <li>Docker is not the only problem, you may well have issues with another ecosystem and bunch of tools/libraries (<code class=\"language-plaintext highlighter-rouge\">R</code> here). I’m not sure only the Docker file can document your exact requirements and prevent such issues;</li>\n  <li>your Docker image may well depend on another Docker image: what if the original Docker image you depend on is removed? The build of your image may be impossible</li>\n</ul>\n\n<p>We’re actually seeing similar issues’ patterns as with TUXML. And the pragmatic solution of releasing a proper, ready-to-use Docker image seems necessary.</p>\n\n<h3 id=\"familiar\">FAMILIAR</h3>\n\n<p>In yet another context, we’re developing a language, called FAMILIAR, for specifying so-called feature models and performing several operations on top of them. We have published the source code and different releases in the past, taking different forms: the good-old JAR files, the <code class=\"language-plaintext highlighter-rouge\">pom.xml</code> with Maven, a Web version (no longer maintained), and… a <a href=\"https://github.com/se-passau/Distance-Based_Data\">Docker image</a> (thanks Sébastien Mosser!). A script automatically builds the Docker image that eventually contains the JAR files (after a build with Maven). Nice, what could go wrong?</p>\n\n<p>Well, the Java ecosystem and Maven in particular, can disappoint you sometimes, especially when you try to rebuild your tools after some months. In our case, <a href=\"https://github.com/eclipse/xtext/issues/1373\">Xtext has changed a bit the API</a> in such a way some versions of some libraries are no longer working. FAMILIAR depends on Xtext (we are here since the beginning: 0.7.2). The fact is that Maven arbitrarily choses the versions, and if you’re unlucky… the build no longer works. The “funny” thing is that the build did work on another old machine I have. Anyway, we find a <a href=\"https://github.com/FAMILIAR-project/familiar-language/commit/1b8dd0638bf2e6fc36b49cfb37613084f8e0338f\">fix</a></p>\n\n<p>Back to Maven: the push of a Docker image had the merit of “freezing” an environment that does work… It’s a way to save something working, even temporary. Without the release of a Docker image, your Docker file should work, but it’s not 100% sure because of some pieces not working in a given ecosystem (here, mostly Java/Maven).</p>\n\n<h2 id=\"what-to-do\">What to do?</h2>\n\n<p>Well, clearly, something before April 2021, six months after November 2020. Otherwise, the three research projects mentioned above may become non-replicable – not impossible to replicate, but much much harder!</p>\n\n<p>An immediate alternative is to store Docker images elsewhere… on <a href=\"https://github.com/features/packages\">Github packages</a> or in a Docker registry maintained/supported by our public research institutions. But wait…</p>\n\n<h2 id=\"is-it-really-a-docker-problem\">Is it really a Docker problem?</h2>\n\n<p>This short term solution is perhaps what my colleagues and I will consider, but there is a more profound issue. In fact, the new Docker policy makes me realize two things:</p>\n\n<ul>\n  <li>the infrastructures we rely on for hosting artefacts are so fragile: Docker may well not be here in a few years… Initiatives like <a href=\"https://www.softwareheritage.org/\">softwareheritage</a> or <a href=\"https://zenodo.org/\">zenodo</a> should definitely be supported, but I’m not sure they address all kinds of reproducibility problems (like the Docker one). In general, assuming that an artefact published somewhere (on Github or Docker hub) will sustain forever is a terrible idea. Now I am thinking about all “what if” scenarios that can happen and make unavailable your artefacts: it’s freaking!</li>\n  <li>“If the process that builds the image was reproducible, you would not need to retain images”: I totally concur with this <a href=\"https://twitter.com/amintos/status/1300848460757950464\">argument</a>. The source code (as hosted on  <a href=\"https://www.softwareheritage.org/\">softwareheritage</a>) can be sufficient under the conditions your build process is working. I would like to be optimistic, but at the moment “we” are not ready. Based on my experience, the problem may come from different ecosystems (<code class=\"language-plaintext highlighter-rouge\">R</code>, <code class=\"language-plaintext highlighter-rouge\">python</code>, <code class=\"language-plaintext highlighter-rouge\">Java</code>, or simply other Docker images) that offer build tools that challenge reproducibility. Hence the problem is not only at the Docker level.</li>\n</ul>\n\n<h2 id=\"final-remarks\">Final remarks</h2>\n\n<p>Retaining Docker images seems a convenient, temporary but fragile and unsatisfactory solution. We should <em>push reproducibility upstream, to another level</em>. There are some challenges to tackle though. After all, Docker is just here to host software; many pieces of software are hard to build in a reproducible way and are in a sense the real problem. It’s not new and the new policy of Docker can be seen as a last call to investigate new strategies and solutions.</p>\n\n<p><a href=\"https://singularity.lbl.gov/\">Singularity</a> is an alternate to Docker, but won’t resolve all problems listed above. The use of Nix (as an alternate to <code class=\"language-plaintext highlighter-rouge\">apt-get</code>) is worth trying since build packages do not have undeclared dependencies and are reproducible. However, <a href=\"https://nixos.org/\">Nix</a> does not resolve the problem of dependency management within the ecosystem of existing languages (e.g., <code class=\"language-plaintext highlighter-rouge\">Python</code>).</p>\n\n<p>Reproducibility is a long standing issue in science, and Docker new policy challenges current practices. I’m expecting that many scientists will have to move their Docker images in the upcoming months (otherwise many research works may simply not be reproducible). It will be an excellent excuse to re-consider the problem as a whole and think about end-to-end reproducible builds. I am not sure we are ready (did I miss something?), but it’s a necessary step. As a final note, reproducibility is actually a large problem that does not only impact science, but software in general and many businesses: software-intensive organizations will have to react to the new Docker policy and perhaps change their practice to achieve reproducible builds.</p>","contentSnippet":"Docker is a popular technology for delivering software in so-called containers. It is mainly used for deploying applications on the cloud, but is also widely considered in the scientific community. Docker Inc. has introduced a new inactive image retention policy: in short, images that have not been pulled or pushed in 6 months are considered as inactive and will be removed. In this blog post, I’m briefly discussing what could be the possible impacts on science, based on my experience and some concrete cases. I have no silver bullet but something is clear: scientists should react now and discuss/find alternate, sustainable solutions.\n\nDocker new policy\n\nDocker announcement:\n\n\n  To help Docker economically scale its infrastructure to support free services for our growing base of users, several updates were announced. First, a new inactive image retention policy was introduced that will automatically delete images hosted in free accounts that have not been used in 6 months. In addition, Docker will also be providing tooling, in the form of a UI and APIs, that will allow users to more easily manage their images. Together, these changes will allow developers to more easily clean up their inactive images and also ensure Docker can economically scale its infrastructure. With this new policy, starting on November 1, images stored in free Docker Hub repositories that have not had their manifest pushed or pulled in the last 6 months will be removed.\n\n\nThis new policy is frankly understandable (e.g., from an economic point of view). But incidentally it can be a big threat to reproducibility in science. Many scientific works indeed rely on Docker. For instance, in software engineering, I’m seeing more and more artefacts linked to a paper (nice!) and such artefacts are sometimes Docker images. There are good reasons:\n\n\n  it’s more convenient to have a ready-to-use Docker image: building Docker images can be quite long, require lots of resources in bandwidth, CPU or memory;\n  you can well provide the Docker files and assume everything will work “in theory”. In practice, many problems can occur: the build of some tools/libraries fails, some related artefacts are missing, the versions you assume are no longer working with other pieces, etc.\n  Even if everything builds in the first place, it’s quite hard to guarantee that the produced Docker image is exactly the one used for your experiments. For example, some versions of a library may have changed: they do work from a build point of view, but the results are then completely different.\n\n\nSo I would argue that providing the Docker file is a good practice but is not enough. One needs to retain the concrete Docker images. Some people may argue that Docker is broken by design and that for real reproducibility one needs other tools like Nix, Singularity, etc. I will get back to this after.\n\nImpacts on my research\n\nBut first, let me report the impacts of Docker new policy on my research work. If my colleagues and I do nothing, what could be wrong? Well, Docker images will be removed in 6 months and some published papers would become (much) harder to reproduce.\n\nTUXML\n\nAs part of the TUXML project, we’re compiling Linux kernels with different configurations. For scaling our experiments and distributing the compilations on several machines, and also for the sake of reproducibility, we have made an effort to develop an integrated environment with all tools needed (the gcc compiler, Make, but also plenty of tools such as binutils or even bison and flex). In 2017, we toke the decision to rely on Docker. Since 2017 and up to now (2020), we toke care of releasing the actual Docker images, considering different versions of the kernel. We do have the Docker files for each release: it’s actually a generator that produces Docker files. However, we consider it’s not enough: for setting up the environment, we rely on apt-get and some updates may completely change the tools we used. As a workaround, we have separated the Docker files and the main Docker file depends on an actual Docker image that has “frozen” all versions of the tools. Like that, we don’t update the system anymore with apt-get update: it has already been done and we simply reuse the image (called debiantuxml). So what’s the impact of Docker new policy on TUXML?\n\n\n  debiantuxml may well be removed in 6 months since we do not change it: the main tuxml image may be impossible to re-build (even with a Docker image)\n  the tags of tuxml images may also disappear, since such releases are not supposed to change in the future: they are just artefacts for reproducibility.\n\n\nICPE\n\nIn a totally different context, we have pushed tons of effort to make replicable our ICPE’2020 paper “Sampling Effect on Performance Prediction of Configurable Systems: A Case Study”. Thanks to the remarks of the program committee (artefacts evaluation), we came across a problem with the Docker image: version of R on our Docker image was “too old”. Hence, despite precise instructions, a show-stopper problem occurred and it was not the fault of the reviewers, but ours. We could identify the source of the issue and then decide to push an actual, corrected Docker image. Another related issue in this endeavor is that we actually depend on another research work, that also relies on Docker. We iterated a lot with the authors (thanks Christian Kaltenecker!). This experience shows two things:\n\n\n  Docker is not the only problem, you may well have issues with another ecosystem and bunch of tools/libraries (R here). I’m not sure only the Docker file can document your exact requirements and prevent such issues;\n  your Docker image may well depend on another Docker image: what if the original Docker image you depend on is removed? The build of your image may be impossible\n\n\nWe’re actually seeing similar issues’ patterns as with TUXML. And the pragmatic solution of releasing a proper, ready-to-use Docker image seems necessary.\n\nFAMILIAR\n\nIn yet another context, we’re developing a language, called FAMILIAR, for specifying so-called feature models and performing several operations on top of them. We have published the source code and different releases in the past, taking different forms: the good-old JAR files, the pom.xml with Maven, a Web version (no longer maintained), and… a Docker image (thanks Sébastien Mosser!). A script automatically builds the Docker image that eventually contains the JAR files (after a build with Maven). Nice, what could go wrong?\n\nWell, the Java ecosystem and Maven in particular, can disappoint you sometimes, especially when you try to rebuild your tools after some months. In our case, Xtext has changed a bit the API in such a way some versions of some libraries are no longer working. FAMILIAR depends on Xtext (we are here since the beginning: 0.7.2). The fact is that Maven arbitrarily choses the versions, and if you’re unlucky… the build no longer works. The “funny” thing is that the build did work on another old machine I have. Anyway, we find a fix\n\nBack to Maven: the push of a Docker image had the merit of “freezing” an environment that does work… It’s a way to save something working, even temporary. Without the release of a Docker image, your Docker file should work, but it’s not 100% sure because of some pieces not working in a given ecosystem (here, mostly Java/Maven).\n\nWhat to do?\n\nWell, clearly, something before April 2021, six months after November 2020. Otherwise, the three research projects mentioned above may become non-replicable – not impossible to replicate, but much much harder!\n\nAn immediate alternative is to store Docker images elsewhere… on Github packages or in a Docker registry maintained/supported by our public research institutions. But wait…\n\nIs it really a Docker problem?\n\nThis short term solution is perhaps what my colleagues and I will consider, but there is a more profound issue. In fact, the new Docker policy makes me realize two things:\n\n\n  the infrastructures we rely on for hosting artefacts are so fragile: Docker may well not be here in a few years… Initiatives like softwareheritage or zenodo should definitely be supported, but I’m not sure they address all kinds of reproducibility problems (like the Docker one). In general, assuming that an artefact published somewhere (on Github or Docker hub) will sustain forever is a terrible idea. Now I am thinking about all “what if” scenarios that can happen and make unavailable your artefacts: it’s freaking!\n  “If the process that builds the image was reproducible, you would not need to retain images”: I totally concur with this argument. The source code (as hosted on  softwareheritage) can be sufficient under the conditions your build process is working. I would like to be optimistic, but at the moment “we” are not ready. Based on my experience, the problem may come from different ecosystems (R, python, Java, or simply other Docker images) that offer build tools that challenge reproducibility. Hence the problem is not only at the Docker level.\n\n\nFinal remarks\n\nRetaining Docker images seems a convenient, temporary but fragile and unsatisfactory solution. We should push reproducibility upstream, to another level. There are some challenges to tackle though. After all, Docker is just here to host software; many pieces of software are hard to build in a reproducible way and are in a sense the real problem. It’s not new and the new policy of Docker can be seen as a last call to investigate new strategies and solutions.\n\nSingularity is an alternate to Docker, but won’t resolve all problems listed above. The use of Nix (as an alternate to apt-get) is worth trying since build packages do not have undeclared dependencies and are reproducible. However, Nix does not resolve the problem of dependency management within the ecosystem of existing languages (e.g., Python).\n\nReproducibility is a long standing issue in science, and Docker new policy challenges current practices. I’m expecting that many scientists will have to move their Docker images in the upcoming months (otherwise many research works may simply not be reproducible). It will be an excellent excuse to re-consider the problem as a whole and think about end-to-end reproducible builds. I am not sure we are ready (did I miss something?), but it’s a necessary step. As a final note, reproducibility is actually a large problem that does not only impact science, but software in general and many businesses: software-intensive organizations will have to react to the new Docker policy and perhaps change their practice to achieve reproducible builds.","id":"http://blog.mathieuacher.com/DockerReproducibleScienceChallenges","isoDate":"2020-09-01T09:54:29.000Z"},{"title":"Programming (Chess) Puzzles with a Tweet","link":"http://blog.mathieuacher.com/ProgrammingChessPuzzles/","pubDate":"2020-04-22T09:54:29.000Z","author":"Mathieu Acher","content":"<p>A friend posed the following puzzle/problem on social media: <em>“Given a 8x8 chessboard, your goal is to place 4 queens  and 1 bishop so that all squares of the board are controlled (through diagonales/lines; a piece controls the square where it is located).”</em> My usual reaction is to either promptly ignore this kind of fake problem or to try the resolution for real on a concrete chessboard or mentally, <a href=\"https://en.wikipedia.org/wiki/Blindfold_chess\">sans voir</a>. But in this &gt;quarantine period, I wanted to find a solution with a <em>program</em> (in next blog posts, I may explain how this attitude becomes a pattern beyond chess puzzles). Here is a short story about the process that lead to a Python solution in less than 280 characters that fits in a Tweet.</p>\n\n<h2 id=\"the-chess-puzzle\">The chess puzzle</h2>\n\n<p>An animation is worth than thousands of words for explaining the problem/puzzle<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>. The animation below almost shows a solution. 4 queens and 1 bishop are placed into a regular chess board. Circles in red represent squares that are not controlled (and yet to be controlled). The number at the top left indicates the number of squares not controlled (the goal is to reach 0). At the end of the animation, there is still missing one square ;)</p>\n\n<p><img src=\"../assets/chesspuzzle.gif\" alt=\"Chess Puzzle\" /></p>\n\n<p>In fact, with a physical chessboard, I quickly found a solution with 63 squares (basically with some tries and errors). But the 64 graal was quite hard to achieve. Maybe there is no solution and it was a joke? I had the feeling I could succeed with a bit of time, but it would be like “déjà vu”: yet another puzzle solved, what’s next? Don’t get me wrong, there is lot of fun and satisfaction to resolve a puzzle, but I wanted to have another kind of fun. So I decided to program a solution!</p>\n\n<h2 id=\"programming\">Programming</h2>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Software_development_effort_estimation#Psychological_issues\">As most (?) of the programmers</a>, I even had the impression I would be able to quickly find a solution like in a few minutes (1 hour maximum yea). After all the algorithm is quite simple: try (all) possible placements of 4 queens and 1 bishop, assess each try by counting the number of controlled squares, and stop at 64. So I launched a <a href=\"https://github.com/acherm/progpuzzles/blob/master/ChessPuzzle.ipynb\">Python notebook and started an implementation</a>.</p>\n\n<p>For trying possible placements, I consider that the placement of a piece (whether it is a queen or a bishop) is a number between 0 and 63 (see <a href=\"https://www.chessprogramming.org/Efficient_Generation_of_Sliding_Piece_Attacks#Squares_and_Bitindex\">for a visual representation</a> of the board). A possible placement is a 5-tuple and the last element is the placement of the bishop. There are many possible placements and I try to generate <em>all</em>: like this, I’m sure to explore the whole space, I can compute some statistics of all solutions or eventually have a solid proof that there is no solution. There are different variants of the generation: from very naive but too computationally expensive (all possible permutations of length 5) to the exploitation of the symmetry of the chess board.</p>\n\n<p>The second task is to program a procedure that assesses whether a placement controls 64 squares. You need to compute all squares controlled by a given queen or bishop, and then make the union of all squares. So a bit of maths/algorithms and ways to represent the board/squares/pieces for computing diagonals, horizontals, verticals.</p>\n\n<p>So I got some solutions (btw you can find more <a href=\"https://github.com/acherm/progpuzzles/blob/master/ChessPuzzle.ipynb\">statistics about all solutions of the puzzle</a>):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">cmb</span> <span class=\"ow\">in</span> <span class=\"n\">gen_combinations</span><span class=\"p\">():</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">nbcases_covered</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">63</span><span class=\"p\">):</span> <span class=\"c1\"># the solution(s)\n</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">,</span> <span class=\"s\">\"=&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ntries</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n</code></pre></div></div>\n\n<p>Looking back at my experience, I was a bit… puzzled ;) I was thinking it should have taken a few minutes but I was wrong, more something like 4 hours. I under-estimated the time of some tasks:</p>\n\n<ul>\n  <li>scaling issues with combinations</li>\n  <li>I have to remember how to properly represent a board and movements of pieces. It’s not that easy and I forget also the case of squares a queen don’t control because the bishop blocks the horizontal/vertical movements</li>\n  <li>the amount of code for programming <code class=\"language-plaintext highlighter-rouge\">nbcases_covered</code> is an indicator: not <em>that</em> straightforward</li>\n</ul>\n\n<p>There are obviously some threats to my experience (I didn’t perform the task in one shot and the quarantine at home is not a long quiet river…), but I guess similar issues arise when you program from scratch: there are many (accidental) details to deal with.</p>\n\n<h2 id=\"opportunistic-reuse\">Opportunistic Reuse</h2>\n\n<p>Don’t you hear the voice of <em>“Don’t reinvent the wheel, reuse!”</em>? This principle applies to many cases, but reuse what? it’s a chess puzzle with 4 queens and 1 bishop… Is there a chess library that supports it?</p>\n\n<p>I knew <a href=\"http://python-chess.readthedocs.io/\">python-chess</a> quite well, I even implemented a chess game player on top of it, within a notebook (see my <a href=\"http://blog.mathieuacher.com/JupyterChess/\">blog post</a>). But I was thinking the library was not <em>designed</em> for tackling my problem, like: it cannot handle illegal chess positions (eg without kings!), it won’t help me much (eg it’s mainly a library for reading PGN game), or I will hardly generalize my solution to strange cases (eg like puzzle with 6x6 board) and I don’t want to stuck on a third party library. I was wrong and missed an opportunity.</p>\n\n<p>So I decided to apply what I called <em>opportunistic reuse</em>, i.e., reusing a library that is not supposed to resolve your exact problem (who says “hack” a library). After further exploring the library, all the assumptions above collapsed:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># we reuse built-in facilities of python-chess for generating moves\n</span><span class=\"k\">def</span> <span class=\"nf\">nbcases_covered_reuse</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">):</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">chess</span><span class=\"p\">.</span><span class=\"n\">Board</span><span class=\"p\">()</span> \n    <span class=\"n\">board</span><span class=\"p\">.</span><span class=\"n\">clear_board</span><span class=\"p\">()</span>\n  \n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">):</span>\n        <span class=\"n\">board</span><span class=\"p\">.</span><span class=\"n\">set_piece_at</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">],</span> <span class=\"n\">chess</span><span class=\"p\">.</span><span class=\"n\">Piece</span><span class=\"p\">(</span><span class=\"n\">chess</span><span class=\"p\">.</span><span class=\"n\">QUEEN</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>\n    <span class=\"n\">board</span><span class=\"p\">.</span><span class=\"n\">set_piece_at</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"n\">chess</span><span class=\"p\">.</span><span class=\"n\">Piece</span><span class=\"p\">(</span><span class=\"n\">chess</span><span class=\"p\">.</span><span class=\"n\">BISHOP</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">))</span>  \n    \n    <span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n        <span class=\"n\">squares</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">])</span>\n        <span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"n\">squares</span> <span class=\"o\">+</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">board</span><span class=\"p\">.</span><span class=\"n\">attacks</span><span class=\"p\">(</span><span class=\"n\">cmb</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">squares</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>The library does have facilities to compute the controlled squares (with the <code class=\"language-plaintext highlighter-rouge\">attacks</code> method) and you can well give positions without kings. The method for computing the number of cases is dramatically short: I don’t have to design about what is a board, a piece, a square, etc.</p>\n\n<p>Thanks to opportunistic reuse, I have now an elegant and concise solution (bonus: it’s certainly better in terms of performance and testing maturity). For me, it’s a lesson learned: think deeply before not considering (opportunistic) reuse. Retrospectively it is now obvious.</p>\n\n<h2 id=\"tweetification-of-the-solution\">Tweetification of the solution</h2>\n\n<p>Now we are here, why not going further and produce an even more concise solution? The first motivation is that opportunistic reuse has already drastically reduced the amount of code, but we can do better! Secondly, chess has some nice stories with short programs (e.g., chess engine with only <a href=\"https://en.wikipedia.org/wiki/International_Obfuscated_C_Code_Contest#Toledo_Nanochess\">760 characters C</a> or that can work with <a href=\"https://en.wikipedia.org/wiki/1K_ZX_Chess\">only a few bytes in memory</a>)… and I like the art of obfuscation! Thirdly, I am a big fan of incredible piece of art generated out of programs that fit in a tweet (examples: <a href=\"https://twitter.com/Hau_kun/status/1254709350813143040\">e1</a> <a href=\"https://twitter.com/yuruyurau/status/1254810004428750853\">e2</a> <a href=\"https://twitter.com/Hau_kun/status/1246082151017144320\">e3</a>); here the library <a href=\"https://processing.org/\">Processing</a> plays the role of <a href=\"http://python-chess.readthedocs.io/\">python-chess</a> and provides the facilities.</p>\n\n<p>Minification or obfuscation is well-known in programming, but here it’s a bit different: you cannot fully automate the size code reduction, you need to find some tricks to simplify your code and produce the essence of it. You can also play with the specificities of programming language (here Python) to write concise code (I’ve learned many things about Python by doing this exercise).</p>\n\n<p>Here is the final solution:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">chess</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">random</span> <span class=\"k\">as</span> <span class=\"n\">r</span>\n<span class=\"n\">w</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n<span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">64</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)]</span>\n    <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">Board</span><span class=\"p\">(</span><span class=\"n\">fen</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">):</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">set_piece_at</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">],</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">Piece</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">],</span><span class=\"n\">w</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">attacks</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]))</span><span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)],</span><span class=\"n\">s</span><span class=\"p\">))</span><span class=\"o\">&gt;</span><span class=\"mi\">63</span><span class=\"p\">:</span><span class=\"k\">break</span>\n</code></pre></div></div>\n\n<p>I can briefly comment:</p>\n\n<ul>\n  <li>some shortcuts for import in such a way you can use only one letter then in the code</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">&gt;63</code> takes less characters than <code class=\"language-plaintext highlighter-rouge\">==64</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">w=True</code> sounds weird (<code class=\"language-plaintext highlighter-rouge\">True</code> is soooo fundamental, why using a variable?) but is only 6 characters… the reason is that <code class=\"language-plaintext highlighter-rouge\">True</code> is used two times: in the loop and for setting the color (the library has not default color for piece, which is something I understand but not here ;)). So it will cost eight characters… Mine uses 6+2=8. Same, so it’s okay ;-)</li>\n  <li>for the generation of combinations, I’m using a random strategy since it’s shorter in number of characters… and it might be the case that this strategy is faster to find <em>one</em> solution</li>\n  <li>the hack I’m the most proud is the use of an array (see <code class=\"language-plaintext highlighter-rouge\">pk</code>), each representing a kind of piece (5 is for queen, 3 is for bishop)… it allows to call <code class=\"language-plaintext highlighter-rouge\">set_piece_at</code> one time, thus drastically saving some characters (btw you can find older versions of my attempt in a notebook or on Twitter). This kind of trick can hardly be find by a machine (I would be <em>very</em> surprised) and, above all, it’s in fact a way to <em>generalize</em> my solution: I have created an abstraction that allows one to easily modify the kind of piece we want to place</li>\n</ul>\n\n<h2 id=\"generalization-and-beyond-chess-puzzles\">Generalization and beyond chess puzzles</h2>\n\n<p>I have generalized my solution to resolve other (who says <em>any</em>?) chess puzzles:</p>\n\n<ul>\n  <li>placing 3 queens in a 6x6 board in such a way all squares are controlled (you have to hack a bit to manage a 6x6 board, since the library only manages 8x8 board)</li>\n  <li>kings that respect social distancing <img src=\"../assets/kings-socialdistancing.png\" alt=\"Social distancing\" /></li>\n  <li>or the famous n-queens problem.</li>\n</ul>\n\n<p>Again with opportunistic reuse and in a way the program fits in a tweet ;)</p>\n\n<p>There are so many ideas to explore: the use of constraint programming, genetic algorithms, etc. If you’re interested, you can <a href=\"https://github.com/acherm/progpuzzles/blob/master/minimality.ipynb\">explore online the notebook and programs</a>. I highly recommend <a href=\"https://github.com/acherm/progpuzzles/blob/master/Chess%20-%204%20queens%201%20bishop.ipynb\">the notebook of Luc Lesoil</a> who nicely resolves the first chess puzzle in a different and elegant way (eg with numpy and matplotlib to visualize the solution).</p>\n\n<p>Maybe the easiest is to watch my talk <a href=\"https://youtu.be/oHEJJv7vUDw\">Towards programming puzzle spaces available on Youtube</a>, given at the famous <a href=\"http://www.diverse-team.fr\">DiverSE coffees</a>. In addition to what I’ve written in this blog post, I’m also developing and discussing the idea of <em>generating</em> interesting and enough hard puzzles (not necessary chess ones, see <a href=\"https://github.com/acherm/progpuzzles/blob/master/puzzlecoco.ipynb\">examples</a>). I’m basically arguing that whenever you see a puzzle, launch your notebook, resolve, tweetify, generalize, generate, and move to another puzzle space!</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>A chess puzzle is sometimes used to refer to a real-world chess position in which you have to find the good series of moves (e.g., checkmate in 3). It’s good for training your chess skills. Here “puzzle” refers to the general term that challenges the person’s ingenuity and ability to solve some problems. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>","contentSnippet":"A friend posed the following puzzle/problem on social media: “Given a 8x8 chessboard, your goal is to place 4 queens  and 1 bishop so that all squares of the board are controlled (through diagonales/lines; a piece controls the square where it is located).” My usual reaction is to either promptly ignore this kind of fake problem or to try the resolution for real on a concrete chessboard or mentally, sans voir. But in this >quarantine period, I wanted to find a solution with a program (in next blog posts, I may explain how this attitude becomes a pattern beyond chess puzzles). Here is a short story about the process that lead to a Python solution in less than 280 characters that fits in a Tweet.\n\nThe chess puzzle\n\nAn animation is worth than thousands of words for explaining the problem/puzzle1. The animation below almost shows a solution. 4 queens and 1 bishop are placed into a regular chess board. Circles in red represent squares that are not controlled (and yet to be controlled). The number at the top left indicates the number of squares not controlled (the goal is to reach 0). At the end of the animation, there is still missing one square ;)\n\n\n\nIn fact, with a physical chessboard, I quickly found a solution with 63 squares (basically with some tries and errors). But the 64 graal was quite hard to achieve. Maybe there is no solution and it was a joke? I had the feeling I could succeed with a bit of time, but it would be like “déjà vu”: yet another puzzle solved, what’s next? Don’t get me wrong, there is lot of fun and satisfaction to resolve a puzzle, but I wanted to have another kind of fun. So I decided to program a solution!\n\nProgramming\n\nAs most (?) of the programmers, I even had the impression I would be able to quickly find a solution like in a few minutes (1 hour maximum yea). After all the algorithm is quite simple: try (all) possible placements of 4 queens and 1 bishop, assess each try by counting the number of controlled squares, and stop at 64. So I launched a Python notebook and started an implementation.\n\nFor trying possible placements, I consider that the placement of a piece (whether it is a queen or a bishop) is a number between 0 and 63 (see for a visual representation of the board). A possible placement is a 5-tuple and the last element is the placement of the bishop. There are many possible placements and I try to generate all: like this, I’m sure to explore the whole space, I can compute some statistics of all solutions or eventually have a solid proof that there is no solution. There are different variants of the generation: from very naive but too computationally expensive (all possible permutations of length 5) to the exploitation of the symmetry of the chess board.\n\nThe second task is to program a procedure that assesses whether a placement controls 64 squares. You need to compute all squares controlled by a given queen or bishop, and then make the union of all squares. So a bit of maths/algorithms and ways to represent the board/squares/pieces for computing diagonals, horizontals, verticals.\n\nSo I got some solutions (btw you can find more statistics about all solutions of the puzzle):\n\nfor cmb in gen_combinations():\n    n = nbcases_covered(cmb)\n    if (n > 63): # the solution(s)\n        print(cmb, \"=>\", n, ntries)\n        break\n\n\nLooking back at my experience, I was a bit… puzzled ;) I was thinking it should have taken a few minutes but I was wrong, more something like 4 hours. I under-estimated the time of some tasks:\n\n\n  scaling issues with combinations\n  I have to remember how to properly represent a board and movements of pieces. It’s not that easy and I forget also the case of squares a queen don’t control because the bishop blocks the horizontal/vertical movements\n  the amount of code for programming nbcases_covered is an indicator: not that straightforward\n\n\nThere are obviously some threats to my experience (I didn’t perform the task in one shot and the quarantine at home is not a long quiet river…), but I guess similar issues arise when you program from scratch: there are many (accidental) details to deal with.\n\nOpportunistic Reuse\n\nDon’t you hear the voice of “Don’t reinvent the wheel, reuse!”? This principle applies to many cases, but reuse what? it’s a chess puzzle with 4 queens and 1 bishop… Is there a chess library that supports it?\n\nI knew python-chess quite well, I even implemented a chess game player on top of it, within a notebook (see my blog post). But I was thinking the library was not designed for tackling my problem, like: it cannot handle illegal chess positions (eg without kings!), it won’t help me much (eg it’s mainly a library for reading PGN game), or I will hardly generalize my solution to strange cases (eg like puzzle with 6x6 board) and I don’t want to stuck on a third party library. I was wrong and missed an opportunity.\n\nSo I decided to apply what I called opportunistic reuse, i.e., reusing a library that is not supposed to resolve your exact problem (who says “hack” a library). After further exploring the library, all the assumptions above collapsed:\n\n# we reuse built-in facilities of python-chess for generating moves\ndef nbcases_covered_reuse(cmb):\n    board = chess.Board() \n    board.clear_board()\n  \n    for q in range(0, 4):\n        board.set_piece_at(cmb[q], chess.Piece(chess.QUEEN, color=True))\n    board.set_piece_at(cmb[4], chess.Piece(chess.BISHOP, color=True))  \n    \n    squares = []\n    for q in range(0, 5):\n        squares.append(cmb[q])\n        squares = squares + list(board.attacks(cmb[q]))\n\n    return len(set(squares))\n\n\nThe library does have facilities to compute the controlled squares (with the attacks method) and you can well give positions without kings. The method for computing the number of cases is dramatically short: I don’t have to design about what is a board, a piece, a square, etc.\n\nThanks to opportunistic reuse, I have now an elegant and concise solution (bonus: it’s certainly better in terms of performance and testing maturity). For me, it’s a lesson learned: think deeply before not considering (opportunistic) reuse. Retrospectively it is now obvious.\n\nTweetification of the solution\n\nNow we are here, why not going further and produce an even more concise solution? The first motivation is that opportunistic reuse has already drastically reduced the amount of code, but we can do better! Secondly, chess has some nice stories with short programs (e.g., chess engine with only 760 characters C or that can work with only a few bytes in memory)… and I like the art of obfuscation! Thirdly, I am a big fan of incredible piece of art generated out of programs that fit in a tweet (examples: e1 e2 e3); here the library Processing plays the role of python-chess and provides the facilities.\n\nMinification or obfuscation is well-known in programming, but here it’s a bit different: you cannot fully automate the size code reduction, you need to find some tricks to simplify your code and produce the essence of it. You can also play with the specificities of programming language (here Python) to write concise code (I’ve learned many things about Python by doing this exercise).\n\nHere is the final solution:\n\nimport chess as c,random as r\nw=True\npk=[5,5,5,5,3]\nwhile(w):\n    s=[r.randrange(0,64) for i in range(0,5)]\n    b=c.Board(fen=None)\n    for q in range(0,5):b.set_piece_at(s[q],c.Piece(pk[q],w))\n    if len(set()|(*[list(b.attacks(s[q]))for q in range(0,5)],s))>63:break\n\n\nI can briefly comment:\n\n\n  some shortcuts for import in such a way you can use only one letter then in the code\n  >63 takes less characters than ==64\n  w=True sounds weird (True is soooo fundamental, why using a variable?) but is only 6 characters… the reason is that True is used two times: in the loop and for setting the color (the library has not default color for piece, which is something I understand but not here ;)). So it will cost eight characters… Mine uses 6+2=8. Same, so it’s okay ;-)\n  for the generation of combinations, I’m using a random strategy since it’s shorter in number of characters… and it might be the case that this strategy is faster to find one solution\n  the hack I’m the most proud is the use of an array (see pk), each representing a kind of piece (5 is for queen, 3 is for bishop)… it allows to call set_piece_at one time, thus drastically saving some characters (btw you can find older versions of my attempt in a notebook or on Twitter). This kind of trick can hardly be find by a machine (I would be very surprised) and, above all, it’s in fact a way to generalize my solution: I have created an abstraction that allows one to easily modify the kind of piece we want to place\n\n\nGeneralization and beyond chess puzzles\n\nI have generalized my solution to resolve other (who says any?) chess puzzles:\n\n\n  placing 3 queens in a 6x6 board in such a way all squares are controlled (you have to hack a bit to manage a 6x6 board, since the library only manages 8x8 board)\n  kings that respect social distancing \n  or the famous n-queens problem.\n\n\nAgain with opportunistic reuse and in a way the program fits in a tweet ;)\n\nThere are so many ideas to explore: the use of constraint programming, genetic algorithms, etc. If you’re interested, you can explore online the notebook and programs. I highly recommend the notebook of Luc Lesoil who nicely resolves the first chess puzzle in a different and elegant way (eg with numpy and matplotlib to visualize the solution).\n\nMaybe the easiest is to watch my talk Towards programming puzzle spaces available on Youtube, given at the famous DiverSE coffees. In addition to what I’ve written in this blog post, I’m also developing and discussing the idea of generating interesting and enough hard puzzles (not necessary chess ones, see examples). I’m basically arguing that whenever you see a puzzle, launch your notebook, resolve, tweetify, generalize, generate, and move to another puzzle space!\n\n\n  \n    \n      A chess puzzle is sometimes used to refer to a real-world chess position in which you have to find the good series of moves (e.g., checkmate in 3). It’s good for training your chess skills. Here “puzzle” refers to the general term that challenges the person’s ingenuity and ability to solve some problems. ↩","id":"http://blog.mathieuacher.com/ProgrammingChessPuzzles","isoDate":"2020-04-22T09:54:29.000Z"},{"title":"On the Longest Chess Game Ever(!?)","link":"http://blog.mathieuacher.com/LongestChessGame/","pubDate":"2020-04-10T09:54:29.000Z","author":"Mathieu Acher","content":"<p>Do you want to see a chess game with almost 18,000 half-moves? Really? OK, here is a <a href=\"https://www.youtube.com/watch?v=XhnxuWKYm-w\">Youtube video of almost 5 hours</a>\nBut wait: How is it possible? What’s the point? In practice, the longest games are up to 250 moves and such games are really outliers (the mean is certainly less than 40 moves).\nSo Tom Murphy did it again with his <a href=\"http://tom7.org/chess/ in a row\">6th chess paper</a> at the very prestigious <a href=\"http://sigbovik.org/2020/\">SIGBOVIK 2020</a> (have a look at other papers, it’s both funny and brilliant).\nTom generated a game of 17,697 plies (8849 moves), certainly the longest chess game ever.</p>\n\n<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/XhnxuWKYm-w\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<h2 id=\"tricks\">Tricks</h2>\n\n<p>8K moves is much, much more than 40. You can try to manually move some pieces on a chessboard and generate a long game, but I guess you won’t try much ;)\nThe idea is of course to simulate a very long game with a <em>program</em>.\nYou can start quite naively with a program that generates a sequence of random, legal moves.\nHowever, the game might end quickly since there could be an early checkmate or no material leading to draw along the way. Reaching 18K seems hard!</p>\n\n<p>The idea of Tom is to exploit the so-called 75-move rule. I was aware of the 50-move rule, but not the 75 one. Let me explain. \nThe 50-move rule is well-known and states that a player can claim a draw if no capture has been made and no pawn has been moved in the last 50 moves. \nBut “in 2014 FIDE amended the rules to eliminate the possibility that a game could continue without end. Rule 9.6b states that if 75 consecutive moves have been made without movement of any pawn or any capture, the game is drawn…” see <a href=\"https://en.wikipedia.org/wiki/Fifty-move_rule\">Wikipedia</a> for more details.\nYou can use and abuse of this trick to generate sequence of moves with no capture during 75 moves. Basically, nothing special happens, it’s just ridiculous (?) movement to make 75 moves without captures and thus increment the length of the game.</p>\n\n<p>Another trick is the <del>threefold</del> fivefold repetition. Here I’m quoting the paper:</p>\n\n<blockquote>\n  <p>The 75-move rule is rarely applied in practice, but its counterpart, “threefold repetition” is often the cause of draws in chess.\nThis rule states that if the same position appears three game ends prematurely in a draw because of the 75-move rule.\ntimes, the players can claim a draw:\n      9.2.2. Positions are considered the same if and only if the\n      same player has the move, pieces of the same kind\n      and colour occupy the same squares and the possi-\n      ble moves of all the pieces of both players are the\n      same. […]\nLike the 75-move rule, this rule has an optional version (upon\nthree repetitions) and a mandatory one in 9.6:\n     [The game is a draw if . . . ]\n     9.6.1. the same position has appeared, as in 9.2.2, at\n     least five times</p>\n</blockquote>\n\n<p>Basically the game is so long because precisely Tom Murphy nicely exploits the 75-move rule and the 5-fold repetition.\nThere are of course other subtleties and hacks, and I let you discover them ;)</p>\n\n<h2 id=\"viewing-the-game\">Viewing the game</h2>\n\n<p>Before digging into the details, my first reaction was to view/see the generated game.\n8K moves is quite unusual though. It might be for these reasons that the awesome <a href=\"https://lichess.org/\">lichess</a> open-source service has a 300 moves limit (see <a href=\"discussion\">https://reddit.com/r/chess/comments/dgkp8c/til_there_is_a_300move_limit_for_games_on_lichess/</a>) when importing a game in PGN format. I’ve heard Chessbase has the same 300 limitations.\nI’ve tried many services until finding one that can truly open the PGN file (btw accessible here: http://tom7.org/chess/longest.pgn). \n@chesscom_fr fails, chesspastebin stops after 4400 moves <a href=\"https://chesspastebin.com/view/22411\">https://chesspastebin.com/view/22411</a>.\nI’ve succeeded with <a href=\"https://ingram-braun.net/erga/online-pgn-viewer/\">https://ingram-braun.net/erga/online-pgn-viewer/</a> after a subtle edit.</p>\n\n<p>Indeed, “1786. Qb4 Rg8” is considered ambiguous as both rooks on h8 and g6 can move on g8. So you have to modify the PGN (see below). \nI was suspecting Tom did it on purpose (“Many chess programs fail to load the whole game, but this is because they decided not to implement the full glory of chess.”)\nbut in fact he gave an interesting comment on <a href=\"https://twitter.com/tom7/status/1245909267720343554\">Twitter</a></p>\n\n<blockquote>\n  <p>This was actually a bug in my PGN code (it considered rook and rook-that-can-still-castle as different for disambiguation purposes).\nNow fixed (should be Rgg8 since file-based disambiguation takes precedence), thanks!!</p>\n</blockquote>\n\n<p>Anyway, I’ve also succeeded to open the game with my chess player reader made on top of Jupyter notebook (see <a href=\"http://blog.mathieuacher.com/JupyterChess/\">my previous blog post</a>) and with python-chess library. Like this, I can have further fun (see below)</p>\n\n<p><img src=\"/assets/longest-jupyter.png\" alt=\"Extraction process\" /></p>\n\n<h2 id=\"youtube-and-gifs\">Youtube and GIFs</h2>\n\n<p>I’ve generated three videos of the chess game (all uploaded to Youtube):</p>\n<ul>\n  <li><a href=\"https://www.youtube.com/watch?v=XhnxuWKYm-w\">https://www.youtube.com/watch?v=XhnxuWKYm-w</a> almost 5 hours, 1 second per ply… you can incrase the speed through parameters (x2 max?)</li>\n  <li><a href=\"https://www.youtube.com/watch?v=Y0QurXfu-EY\">https://www.youtube.com/watch?v=Y0QurXfu-EY</a> another variant, less than 3 minutes with a huge speed up (100 frames/plies per second)</li>\n  <li><a href=\"https://www.youtube.com/watch?v=KXVPpRZ0UkU\">https://www.youtube.com/watch?v=KXVPpRZ0UkU</a> yet another variant, less than 4 minutes with 75 plies per second (to mimic the 75-rule and possible “repetitions”)</li>\n</ul>\n\n<p>I’ve tried to generate some GIFs, but it’s hard to find a good tradeoff between size, quality and move speed of the resulting GIF file.\nYou can get a file of 1Gb and a visually unpleasant series of images…\nI’ve made some attempts (I assume you have generated the 17K+ positions as PGN files named output1.pgn, output2.pgn, …, ouput17686.pgn)</p>\n\n<p>With <code class=\"language-plaintext highlighter-rouge\">convert</code> beware of the order of the file, the time/memory it can take… basically</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">convert <span class=\"si\">$(</span><span class=\"k\">for </span>a <span class=\"k\">in</span> <span class=\"sb\">`</span><span class=\"nb\">ls</span> <span class=\"k\">*</span>.png | <span class=\"nb\">sort</span> <span class=\"nt\">-V</span><span class=\"sb\">`</span><span class=\"p\">;</span> <span class=\"k\">do </span><span class=\"nb\">printf</span> <span class=\"nt\">--</span> <span class=\"s2\">\"-delay 50 %s \"</span> <span class=\"nv\">$a</span><span class=\"p\">;</span> <span class=\"k\">done</span><span class=\"p\">;</span> <span class=\"si\">)</span> output.gif</code></pre></figure>\n\n<p>is OK, but it assumes that PNG files are 200x200, otherwise the process is killed (17K+ files to assemble!)</p>\n\n<p>With <code class=\"language-plaintext highlighter-rouge\">ffmpeg</code> beware of the order (again)</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">ffmpeg <span class=\"nt\">-framerate</span> 10 <span class=\"nt\">-start_number</span> 1 <span class=\"nt\">-i</span> <span class=\"s1\">'output%d.png'</span> output.gif</code></pre></figure>\n\n<p>is OK, but the file can be quite big.\nYou can also try a conversion of mp4 file to GIF with <code class=\"language-plaintext highlighter-rouge\">ffmpeg</code>.</p>\n\n<p>In any case, I recommend the use of the awesome <a href=\"https://www.lcdf.org/gifsicle/\">gifsicle</a> to optimize the size of the file, with something like</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-bash\" data-lang=\"bash\">gifsicle <span class=\"nt\">-i</span> output.gif <span class=\"nt\">--resize</span> 100x100 <span class=\"nt\">-O3</span> <span class=\"nt\">--colors</span> 10 <span class=\"nt\">-o</span> output-opt.gif</code></pre></figure>\n\n<p>Overall, I’ve succeeded to obtain a <a href=\"https://github.com/acherm/chess-jupyter/blob/master/out1-opt.gif\">GIF of less than 3Mb</a>, with the full game at a decent speed, and visually OK (maybe too small though). You can see the <a href=\"https://github.com/acherm/chess-jupyter/blob/master/out1-opt.gif\">GIF on Github</a>.</p>\n\n<h2 id=\"going-further\">Going further</h2>\n\n<p>Resources:</p>\n<ul>\n  <li>paper: <a href=\"http://tom7.org/chess/longest.pdf\">http://tom7.org/chess/longest.pdf</a></li>\n  <li>source code: <a href=\"https://sourceforge.net/p/tom7misc/svn/HEAD/tree/trunk/chess/longest.cc#l1\">https://sourceforge.net/p/tom7misc/svn/HEAD/tree/trunk/chess/longest.cc#l1</a></li>\n  <li>game (PGN format): <a href=\"http://tom7.org/chess/longest.pgn\">http://tom7.org/chess/longest.pgn</a></li>\n</ul>\n\n<p>Some ideas for future work:</p>\n<ul>\n  <li>obvious one: Can we generate a longer chess game? As stated in the paper, the generated game is clearly not unique… I think there is room to experiment further with the algorithm and the code. A formal proof that it is (if it is the case) the longest game would be great.</li>\n  <li>evolution of the game: the game is not a realistic one with series of moves that would look crazy to human and chess players… I’m wondering how a computer chess engine like Stockish would evaluate the quality of the moves and the overall game. I’m suspecting many “swings” can occur, with black winning, white winning, and so forth. Some challenges: chess engines implement the 50-rule and not the 75-rule… we have to scale up the process: with 17K plies to analyze, and at least a few seconds per position needed to compute the evaluation score, you certainly need several machines. I would like to integrate the score evolution as part of the Youtube video, as an additional piece of art.</li>\n  <li>sonification of the game: related to the previous point, maybe we can associate a sound to the (score) evolution of the game. It would be a long and wonderful movie. (by the way, in general, sonification of chess games based on the input of chess engines has not caught much attention: would love to explore this idea!)</li>\n</ul>\n\n<p>I really enjoy reading the paper, the idea, the algorithm, the source code. It is a piece of art.</p>","contentSnippet":"Do you want to see a chess game with almost 18,000 half-moves? Really? OK, here is a Youtube video of almost 5 hours\nBut wait: How is it possible? What’s the point? In practice, the longest games are up to 250 moves and such games are really outliers (the mean is certainly less than 40 moves).\nSo Tom Murphy did it again with his 6th chess paper at the very prestigious SIGBOVIK 2020 (have a look at other papers, it’s both funny and brilliant).\nTom generated a game of 17,697 plies (8849 moves), certainly the longest chess game ever.\n\n\n\nTricks\n\n8K moves is much, much more than 40. You can try to manually move some pieces on a chessboard and generate a long game, but I guess you won’t try much ;)\nThe idea is of course to simulate a very long game with a program.\nYou can start quite naively with a program that generates a sequence of random, legal moves.\nHowever, the game might end quickly since there could be an early checkmate or no material leading to draw along the way. Reaching 18K seems hard!\n\nThe idea of Tom is to exploit the so-called 75-move rule. I was aware of the 50-move rule, but not the 75 one. Let me explain. \nThe 50-move rule is well-known and states that a player can claim a draw if no capture has been made and no pawn has been moved in the last 50 moves. \nBut “in 2014 FIDE amended the rules to eliminate the possibility that a game could continue without end. Rule 9.6b states that if 75 consecutive moves have been made without movement of any pawn or any capture, the game is drawn…” see Wikipedia for more details.\nYou can use and abuse of this trick to generate sequence of moves with no capture during 75 moves. Basically, nothing special happens, it’s just ridiculous (?) movement to make 75 moves without captures and thus increment the length of the game.\n\nAnother trick is the threefold fivefold repetition. Here I’m quoting the paper:\n\n\n  The 75-move rule is rarely applied in practice, but its counterpart, “threefold repetition” is often the cause of draws in chess.\nThis rule states that if the same position appears three game ends prematurely in a draw because of the 75-move rule.\ntimes, the players can claim a draw:\n      9.2.2. Positions are considered the same if and only if the\n      same player has the move, pieces of the same kind\n      and colour occupy the same squares and the possi-\n      ble moves of all the pieces of both players are the\n      same. […]\nLike the 75-move rule, this rule has an optional version (upon\nthree repetitions) and a mandatory one in 9.6:\n     [The game is a draw if . . . ]\n     9.6.1. the same position has appeared, as in 9.2.2, at\n     least five times\n\n\nBasically the game is so long because precisely Tom Murphy nicely exploits the 75-move rule and the 5-fold repetition.\nThere are of course other subtleties and hacks, and I let you discover them ;)\n\nViewing the game\n\nBefore digging into the details, my first reaction was to view/see the generated game.\n8K moves is quite unusual though. It might be for these reasons that the awesome lichess open-source service has a 300 moves limit (see https://reddit.com/r/chess/comments/dgkp8c/til_there_is_a_300move_limit_for_games_on_lichess/) when importing a game in PGN format. I’ve heard Chessbase has the same 300 limitations.\nI’ve tried many services until finding one that can truly open the PGN file (btw accessible here: http://tom7.org/chess/longest.pgn). \n@chesscom_fr fails, chesspastebin stops after 4400 moves https://chesspastebin.com/view/22411.\nI’ve succeeded with https://ingram-braun.net/erga/online-pgn-viewer/ after a subtle edit.\n\nIndeed, “1786. Qb4 Rg8” is considered ambiguous as both rooks on h8 and g6 can move on g8. So you have to modify the PGN (see below). \nI was suspecting Tom did it on purpose (“Many chess programs fail to load the whole game, but this is because they decided not to implement the full glory of chess.”)\nbut in fact he gave an interesting comment on Twitter\n\n\n  This was actually a bug in my PGN code (it considered rook and rook-that-can-still-castle as different for disambiguation purposes).\nNow fixed (should be Rgg8 since file-based disambiguation takes precedence), thanks!!\n\n\nAnyway, I’ve also succeeded to open the game with my chess player reader made on top of Jupyter notebook (see my previous blog post) and with python-chess library. Like this, I can have further fun (see below)\n\n\n\nYoutube and GIFs\n\nI’ve generated three videos of the chess game (all uploaded to Youtube):\n\n  https://www.youtube.com/watch?v=XhnxuWKYm-w almost 5 hours, 1 second per ply… you can incrase the speed through parameters (x2 max?)\n  https://www.youtube.com/watch?v=Y0QurXfu-EY another variant, less than 3 minutes with a huge speed up (100 frames/plies per second)\n  https://www.youtube.com/watch?v=KXVPpRZ0UkU yet another variant, less than 4 minutes with 75 plies per second (to mimic the 75-rule and possible “repetitions”)\n\n\nI’ve tried to generate some GIFs, but it’s hard to find a good tradeoff between size, quality and move speed of the resulting GIF file.\nYou can get a file of 1Gb and a visually unpleasant series of images…\nI’ve made some attempts (I assume you have generated the 17K+ positions as PGN files named output1.pgn, output2.pgn, …, ouput17686.pgn)\n\nWith convert beware of the order of the file, the time/memory it can take… basically\n\nconvert $(for a in `ls *.png | sort -V`; do printf -- \"-delay 50 %s \" $a; done; ) output.gif\n\nis OK, but it assumes that PNG files are 200x200, otherwise the process is killed (17K+ files to assemble!)\n\nWith ffmpeg beware of the order (again)\n\nffmpeg -framerate 10 -start_number 1 -i 'output%d.png' output.gif\n\nis OK, but the file can be quite big.\nYou can also try a conversion of mp4 file to GIF with ffmpeg.\n\nIn any case, I recommend the use of the awesome gifsicle to optimize the size of the file, with something like\n\ngifsicle -i output.gif --resize 100x100 -O3 --colors 10 -o output-opt.gif\n\nOverall, I’ve succeeded to obtain a GIF of less than 3Mb, with the full game at a decent speed, and visually OK (maybe too small though). You can see the GIF on Github.\n\nGoing further\n\nResources:\n\n  paper: http://tom7.org/chess/longest.pdf\n  source code: https://sourceforge.net/p/tom7misc/svn/HEAD/tree/trunk/chess/longest.cc#l1\n  game (PGN format): http://tom7.org/chess/longest.pgn\n\n\nSome ideas for future work:\n\n  obvious one: Can we generate a longer chess game? As stated in the paper, the generated game is clearly not unique… I think there is room to experiment further with the algorithm and the code. A formal proof that it is (if it is the case) the longest game would be great.\n  evolution of the game: the game is not a realistic one with series of moves that would look crazy to human and chess players… I’m wondering how a computer chess engine like Stockish would evaluate the quality of the moves and the overall game. I’m suspecting many “swings” can occur, with black winning, white winning, and so forth. Some challenges: chess engines implement the 50-rule and not the 75-rule… we have to scale up the process: with 17K plies to analyze, and at least a few seconds per position needed to compute the evaluation score, you certainly need several machines. I would like to integrate the score evolution as part of the Youtube video, as an additional piece of art.\n  sonification of the game: related to the previous point, maybe we can associate a sound to the (score) evolution of the game. It would be a long and wonderful movie. (by the way, in general, sonification of chess games based on the input of chess engines has not caught much attention: would love to explore this idea!)\n\n\nI really enjoy reading the paper, the idea, the algorithm, the source code. It is a piece of art.","id":"http://blog.mathieuacher.com/LongestChessGame","isoDate":"2020-04-10T09:54:29.000Z"},{"title":"Is Cercle the new Essential Mix?","link":"http://blog.mathieuacher.com/EssentialMixCercle/","pubDate":"2020-03-18T00:00:00.000Z","author":"Mathieu Acher","content":"<p>This blog post is an excuse to share some good music and thoughts. Essential Mix aka EM is a super famous radio show on BBC 1 featuring artists (DJs/producers) that deliver a two-hour mix of electronic dance music. I haven’t listened all weekly essential mix since 1993, but I’ve been lucky to hear many, thanks to Internet. Essential Mix is incredible because of the diversity of artists and quality of the shows. Here is an annotated list of my 10 best essential mix (you can easily find them on Youtube or soundcloud):</p>\n\n<ul>\n  <li><a href=\"https://www.google.com/search?q=sasha+and+digweed+essential+mix+2002\">Sasha and Digweed 2002</a>: The iconic duo delivers a master piece, a legendary mix. It’s <a href=\"https://en.wikipedia.org/wiki/Renaissance:_The_Mix_Collection\">Renaissance</a> on rocket and  progressive house/trance at its best.</li>\n  <li><a href=\"https://www.google.com/search?q=gabriel+and+dresden+essential+mix+2003\">Gabriel &amp; Dresden 2003</a>: The duo was not that famous in 2003 (this <a href=\"https://soundcloud.com/rave_on/gabriel-dresden-live-global-dj-broadcast-05082002\">mix</a> in 2002 was a nice alarm). This EM revealed Gabriel &amp; Dresden to the world. They’re never as good as in combining their own creations/remixes with other music (not necessarily “pure” electronic music).</li>\n  <li><a href=\"https://www.google.com/search?q=gabriel+and+dresden+essential+mix+2006\">Gabriel &amp; Dresden (07-05-2006)</a>: same comments as in 2003, I admire their own creations and their ability to select the right other tracks, at the right time of the mix. A fantastic journey</li>\n  <li><a href=\"https://www.google.com/search?q=above+and+beyond+essential+mix+2004\">Above and Beyond 2004</a>: The UK trio is having a great carreer and the year 2004 was one of the best period for trance music. This EM starts and ends with vocal recommendations and is full of now classics.</li>\n  <li><a href=\"https://www.google.com/search?q=sasha+essential+mix+2005\">Sasha 2005</a>: essential mix of the year 2005, the second hour is unbeatable. Sasha uses quite sophisticated software (Ableton) on top of an excellent selection and remixes.</li>\n  <li><a href=\"https://www.google.com/search?q=hernan+cattaneo+essential+mix+2008\">Hernan Cattaneo 2008</a>: The Argentinian is one of the most regular DJ: His own radio show <a href=\"https://www.hernancattaneo.com/music\">Resident</a> has up to 400 episodes. This EM reflects his capacity to select unique tracks, assemble them into a coherent set, and produces an incredible atmosphere.</li>\n  <li><a href=\"https://www.google.com/search?q=james+zabiela+(moon+theme)+-+essential+mix+on+bbc+radio+1\">James Zabiela (Moon theme, 2010)</a>: Inspired by the sci-fi Moon movie, JZ delivers an unique journey. It’s not a mix, it’s a film.</li>\n  <li><a href=\"https://www.google.com/search?q=tiesto+essential+mix+on+2014\">Tiesto in 2014</a>: quite strange to see this EM in the list. Let me explain. Tiesto was incredible in 2000’s and was/is continuously declining quality-wise (in profit to mainstream music and business $$$). This essential mix in 2014 is neither his brilliant 2000’s style nor his commercial 2020’s style: it’s in-between, I would say in a middle of nowhere (as he said, “chill outs” and music he loves). I think Tiesto wanted to show that he’s still capable of doing great music – he totally succeeded in this unique mix.</li>\n  <li><a href=\"https://www.google.com/search?q=mo+shic+essential+mix+on+2003\">Mo Shic 2003 02 23</a>: The ambient, dark and psychedelic, is quite unique and some tracks are simply georgous. I’m not a usual fan of this kind of music, and it’s one of the key strenght of essential mix: you can discover the multiple facets of eletronic music.</li>\n  <li><a href=\"https://www.google.com/search?q=trentemoller+essential+mix+2006\">Trentemoller (2006.10.15)</a>: this mix is better than his incredible album: nothing to add (oh yes: elected essential mix of the year 2006)</li>\n</ul>\n\n<p>I always had the impression DJs give their very best at EM for delivering an unique story and putting their stamp on the history of music. It’s not just about concatenating (their famous) tracks: Essential Mix deserves much respect and sounds a key opportunity for these artists to share their overall vision of music.<br />\nEM was and is an opportunity to discover different music (from trance to progressive to deep house to whatever) and talents (or confirms exceptionnal artists!).</p>\n\n<p>The way we listen to music has largely evolved during the last decade. It’s more streaming services and Youtube than classical radio and mp3 found in Napster or torrents. Now there are tons of mixes/shows/mixtapes/emissions/… available. <a href=\"https://www.youtube.com/channel/UCPKT_csvP72boVX0XrMtagQ\">Cercle</a> is one of them and broadcasts live electronic music concerts from unusual locations (you can find all shows on Youtube). \nBy unusual, I mean: a headlight, a tour, a strange cup with no public, or a rooftop landing, moutains at 10000 feet, and a fortress with thousands people. \nWhat’s incredible with Cercle is the selection of artists together with the selection of locations. \nLike EM, the diversity of shows is mind-blowing with international artists (some are well-known, but some are great surprises, at least to me), different kind of electronic music (from pure house to deep techno), in different places and atmosphere. \nLike EM, I have impression artists give their best and build a story with their music and the place. It sounds and looks like a movie, a visual journey (like the best EMs). \nThe difference with EM is mainly visual, but I think it adds an incredible value and pushes artists. EM used to have “live” shows, with Cercle it’s by construction.<br />\nIt’s hard to beat Essential Mix, but Cercle has certainly more freedom to attract new talents and a richer format that better emphasizes the power of electronic music. \nHere is a list of my 10 best Cercle:</p>\n<ul>\n  <li><a href=\"https://www.youtube.com/watch?v=V2OCXiubvr0\">Christian Löffler</a></li>\n  <li><a href=\"https://youtu.be/xF_QkfZI1mM?t=4692\">Stephan Bodzin</a></li>\n  <li><a href=\"https://youtu.be/LL0b2ZKEJoY?t=3969\">N’to at  Tour Saint-Jacques for Cercle</a></li>\n  <li><a href=\"https://youtu.be/b_fKzTdMViQ?t=2133\">N’to (Sinners party) at Concorde for Cercle</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=w1ElkNNsfm8&amp;t=\">Jan Blomqvist</a></li>\n  <li><a href=\"https://youtu.be/XxSmY7VNaCk?t=3164\">HVOB</a></li>\n  <li><a href=\"https://youtu.be/-Au20qrJLB0?t=4436\">Stimming</a></li>\n  <li><a href=\"https://youtu.be/CNCuGmcBqT4?t=5265\">Fideles</a></li>\n  <li><a href=\"https://youtu.be/h96MGcsi7GQ?t=4090\">Lee Burridge</a></li>\n  <li><a href=\"https://youtu.be/dQjkqyc5nlc?t=4632\">Mathame</a></li>\n</ul>\n\n<p>So is <a href=\"https://www.youtube.com/channel/UCPKT_csvP72boVX0XrMtagQ\">Cercle</a> the new Essential Mix? \nIt’s too early and fresh, but I found many similarities (quality and diversity-wise) and I see Cercle as a powerful evolution of EM. Both magnify artists and music. If Cercle wants to definitely win the game, I have a suggestion: invite Gabriel And Dresden as well as Hernan Cattanero in unusual locations of France ;)</p>","contentSnippet":"This blog post is an excuse to share some good music and thoughts. Essential Mix aka EM is a super famous radio show on BBC 1 featuring artists (DJs/producers) that deliver a two-hour mix of electronic dance music. I haven’t listened all weekly essential mix since 1993, but I’ve been lucky to hear many, thanks to Internet. Essential Mix is incredible because of the diversity of artists and quality of the shows. Here is an annotated list of my 10 best essential mix (you can easily find them on Youtube or soundcloud):\n\n\n  Sasha and Digweed 2002: The iconic duo delivers a master piece, a legendary mix. It’s Renaissance on rocket and  progressive house/trance at its best.\n  Gabriel & Dresden 2003: The duo was not that famous in 2003 (this mix in 2002 was a nice alarm). This EM revealed Gabriel & Dresden to the world. They’re never as good as in combining their own creations/remixes with other music (not necessarily “pure” electronic music).\n  Gabriel & Dresden (07-05-2006): same comments as in 2003, I admire their own creations and their ability to select the right other tracks, at the right time of the mix. A fantastic journey\n  Above and Beyond 2004: The UK trio is having a great carreer and the year 2004 was one of the best period for trance music. This EM starts and ends with vocal recommendations and is full of now classics.\n  Sasha 2005: essential mix of the year 2005, the second hour is unbeatable. Sasha uses quite sophisticated software (Ableton) on top of an excellent selection and remixes.\n  Hernan Cattaneo 2008: The Argentinian is one of the most regular DJ: His own radio show Resident has up to 400 episodes. This EM reflects his capacity to select unique tracks, assemble them into a coherent set, and produces an incredible atmosphere.\n  James Zabiela (Moon theme, 2010): Inspired by the sci-fi Moon movie, JZ delivers an unique journey. It’s not a mix, it’s a film.\n  Tiesto in 2014: quite strange to see this EM in the list. Let me explain. Tiesto was incredible in 2000’s and was/is continuously declining quality-wise (in profit to mainstream music and business $$$). This essential mix in 2014 is neither his brilliant 2000’s style nor his commercial 2020’s style: it’s in-between, I would say in a middle of nowhere (as he said, “chill outs” and music he loves). I think Tiesto wanted to show that he’s still capable of doing great music – he totally succeeded in this unique mix.\n  Mo Shic 2003 02 23: The ambient, dark and psychedelic, is quite unique and some tracks are simply georgous. I’m not a usual fan of this kind of music, and it’s one of the key strenght of essential mix: you can discover the multiple facets of eletronic music.\n  Trentemoller (2006.10.15): this mix is better than his incredible album: nothing to add (oh yes: elected essential mix of the year 2006)\n\n\nI always had the impression DJs give their very best at EM for delivering an unique story and putting their stamp on the history of music. It’s not just about concatenating (their famous) tracks: Essential Mix deserves much respect and sounds a key opportunity for these artists to share their overall vision of music.\nEM was and is an opportunity to discover different music (from trance to progressive to deep house to whatever) and talents (or confirms exceptionnal artists!).\n\nThe way we listen to music has largely evolved during the last decade. It’s more streaming services and Youtube than classical radio and mp3 found in Napster or torrents. Now there are tons of mixes/shows/mixtapes/emissions/… available. Cercle is one of them and broadcasts live electronic music concerts from unusual locations (you can find all shows on Youtube). \nBy unusual, I mean: a headlight, a tour, a strange cup with no public, or a rooftop landing, moutains at 10000 feet, and a fortress with thousands people. \nWhat’s incredible with Cercle is the selection of artists together with the selection of locations. \nLike EM, the diversity of shows is mind-blowing with international artists (some are well-known, but some are great surprises, at least to me), different kind of electronic music (from pure house to deep techno), in different places and atmosphere. \nLike EM, I have impression artists give their best and build a story with their music and the place. It sounds and looks like a movie, a visual journey (like the best EMs). \nThe difference with EM is mainly visual, but I think it adds an incredible value and pushes artists. EM used to have “live” shows, with Cercle it’s by construction.\nIt’s hard to beat Essential Mix, but Cercle has certainly more freedom to attract new talents and a richer format that better emphasizes the power of electronic music. \nHere is a list of my 10 best Cercle:\n\n  Christian Löffler\n  Stephan Bodzin\n  N’to at  Tour Saint-Jacques for Cercle\n  N’to (Sinners party) at Concorde for Cercle\n  Jan Blomqvist\n  HVOB\n  Stimming\n  Fideles\n  Lee Burridge\n  Mathame\n\n\nSo is Cercle the new Essential Mix? \nIt’s too early and fresh, but I found many similarities (quality and diversity-wise) and I see Cercle as a powerful evolution of EM. Both magnify artists and music. If Cercle wants to definitely win the game, I have a suggestion: invite Gabriel And Dresden as well as Hernan Cattanero in unusual locations of France ;)","id":"http://blog.mathieuacher.com/EssentialMixCercle","isoDate":"2020-03-18T00:00:00.000Z"},{"title":"GPT-2 and Chess","link":"http://blog.mathieuacher.com/GTP2AndChess/","pubDate":"2020-01-08T09:54:29.000Z","author":"Mathieu Acher","content":"<p>Shawn Presser has <a href=\"https://twitter.com/theshawwn/status/1214013710173425665\">released</a> an intringuing chess engine based on deep learning-based language model (GPT-2). The model was trained on the Kingbase dataset (3.5 million chess games in PGN notation) in 24 hours using 146 TPUs (ouch!). The engine is purely based on <em>text</em> prediction with no concept of chess. Though GPT-2 has already delivered promising/bluffing results for text generation, one can be skeptical and wonder whether it does work for chess.</p>\n\n<p>I have quickly experimented thanks to a nice notebook where you can play chess against the GPT-2 engine.\nI’ve only played 6 games, but (surprinsingly) it’s enough to draw some conclusions.\nLet’s analyse them case by case, following the order of the played games:</p>\n<ul>\n  <li>in the <a href=\"https://lichess.org/HLyQkZz7\">first game</a> I started with a rare/stupid opening just to see what’s going on… GPT-2 has been trained on a corpus of games: it can excel for the very first moves (the opening) since many examples are available, especially for positions after 1.e4 or 1.d4 the most frequent moves. Despite 1.e4 e5 2. Bc4 Nf6 3.d4 (an infrequent line/sequence of moves), GPT-2 played OK. But quickly it became really bad and mate in 14 moves by playing quite normal.</li>\n  <li>second game is in the same spirit (see <a href=\"https://lichess.org/eCxIwD2t\">here</a>) I started with an infrequent move (1.b4), first moves of GPT-2 are OK, and then strong mistakes and mate in only 15 moves by playing as usual (as best as I can).</li>\n  <li>third was perhaps <a href=\"https://lichess.org/VGsWKdY2\">more interesting:</a> Quite classical opening this time with a spanish variation… Blunder after 12 moves (presumably since GPT-2 is out of the usual opening theory) and quickly winning for white</li>\n  <li><a href=\"https://lichess.org/25E56BCz\">game</a>: blunder 9th move directly after the “end” of the opening… another big mistake at 24th move in a desperate position. Pattern: GPT-2 seems very OK at the beginning and then quickly does mistakes/blunders. What is impressive is that the played moves of GPT-2 are legal even at move 30: it’s truly remarkable since the engine has absolutely no knowledge about the rules of chess. And the kind of positions after move 15 (says) are clearly not in the corpus used to train the machine</li>\n  <li>for the two remaining games, I’ve tried a specific strategy to win as quickly as possible. Here I didn’t try to play as usual and in a perfect absolute way, but rather to exploit the “design” of GPT-2. First attempt: <a href=\"https://lichess.org/LmcIDaI9\">mate in 12 moves</a> and second one <a href=\"https://lichess.org/pG4S7RcF\">mate in 8 moves</a> I’ve voluntarily used weird/incorrect moves to minimize the number of moves to check mate… A bit like when you’re playing against a beginner and you try the <a href=\"https://fr.wikipedia.org/wiki/Coup_du_berger\">coup du berger</a> (aka Scholar’s mate in english, thanks Rick Rabiser!)</li>\n</ul>\n\n<p>The general conclusion is that GPT-2 is very bad at chess: you can check mate in a few moves and against a “normal” player GPT-2 has no chance to even draw a position. Against Stockfish, AlphaZero or MuZero, the score would be 100000000 defeats in as many games. Nevertheless I’m quite impressed GPT-2 can play legal moves even at move 30: it’s not in the corpus and the chess rules seem to have been learned purely out of texts games.\nFuture work may include:</p>\n<ul>\n  <li>comparison of GPT-2 with other language-based approaches (eg based on less complex methods like ngram) or with other textual inputs (eg why not using FEN notation at each move/position?)</li>\n  <li>rigorous assessment of the ability of GPT-2 to play legal moves. I only played 6 games with 30 moves maximum, it’s worth trying on much more games eg for ending positions with only a few pieces or around move 40.</li>\n  <li>what’s the minimum number of moves needed to check mate GPT-2?</li>\n</ul>\n\n<p>GPT-2 based chess engine is a fun experiment that may serve to further question and understand the current limits of artificial intelligence. Yea, GPT-2 has not learned the complex meaning of chess, but it has learned something purely out of texts, which is somehow bluffing (closed to <a href=\"https://en.m.wikipedia.org/wiki/ELIZA_effect\">ELIZA effect</a>). The brual approach of GPT-2 can be applied to many domains (music, poetry, recipes, etc.), since there is textual data. I guess the resulting effectiveness (ELIZA effect?) may highly vary and is worth trying, but for the chess domain some “pieces” in the learning process are missing ;)</p>","contentSnippet":"Shawn Presser has released an intringuing chess engine based on deep learning-based language model (GPT-2). The model was trained on the Kingbase dataset (3.5 million chess games in PGN notation) in 24 hours using 146 TPUs (ouch!). The engine is purely based on text prediction with no concept of chess. Though GPT-2 has already delivered promising/bluffing results for text generation, one can be skeptical and wonder whether it does work for chess.\n\nI have quickly experimented thanks to a nice notebook where you can play chess against the GPT-2 engine.\nI’ve only played 6 games, but (surprinsingly) it’s enough to draw some conclusions.\nLet’s analyse them case by case, following the order of the played games:\n\n  in the first game I started with a rare/stupid opening just to see what’s going on… GPT-2 has been trained on a corpus of games: it can excel for the very first moves (the opening) since many examples are available, especially for positions after 1.e4 or 1.d4 the most frequent moves. Despite 1.e4 e5 2. Bc4 Nf6 3.d4 (an infrequent line/sequence of moves), GPT-2 played OK. But quickly it became really bad and mate in 14 moves by playing quite normal.\n  second game is in the same spirit (see here) I started with an infrequent move (1.b4), first moves of GPT-2 are OK, and then strong mistakes and mate in only 15 moves by playing as usual (as best as I can).\n  third was perhaps more interesting: Quite classical opening this time with a spanish variation… Blunder after 12 moves (presumably since GPT-2 is out of the usual opening theory) and quickly winning for white\n  game: blunder 9th move directly after the “end” of the opening… another big mistake at 24th move in a desperate position. Pattern: GPT-2 seems very OK at the beginning and then quickly does mistakes/blunders. What is impressive is that the played moves of GPT-2 are legal even at move 30: it’s truly remarkable since the engine has absolutely no knowledge about the rules of chess. And the kind of positions after move 15 (says) are clearly not in the corpus used to train the machine\n  for the two remaining games, I’ve tried a specific strategy to win as quickly as possible. Here I didn’t try to play as usual and in a perfect absolute way, but rather to exploit the “design” of GPT-2. First attempt: mate in 12 moves and second one mate in 8 moves I’ve voluntarily used weird/incorrect moves to minimize the number of moves to check mate… A bit like when you’re playing against a beginner and you try the coup du berger (aka Scholar’s mate in english, thanks Rick Rabiser!)\n\n\nThe general conclusion is that GPT-2 is very bad at chess: you can check mate in a few moves and against a “normal” player GPT-2 has no chance to even draw a position. Against Stockfish, AlphaZero or MuZero, the score would be 100000000 defeats in as many games. Nevertheless I’m quite impressed GPT-2 can play legal moves even at move 30: it’s not in the corpus and the chess rules seem to have been learned purely out of texts games.\nFuture work may include:\n\n  comparison of GPT-2 with other language-based approaches (eg based on less complex methods like ngram) or with other textual inputs (eg why not using FEN notation at each move/position?)\n  rigorous assessment of the ability of GPT-2 to play legal moves. I only played 6 games with 30 moves maximum, it’s worth trying on much more games eg for ending positions with only a few pieces or around move 40.\n  what’s the minimum number of moves needed to check mate GPT-2?\n\n\nGPT-2 based chess engine is a fun experiment that may serve to further question and understand the current limits of artificial intelligence. Yea, GPT-2 has not learned the complex meaning of chess, but it has learned something purely out of texts, which is somehow bluffing (closed to ELIZA effect). The brual approach of GPT-2 can be applied to many domains (music, poetry, recipes, etc.), since there is textual data. I guess the resulting effectiveness (ELIZA effect?) may highly vary and is worth trying, but for the chess domain some “pieces” in the learning process are missing ;)","id":"http://blog.mathieuacher.com/GTP2AndChess","isoDate":"2020-01-08T09:54:29.000Z"},{"title":"VaMoS 2020","link":"http://blog.mathieuacher.com/VaMoS2020/","pubDate":"2020-01-08T09:54:29.000Z","author":"Mathieu Acher","content":"<p>After a dozen of french and german trains, I’m back from <a href=\"https://vamos2020.dbse.iti.cs.ovgu.de/\">VaMoS 2020</a> and Magdeburg. The effort was worth: a great conference about (software) variants/configurations with many discussions (a key feature of VaMoS!) and a diverse set of papers/presentations. I was co-chairing the program committee with Maxime Cordy this year.\nModeling variability is the general theme, but the papers cover quite different topics, from counting, sampling, and learning (more related to artificial intelligence problems like SAT solving) to maintenance, evolution and reverse engineering of software. The applicability is also sparse: we selected papers about security, cyber-physical production systems, or operating systems. Some works tackle C-based code, Java code, Docker, modeling and testing artifacts, games artifacts, etc.</p>\n\n<p>The <a href=\"https://vamos2020.dbse.iti.cs.ovgu.de/program.html\">program</a> was intense during 2 days and a half. There were 8 sessions with 3 presentations each and then a 30-minutes plenary discussions with the presenters and a moderator trying to wrap up and find synergies between problems and proposed solutions. Presenting at VaMoS means receiving feedbacks about your paper (10’ of questions), finding research opportunities and links with other works, basically connecting the dots while networking/collaborating. You can also hear about some (industrial) projects in the field. I think the spirit of VaMoS is still there, since all participants were active either asking questions, providing feedbacks, or proposing ideas.</p>\n\n<p>In addition to papers’ sessions, we have been lucky to have two great keynotes. The first keynote of Andrzej Wasowski was about the <a href=\"https://www.slideshare.net/AndrzejWasowski/maindependency-bugs-the-dark-side-of-variability-reuse-and-modularity\">dark side of variability</a>, mainly so-called dependency bugs that cost so many troubles and energies to software projects (e.g., ROS project in the robotic domain). The second keynote of Nelly Bencomo was more about the “bright” side and how we can embrace uncertainty and variability in self-adaptive systems. Very different talks, but definitely complementary and both give foods for thought! It’s also cool to have Nelly and Andrzej back at VaMoS.</p>\n\n<p>Besides, two most influential papers were rewarded. Thorsten Berger made a nice presentation about the variability model of the Linux kernel (out of Kconfig), explaining how the idea pops out and showing the impacts on the scientific community but also on Linux itself (though the work is not really over!). David Benavides also explains the “story” behind the paper, namely how he and his co-authors found the idea, got rejection(s) and acceptance(s), or collaborated with Don Batory that developped similar ideas around the same period. David also emphasized the crucial role of other colleagues in the field and José Galindo for having developed FAMA, the framework for automated analysis of feature models. Again, two great talks!</p>\n\n<p>VaMoS was a nice event (and by the way <a href=\"https://modevar.github.io/\">MODEVAR</a> the day before was as great, with nice sessions about designing/developing a feature modeling language). Sandro Schulze and Anja Buch nicely organized the event together with the locals Gunter Saake, Danilo Beuche, Jacob Krüger, Sebastian Krieter, Yang Li, and I forgot many.\nThe proceedings of VaMoS is online (through the <a href=\"http://dl.acm.org/citation.cfm?id=3377024\">ACM library</a>) and you should find many preprints/PDFs online (see the <a href=\"https://vamos2020.dbse.iti.cs.ovgu.de/program.html\">program</a>). It was an honour for me to co-chair this year. I’ve attended lots of VaMoS editions since 2011 and I still love the topic and the interactions in the community. I’m also sure the scope of (software) variability will expand in the future! Next venues for variability modeling: <a href=\"http://splc2020.net/\">SPLC 2020</a> co-located with <a href=\"http://www.modelsconference.org/\">MODELS 2020</a> in Montreal (Canada)</p>","contentSnippet":"After a dozen of french and german trains, I’m back from VaMoS 2020 and Magdeburg. The effort was worth: a great conference about (software) variants/configurations with many discussions (a key feature of VaMoS!) and a diverse set of papers/presentations. I was co-chairing the program committee with Maxime Cordy this year.\nModeling variability is the general theme, but the papers cover quite different topics, from counting, sampling, and learning (more related to artificial intelligence problems like SAT solving) to maintenance, evolution and reverse engineering of software. The applicability is also sparse: we selected papers about security, cyber-physical production systems, or operating systems. Some works tackle C-based code, Java code, Docker, modeling and testing artifacts, games artifacts, etc.\n\nThe program was intense during 2 days and a half. There were 8 sessions with 3 presentations each and then a 30-minutes plenary discussions with the presenters and a moderator trying to wrap up and find synergies between problems and proposed solutions. Presenting at VaMoS means receiving feedbacks about your paper (10’ of questions), finding research opportunities and links with other works, basically connecting the dots while networking/collaborating. You can also hear about some (industrial) projects in the field. I think the spirit of VaMoS is still there, since all participants were active either asking questions, providing feedbacks, or proposing ideas.\n\nIn addition to papers’ sessions, we have been lucky to have two great keynotes. The first keynote of Andrzej Wasowski was about the dark side of variability, mainly so-called dependency bugs that cost so many troubles and energies to software projects (e.g., ROS project in the robotic domain). The second keynote of Nelly Bencomo was more about the “bright” side and how we can embrace uncertainty and variability in self-adaptive systems. Very different talks, but definitely complementary and both give foods for thought! It’s also cool to have Nelly and Andrzej back at VaMoS.\n\nBesides, two most influential papers were rewarded. Thorsten Berger made a nice presentation about the variability model of the Linux kernel (out of Kconfig), explaining how the idea pops out and showing the impacts on the scientific community but also on Linux itself (though the work is not really over!). David Benavides also explains the “story” behind the paper, namely how he and his co-authors found the idea, got rejection(s) and acceptance(s), or collaborated with Don Batory that developped similar ideas around the same period. David also emphasized the crucial role of other colleagues in the field and José Galindo for having developed FAMA, the framework for automated analysis of feature models. Again, two great talks!\n\nVaMoS was a nice event (and by the way MODEVAR the day before was as great, with nice sessions about designing/developing a feature modeling language). Sandro Schulze and Anja Buch nicely organized the event together with the locals Gunter Saake, Danilo Beuche, Jacob Krüger, Sebastian Krieter, Yang Li, and I forgot many.\nThe proceedings of VaMoS is online (through the ACM library) and you should find many preprints/PDFs online (see the program). It was an honour for me to co-chair this year. I’ve attended lots of VaMoS editions since 2011 and I still love the topic and the interactions in the community. I’m also sure the scope of (software) variability will expand in the future! Next venues for variability modeling: SPLC 2020 co-located with MODELS 2020 in Montreal (Canada)","id":"http://blog.mathieuacher.com/VaMoS2020","isoDate":"2020-01-08T09:54:29.000Z"},{"title":"(Academic) Failures and Successes in 2019","link":"http://blog.mathieuacher.com/FailuresAndSuccess2019/","pubDate":"2020-01-03T09:54:29.000Z","author":"Mathieu Acher","content":"<p>2019 is over (all the best!) and it’s a good excuse to report on some of my failures and successes (from an MIP to football, in no particular order):</p>\n\n<ul>\n  <li>\n    <p>most influential paper (MIP) award together with Philippe Collet, Philippe Lahire, and Robert B. France, at <a href=\"http://www.sleconf.org/2019/\">SLE 2019</a> for our 2009 paper “Composing feature models”. <a href=\"https://fr.slideshare.net/PhilCollet/sle-2019-mip-award-sle-2009-composing-feature-models\">slides</a> and <a href=\"https://ins2i.cnrs.fr/fr/cnrsinfo/des-scientifiques-primes-pour-leurs-travaux-sur-les-feature-models\">press release (in french)</a></p>\n  </li>\n  <li>\n    <p>reject of my ERC starting grant (called REVARY for Resurrecting Software Variability). Brain-consuming work that forces you to go beyond the usual territory… the cut was 29% (I was ranked between 30% and 40% grrr), but really worth doing. I have now an explicit and ambitious research plan for… 2020 at least ;)</p>\n  </li>\n  <li>\n    <p>reject of an ICSE submission:  <a href=\"https://hal.inria.fr/hal-02314830\">preprint</a> is available and already working hard to address reviews. Very frustrating since we worked hard, including in the middle of summer time… and the subject is exciting/challenging (can we learn the enormous configuration space of the Linux kernel with 15,000+ options?)</p>\n  </li>\n  <li>\n    <p>accept of an ICSE submission about model/code co-evolution: kudos to Djamel Khelladi who has lead end-to-end the success</p>\n  </li>\n  <li>\n    <p>accept at Transactions on Software Engineering (TSE) journal for <a href=\"https://hal.inria.fr/hal-02177158\">Empirical Assessment of Multimorphic Testing</a> The idea of Multimorphic testing is to assess the effectiveness of a test suite for revealing performance variations of a system (something surprinsingly not so common in the scientific literature).</p>\n  </li>\n  <li>\n    <p>reject of ICSE SEIP submission: <a href=\"https://hal.inria.fr/hal-02147012\">preprint</a> is available… again on Linux and its configuration space. I strongly believe we need a “smart” continuous integration system capable of tracking/dealing with configuration failures of the Linux kernel</p>\n  </li>\n  <li>\n    <p><a href=\"http://blog.mathieuacher.com/ELCETuxML/\">talk</a> at Embedded Linux Conference Europe 2019: a very nice experience (I hope to attend/talk again in such non-academic events!)</p>\n  </li>\n  <li>\n    <p><a href=\"http://blog.mathieuacher.com/Teaching1819/\">an intense year of teaching</a>: a kind of failure (too much!) and success (I learned a lot eg <a href=\"http://blog.mathieuacher.com/WikipediaMatrixChallenge/\">http://blog.mathieuacher.com/WikipediaMatrixChallenge/</a>)</p>\n  </li>\n  <li>\n    <p>a few blog posts</p>\n  </li>\n  <li>\n    <p>many <a href=\"https://hal.inria.fr/hal-02287616\">interesting</a> works on <a href=\"https://hal.inria.fr/hal-02356290\">sampling</a> and <a href=\"https://hal.inria.fr/hal-02287459\">learning</a> configuration spaces (see also this <a href=\"https://hal.inria.fr/hal-02148791\">survey</a>)</p>\n  </li>\n  <li>\n    <p>co-chairing of <a href=\"https://vamos2020.dbse.iti.cs.ovgu.de/\">VaMoS</a> (14th International Working Conference on Variability Modelling of Software-Intensive Systems) with Maxime Cordy: proud to help the variability community! The conference will be in 2020, but the essential work was in 2019 (I guess!)</p>\n  </li>\n  <li>\n    <p>only one flight (from France to Greece)</p>\n  </li>\n  <li>\n    <p>zero official chess game: my last one was in the previous decade (very strange to explain)… I’m playing a bit more online though, above 2400 ;)</p>\n  </li>\n  <li>\n    <p>back in the football business every friday night ;-) fully for 90 minutes (sometimes midfielder, sometimes centre-forward)</p>\n  </li>\n</ul>","contentSnippet":"2019 is over (all the best!) and it’s a good excuse to report on some of my failures and successes (from an MIP to football, in no particular order):\n\n\n  \n    most influential paper (MIP) award together with Philippe Collet, Philippe Lahire, and Robert B. France, at SLE 2019 for our 2009 paper “Composing feature models”. slides and press release (in french)\n  \n  \n    reject of my ERC starting grant (called REVARY for Resurrecting Software Variability). Brain-consuming work that forces you to go beyond the usual territory… the cut was 29% (I was ranked between 30% and 40% grrr), but really worth doing. I have now an explicit and ambitious research plan for… 2020 at least ;)\n  \n  \n    reject of an ICSE submission:  preprint is available and already working hard to address reviews. Very frustrating since we worked hard, including in the middle of summer time… and the subject is exciting/challenging (can we learn the enormous configuration space of the Linux kernel with 15,000+ options?)\n  \n  \n    accept of an ICSE submission about model/code co-evolution: kudos to Djamel Khelladi who has lead end-to-end the success\n  \n  \n    accept at Transactions on Software Engineering (TSE) journal for Empirical Assessment of Multimorphic Testing The idea of Multimorphic testing is to assess the effectiveness of a test suite for revealing performance variations of a system (something surprinsingly not so common in the scientific literature).\n  \n  \n    reject of ICSE SEIP submission: preprint is available… again on Linux and its configuration space. I strongly believe we need a “smart” continuous integration system capable of tracking/dealing with configuration failures of the Linux kernel\n  \n  \n    talk at Embedded Linux Conference Europe 2019: a very nice experience (I hope to attend/talk again in such non-academic events!)\n  \n  \n    an intense year of teaching: a kind of failure (too much!) and success (I learned a lot eg http://blog.mathieuacher.com/WikipediaMatrixChallenge/)\n  \n  \n    a few blog posts\n  \n  \n    many interesting works on sampling and learning configuration spaces (see also this survey)\n  \n  \n    co-chairing of VaMoS (14th International Working Conference on Variability Modelling of Software-Intensive Systems) with Maxime Cordy: proud to help the variability community! The conference will be in 2020, but the essential work was in 2019 (I guess!)\n  \n  \n    only one flight (from France to Greece)\n  \n  \n    zero official chess game: my last one was in the previous decade (very strange to explain)… I’m playing a bit more online though, above 2400 ;)\n  \n  \n    back in the football business every friday night ;-) fully for 90 minutes (sometimes midfielder, sometimes centre-forward)","id":"http://blog.mathieuacher.com/FailuresAndSuccess2019","isoDate":"2020-01-03T09:54:29.000Z"},{"title":"MuZero: A new revolution for Chess?","link":"http://blog.mathieuacher.com/MuZeroChess/","pubDate":"2019-11-22T09:54:29.000Z","author":"Mathieu Acher","content":"<p>DeepMind has defeated me again: I’ve spent another sleepless night trying to understand the technical and philosophical implications of MuZero, the successor of AlphaZero (itself successor of AlphaGo). What is impressive and novel is that MuZero has no explicit knowledge of the game rules (or environment dynamics) and is still capable of matching the superhuman performance of  AlphaZero (for which rules have been programmed in the first place!) when evaluated on Go, chess and shogi. MuZero also outperformed state-of-the-art reinforcement learning on Attari games, without explicit rules. In this blog post, I want to share some reflections, notes, and then specifically discuss the possible impacts of MuZero on Chess.</p>\n\n<p>MuZero sounds like a new breakthrough for artificial intelligence (<a href=\"https://arxiv.org/abs/1911.08265\">preprint is available</a>). The work is much more general than AlphaZero and is not limited to two-player games with undiscounted terminal rewards as in Chess. The applicability is broader: in chess you win/lose/draw at the end of the game, but in many real-world situations you have intermediate rewards (as in Atari games). The key resides in a new approach and architecture in which the knowledge of the rules of the game is not “harcoded”: MuZero learns itself the rules through self-play. Rules of the games are not directly programmed into the search tree and MuZero manages its own, learned representation.</p>\n\n<p>At first glance, the absence of explicit rules is a bit counter-intuitive for Chess: after all, why depriving the knowledge of the rules? Rules (such as all possible moves in a given position) are quite easy to specify and implement… and without such rules a program can play (lots of) illegal moves. So why? The first reason is to have a more general solution (as previously evoked), beyond board games and Chess: knowing the environment dynamics is simply impossible in real-world domains like robotics, industrial control, intelligent assistants, or video games. The work thus opens <em>new</em> applications, beyond Chess. Stochastic transitions are not yet handled (roughly speaking games or situations in which uncertainty and randomness are part of the problem), but the results suggest an impressive potential.</p>\n\n<p>The second reason is that MuZero masters its own learning representation. MuZero can <em>internally</em> organize the rules that lead to most accurate results (eg in the search tree). The results on Go suggest “a deeper understanding of the position” than with AlphaZero. In a sense, the knowledge and bias of humans/experts about rules and dynamics is eliminated. A retrospective look at AlphaZero shows that many (human) decisions have been taken to manage and organize the rules. Hence an idea is to let MuZero do the right job and globally optimize the whole reinforcement learning process, including the representation function.</p>\n\n<p>Another quality of the approach is that MuZero brings more <em>flexibility</em> and is perhaps <em>easier</em> to implement: developers of reinforcement learning-based systems do not have to build a complete simulator or think about specific details about rules. A promising direction is that it seems possible to quickly change the targeted rules/dynamics when a new problem arises (though it would require additional training). The experience with AlphaZero showed that developers’ knowledge was actually essential to the success: many tweaks, (hyper-) parameters, and domain-specific decisions have been somehow incorporated. It is not a trivial task at all: for example, Leela developers struggled to replicate the original experiment and reported on differences in terms of parameters and neural network architecture <a href=\"https://blog.lczero.org/2018/12/alphazero-paper-and-lc0-v0191.html\">https://blog.lczero.org/2018/12/alphazero-paper-and-lc0-v0191.html</a>. <strong>With MuZero, the human knowledge is lifted to another level of abstraction</strong>: experts don’t tune the search tree, but focus on other problems (e.g., number of simulations per search, encoding of dynamics function). It would deserve a specific assessment, but it might be much easier to engineer such learning-based systems.</p>\n\n<p>The scenario in which you “just” have to program a teacher/oracle to obtain a superhuman player comes closer: it’s impressive. Yet, human knowledge is still needed and fundamental. As documented in the MuZero paper, parts of solutions are game specific and require adding prior knowledge. For example, “ In Go and shogi we encode the last 8 board states as in AlphaZero ; in chess we increased the history to the last 100 board states to allow correct prediction of draws.” There is a nice <a href=\"https://arxiv.org/src/1911.08265v1/anc/pseudocode.py\">pseudo-algorithm</a> provided (very good practice!) that gives the general idea in an elegant way: nevertheless I’m suspecting there are many technicalities to handle before obtaining the final solution. At some point of the paper, it is mentionned that “an image of the Go board” can be given as input. I agree it can lead to nice demonstrations, but we do not have to forget that the image should properly be encoded. Hence we are not yet in the self-supervised situation in which an agent can observe the world, process instructions of a teacher, and magically encode everything to become world chess champion. MuZero does not claim and target such scenarios yet we are more and more closed to a comprehensive end-to-end learning.</p>\n\n<p>Back to reality and to a more concrete case: What’s the impact of MuZero on Chess? On the one hand, I’m tempted to answer “little impact”. The paper mostly mentions Go results, and the “only” insight we get is that MuZero reaches the same level as AlphaZero (Figure 2 of the paper). It is of course a very good result, but MuZero does not outperform AlphaZero. Furthermore, there are not much details about its quality play or how many games have lead to draw/win. I have been a bit frustrated here, though I must admit technical details about chess are reported. My impression is that computer engines’ already play closed to optimal while most of the games lead towards draw: the Elo difference will likely be negligible. AlphaZero was a true revolution for chess players with the re-discovering of theoretical chess openings and the use of an agressive, brilliant yet effective style play. In a sense, it is hard to make a new revolution after a revolution.</p>\n\n<p>On the other hand, MuZero offers interesting perspectives for Chess:</p>\n\n<ul>\n  <li>It is a confirmatory study one can apply reinforcement learning and monte carlo tree search to reach state-of-the-art level. It might even be easier to re-implement a super chess engine. I don’t know the current status of Leela, but I’m expecting some advances there based on insight of the paper. It can speed up the release of learning-based chess engines.</li>\n  <li>Chess960: A nice feature of MuZero is that rules can be easily changed. Chess960 is an interesting variant of chess: the initial position is randomly chosen, castling rules differ, the rest is similar (more details here: <a href=\"https://en.wikipedia.org/wiki/Fischer_random_chess\">https://en.wikipedia.org/wiki/Fischer_random_chess</a>). It seems “easy” to train MuZero and gets, perhaps, a super engine at Chess960: no need to modify the search tree or employ specific heuristics. There is a variant of Stockfish that supports Chess960 (with manually defined heuristics): it can be a good baseline to confront. This super engine can be a revolution for Chess960: MuZero can quickly find new chess openings for any initial position. I’m expecting here a breakthrough in Chess960 theory through new strategies to open the game: chess grand masters can hardly study all initial positions and Chess960 is less studied than Chess. For a long time, I also have the intuition that some initial positions are unfair and lead to (stronger) advantages for White pieces: maybe MuZero can provide some evidence here. Interestingly, Chess960 can be more challenging than Chess for MuZero since there are 960 possible (random) positions to start: a bit stochastic and computationally expensive if you consider one starting position at a time. Ideally MuZero will be able to “transfer” its knowledge out of a sample of starting positions. We can also confront AlphaZero with MuZero on Chess960. Another interesting scenario is to take MuZero trained for chess and see how fast it can be transfered/adapted to Chess960.</li>\n  <li>Chess variants: in general, there are many variants of chess rules such as CrazyHouse, Antichess, etc. Some chess players have found unique strategies and can outperform strong chess players not familiar with such variants. MuZero’s approach is well-suited to plug new rules and perhaps it will show us novel strategies and styles we didn’t think of. An incredible breakthrough would be to master any chess variant thanks to a super transfer mechanism.</li>\n</ul>\n\n<p>MuZero is yet another tour de force for DeepMind. No explicit rules and self-play with smart sampling: elegant, simple, and even freaking! The potential of MuZero is now more outside Chess, since the approach is much more general and flexible. It’s hard to say, but MuZero’s results have certainly reduced Chess to a “common” benchmark. The good news is that MuZero will accelerate the maturation and understanding of learning-based chess engines. I have also sketched some challenges MuZero could tackle (e.g., exceptionnaly playing at any chess variant such as Chess960). It’s a truly exciting time, kudos to DeepMind!</p>\n\n<p>PS: I am not an expert in model-based reinforcement learning, I have given a candide opinion based on my knowledge and understanding of chess and computer science. Feel free to clarify and discuss!</p>","contentSnippet":"DeepMind has defeated me again: I’ve spent another sleepless night trying to understand the technical and philosophical implications of MuZero, the successor of AlphaZero (itself successor of AlphaGo). What is impressive and novel is that MuZero has no explicit knowledge of the game rules (or environment dynamics) and is still capable of matching the superhuman performance of  AlphaZero (for which rules have been programmed in the first place!) when evaluated on Go, chess and shogi. MuZero also outperformed state-of-the-art reinforcement learning on Attari games, without explicit rules. In this blog post, I want to share some reflections, notes, and then specifically discuss the possible impacts of MuZero on Chess.\n\nMuZero sounds like a new breakthrough for artificial intelligence (preprint is available). The work is much more general than AlphaZero and is not limited to two-player games with undiscounted terminal rewards as in Chess. The applicability is broader: in chess you win/lose/draw at the end of the game, but in many real-world situations you have intermediate rewards (as in Atari games). The key resides in a new approach and architecture in which the knowledge of the rules of the game is not “harcoded”: MuZero learns itself the rules through self-play. Rules of the games are not directly programmed into the search tree and MuZero manages its own, learned representation.\n\nAt first glance, the absence of explicit rules is a bit counter-intuitive for Chess: after all, why depriving the knowledge of the rules? Rules (such as all possible moves in a given position) are quite easy to specify and implement… and without such rules a program can play (lots of) illegal moves. So why? The first reason is to have a more general solution (as previously evoked), beyond board games and Chess: knowing the environment dynamics is simply impossible in real-world domains like robotics, industrial control, intelligent assistants, or video games. The work thus opens new applications, beyond Chess. Stochastic transitions are not yet handled (roughly speaking games or situations in which uncertainty and randomness are part of the problem), but the results suggest an impressive potential.\n\nThe second reason is that MuZero masters its own learning representation. MuZero can internally organize the rules that lead to most accurate results (eg in the search tree). The results on Go suggest “a deeper understanding of the position” than with AlphaZero. In a sense, the knowledge and bias of humans/experts about rules and dynamics is eliminated. A retrospective look at AlphaZero shows that many (human) decisions have been taken to manage and organize the rules. Hence an idea is to let MuZero do the right job and globally optimize the whole reinforcement learning process, including the representation function.\n\nAnother quality of the approach is that MuZero brings more flexibility and is perhaps easier to implement: developers of reinforcement learning-based systems do not have to build a complete simulator or think about specific details about rules. A promising direction is that it seems possible to quickly change the targeted rules/dynamics when a new problem arises (though it would require additional training). The experience with AlphaZero showed that developers’ knowledge was actually essential to the success: many tweaks, (hyper-) parameters, and domain-specific decisions have been somehow incorporated. It is not a trivial task at all: for example, Leela developers struggled to replicate the original experiment and reported on differences in terms of parameters and neural network architecture https://blog.lczero.org/2018/12/alphazero-paper-and-lc0-v0191.html. With MuZero, the human knowledge is lifted to another level of abstraction: experts don’t tune the search tree, but focus on other problems (e.g., number of simulations per search, encoding of dynamics function). It would deserve a specific assessment, but it might be much easier to engineer such learning-based systems.\n\nThe scenario in which you “just” have to program a teacher/oracle to obtain a superhuman player comes closer: it’s impressive. Yet, human knowledge is still needed and fundamental. As documented in the MuZero paper, parts of solutions are game specific and require adding prior knowledge. For example, “ In Go and shogi we encode the last 8 board states as in AlphaZero ; in chess we increased the history to the last 100 board states to allow correct prediction of draws.” There is a nice pseudo-algorithm provided (very good practice!) that gives the general idea in an elegant way: nevertheless I’m suspecting there are many technicalities to handle before obtaining the final solution. At some point of the paper, it is mentionned that “an image of the Go board” can be given as input. I agree it can lead to nice demonstrations, but we do not have to forget that the image should properly be encoded. Hence we are not yet in the self-supervised situation in which an agent can observe the world, process instructions of a teacher, and magically encode everything to become world chess champion. MuZero does not claim and target such scenarios yet we are more and more closed to a comprehensive end-to-end learning.\n\nBack to reality and to a more concrete case: What’s the impact of MuZero on Chess? On the one hand, I’m tempted to answer “little impact”. The paper mostly mentions Go results, and the “only” insight we get is that MuZero reaches the same level as AlphaZero (Figure 2 of the paper). It is of course a very good result, but MuZero does not outperform AlphaZero. Furthermore, there are not much details about its quality play or how many games have lead to draw/win. I have been a bit frustrated here, though I must admit technical details about chess are reported. My impression is that computer engines’ already play closed to optimal while most of the games lead towards draw: the Elo difference will likely be negligible. AlphaZero was a true revolution for chess players with the re-discovering of theoretical chess openings and the use of an agressive, brilliant yet effective style play. In a sense, it is hard to make a new revolution after a revolution.\n\nOn the other hand, MuZero offers interesting perspectives for Chess:\n\n\n  It is a confirmatory study one can apply reinforcement learning and monte carlo tree search to reach state-of-the-art level. It might even be easier to re-implement a super chess engine. I don’t know the current status of Leela, but I’m expecting some advances there based on insight of the paper. It can speed up the release of learning-based chess engines.\n  Chess960: A nice feature of MuZero is that rules can be easily changed. Chess960 is an interesting variant of chess: the initial position is randomly chosen, castling rules differ, the rest is similar (more details here: https://en.wikipedia.org/wiki/Fischer_random_chess). It seems “easy” to train MuZero and gets, perhaps, a super engine at Chess960: no need to modify the search tree or employ specific heuristics. There is a variant of Stockfish that supports Chess960 (with manually defined heuristics): it can be a good baseline to confront. This super engine can be a revolution for Chess960: MuZero can quickly find new chess openings for any initial position. I’m expecting here a breakthrough in Chess960 theory through new strategies to open the game: chess grand masters can hardly study all initial positions and Chess960 is less studied than Chess. For a long time, I also have the intuition that some initial positions are unfair and lead to (stronger) advantages for White pieces: maybe MuZero can provide some evidence here. Interestingly, Chess960 can be more challenging than Chess for MuZero since there are 960 possible (random) positions to start: a bit stochastic and computationally expensive if you consider one starting position at a time. Ideally MuZero will be able to “transfer” its knowledge out of a sample of starting positions. We can also confront AlphaZero with MuZero on Chess960. Another interesting scenario is to take MuZero trained for chess and see how fast it can be transfered/adapted to Chess960.\n  Chess variants: in general, there are many variants of chess rules such as CrazyHouse, Antichess, etc. Some chess players have found unique strategies and can outperform strong chess players not familiar with such variants. MuZero’s approach is well-suited to plug new rules and perhaps it will show us novel strategies and styles we didn’t think of. An incredible breakthrough would be to master any chess variant thanks to a super transfer mechanism.\n\n\nMuZero is yet another tour de force for DeepMind. No explicit rules and self-play with smart sampling: elegant, simple, and even freaking! The potential of MuZero is now more outside Chess, since the approach is much more general and flexible. It’s hard to say, but MuZero’s results have certainly reduced Chess to a “common” benchmark. The good news is that MuZero will accelerate the maturation and understanding of learning-based chess engines. I have also sketched some challenges MuZero could tackle (e.g., exceptionnaly playing at any chess variant such as Chess960). It’s a truly exciting time, kudos to DeepMind!\n\nPS: I am not an expert in model-based reinforcement learning, I have given a candide opinion based on my knowledge and understanding of chess and computer science. Feel free to clarify and discuss!","id":"http://blog.mathieuacher.com/MuZeroChess","isoDate":"2019-11-22T09:54:29.000Z"},{"title":"Talk at Embedded Linux Conference Europe 2019","link":"http://blog.mathieuacher.com/ELCETuxML/","pubDate":"2019-10-30T09:54:29.000Z","author":"Mathieu Acher","content":"<p>I gave a <a href=\"https://sched.co/TLKI\">talk</a> (see <a href=\"https://youtu.be/UBghs-cwQX4\">Youtube video</a>) at <a href=\"https://events.linuxfoundation.org/events/open-source-summit-europe-2019/\">Embedded Linux Conference Europe 2019 (co-located with Open Source Summit 2019)</a> in Lyon about “Learning the Linux Kernel Configuration Space: Results and Challenges”.\nThe conference was a blast, maybe one of the best conference I’ve attended: diversity of topics, quality of presenters, in-depth and technical content, and many^many exchanges with people that want to understand, share, and help.</p>\n\n<p>I usually attend academic conferences, and I must say OSS+ELC is different in terms of scale. \nThe number of attendees is incredible (around 2000), with many parallel tracks, demonstrations of vendors, keynotes. \nMaybe <a href=\"https://www.sigcse2018.sigcse.org/\">SIGCSE 2018</a> I’ve attended in Baltimore was similar, otherwise it’s more around 300 people (I never attended ICSE though).</p>\n\n<p>I enjoyed many talks, just to name a few:</p>\n<ul>\n  <li>KernelCI: an effort to lead the (fragmented) testing effort of the kernel, now supported by the Linux foundation and companies like Google or Redhat</li>\n  <li><a href=\"https://sched.co/TLMK\">Buildroot evolution</a>, a very clear description of the build system, new features and release/testing process</li>\n  <li><a href=\"https://sched.co/TLBL\">Continuous documentation</a> that nicely discusses many aspects of documentation. I particularly appreciated the advices about writing styles. Stupid biases are unfortunately present in technical writing. Think about the use of “whitelist/blacklist”, “master/slave” or “hey guys”, how they translate to other languages, and how they can hurt people. The speaker suggests to make pull requests to correct open source projects: very good idea. Btw I think the correction can be partly automated: a bunch of queries over Github to identify bad smells in README.md (with <a href=\"https://codelabs.developers.google.com/codelabs/bigquery-github/index.html?index=..%2F..index\">BigQuery</a>), a bot to replace the text, send a PR with an educational message, and we are done!</li>\n  <li>keynote of Linus Torvalds with interesting discussions about the Linux project and its “random crazy user bugs”, the importance of commits messages (more important than code!?), subsurface, and git (Linus wanted to prove to himself he was able to do more than one successful project)</li>\n  <li>insightful report about boot time reduction and actually Linux kernel size reduction at Bootlin. Configuration options all along as <a href=\"https://sched.co/TLN3\">nicely exposed by Michael Opdenacker</a></li>\n  <li>a session about <a href=\"https://sched.co/TLM2\">low spec embedded linux</a> with many discussions about kernel size</li>\n  <li>a great presentation about Linux kernel documentation by Jonathan Corbet with many recommendations on how to improve the situation (process, tool, organization, etc.)</li>\n  <li>a crystal clear tutorial of Linux permissions (hint: giving the root permission is not the only path)</li>\n  <li>a crazy talk about using Linux with Android</li>\n  <li>very impressive showcases, for example, state-of-the-art computer vision systems running on very small devices. My prefered one is the <a href=\"https://twitter.com/acherm/status/1189328054721695745\">Tux over a chessboard and a laser</a></li>\n  <li><a href=\"https://elinux.org/Automated_Testing_Summit_2019\">automated testing summit 2019</a> a full-day workshop about testing the Linux kernel (it was the main topic) and the ongoing effort to unify the forces (e.g., KernelCI). There are impressive tools/ideas developed by an industry-driven and passionate community.</li>\n</ul>\n\n<p>I mainly attended Linux-related talks and I’ve been lucky to meet many interesting people that really want to collaborate.\nOSS+ELC was definitely not like academic events: I am not saying it’s “better”, it’s just different and complementary. But maybe there are lessons to learn here ;)</p>\n\n<p>By the way, the abstract of the talk can be found below:</p>\n\n<blockquote>\n  <p>Given a configuration, can humans know in advance the size, the compilation time, or the boot time of a Linux kernel?\nOwing to the huge complexity of Linux (there are more than 15000 options with hard constraints and subtle interactions), machines should rather assist contributors and integrators in mastering the configuration space of the kernel.\nIn this talk, Mathieu Acher will introduce TuxML an OSS tool based on Docker/Python to massively gather data about thousands of kernel configurations. Mathieu will describe how 200K+ configurations have been automatically built and how machine learning can exploit this information to predict properties of unseen Linux configurations, with different use cases (identification of influential/buggy options, finding of small kernels, etc.)\nThe vision is that a continuous understanding of the configuration space is undoubtedly beneficial for the Linux community, yet several technical challenges remain in terms of infrastructure and automation.</p>\n</blockquote>\n\n<p><a href=\"https://elinux.org/ELC_Europe_2019_Presentations\">Slides/preprints related to the talk can be found online</a>:</p>\n<ul>\n  <li><a href=\"https://hal.inria.fr/hal-02342130\">slides</a></li>\n  <li><a href=\"https://hal.inria.fr/hal-02147012\">configuration failures/bugs</a></li>\n  <li><a href=\"https://hal.inria.fr/hal-02314830\">kernel size prediction</a></li>\n  <li><strong><a href=\"https://youtu.be/UBghs-cwQX4\">Youtube video of the talk is online</a></strong></li>\n</ul>","contentSnippet":"I gave a talk (see Youtube video) at Embedded Linux Conference Europe 2019 (co-located with Open Source Summit 2019) in Lyon about “Learning the Linux Kernel Configuration Space: Results and Challenges”.\nThe conference was a blast, maybe one of the best conference I’ve attended: diversity of topics, quality of presenters, in-depth and technical content, and many^many exchanges with people that want to understand, share, and help.\n\nI usually attend academic conferences, and I must say OSS+ELC is different in terms of scale. \nThe number of attendees is incredible (around 2000), with many parallel tracks, demonstrations of vendors, keynotes. \nMaybe SIGCSE 2018 I’ve attended in Baltimore was similar, otherwise it’s more around 300 people (I never attended ICSE though).\n\nI enjoyed many talks, just to name a few:\n\n  KernelCI: an effort to lead the (fragmented) testing effort of the kernel, now supported by the Linux foundation and companies like Google or Redhat\n  Buildroot evolution, a very clear description of the build system, new features and release/testing process\n  Continuous documentation that nicely discusses many aspects of documentation. I particularly appreciated the advices about writing styles. Stupid biases are unfortunately present in technical writing. Think about the use of “whitelist/blacklist”, “master/slave” or “hey guys”, how they translate to other languages, and how they can hurt people. The speaker suggests to make pull requests to correct open source projects: very good idea. Btw I think the correction can be partly automated: a bunch of queries over Github to identify bad smells in README.md (with BigQuery), a bot to replace the text, send a PR with an educational message, and we are done!\n  keynote of Linus Torvalds with interesting discussions about the Linux project and its “random crazy user bugs”, the importance of commits messages (more important than code!?), subsurface, and git (Linus wanted to prove to himself he was able to do more than one successful project)\n  insightful report about boot time reduction and actually Linux kernel size reduction at Bootlin. Configuration options all along as nicely exposed by Michael Opdenacker\n  a session about low spec embedded linux with many discussions about kernel size\n  a great presentation about Linux kernel documentation by Jonathan Corbet with many recommendations on how to improve the situation (process, tool, organization, etc.)\n  a crystal clear tutorial of Linux permissions (hint: giving the root permission is not the only path)\n  a crazy talk about using Linux with Android\n  very impressive showcases, for example, state-of-the-art computer vision systems running on very small devices. My prefered one is the Tux over a chessboard and a laser\n  automated testing summit 2019 a full-day workshop about testing the Linux kernel (it was the main topic) and the ongoing effort to unify the forces (e.g., KernelCI). There are impressive tools/ideas developed by an industry-driven and passionate community.\n\n\nI mainly attended Linux-related talks and I’ve been lucky to meet many interesting people that really want to collaborate.\nOSS+ELC was definitely not like academic events: I am not saying it’s “better”, it’s just different and complementary. But maybe there are lessons to learn here ;)\n\nBy the way, the abstract of the talk can be found below:\n\n\n  Given a configuration, can humans know in advance the size, the compilation time, or the boot time of a Linux kernel?\nOwing to the huge complexity of Linux (there are more than 15000 options with hard constraints and subtle interactions), machines should rather assist contributors and integrators in mastering the configuration space of the kernel.\nIn this talk, Mathieu Acher will introduce TuxML an OSS tool based on Docker/Python to massively gather data about thousands of kernel configurations. Mathieu will describe how 200K+ configurations have been automatically built and how machine learning can exploit this information to predict properties of unseen Linux configurations, with different use cases (identification of influential/buggy options, finding of small kernels, etc.)\nThe vision is that a continuous understanding of the configuration space is undoubtedly beneficial for the Linux community, yet several technical challenges remain in terms of infrastructure and automation.\n\n\nSlides/preprints related to the talk can be found online:\n\n  slides\n  configuration failures/bugs\n  kernel size prediction\n  Youtube video of the talk is online","id":"http://blog.mathieuacher.com/ELCETuxML","isoDate":"2019-10-30T09:54:29.000Z"},{"title":"Talk at Embedded Linux Conference Europe 2019","link":"https://varyvary.github.io/dissemination/2019/10/30/ELCETuxML.html","pubDate":"2019-10-30T09:54:29.000Z","author":"VaryVary","content":"<p>Mathieu Acher gave a 35’ <a href=\"https://sched.co/TLKI\">talk</a> at <a href=\"https://events.linuxfoundation.org/events/open-source-summit-europe-2019/\">Embedded Linux Conference Europe 2019 (co-located with Open Source Summit 2019)</a> in Lyon about “Learning the Linux Kernel Configuration Space: Results and Challenges”.\nAbstract below:</p>\n\n<blockquote>\n  <p>Given a configuration, can humans know in advance the size, the compilation time, or the boot time of a Linux kernel?\nOwing to the huge complexity of Linux (there are more than 15000 options with hard constraints and subtle interactions), machines should rather assist contributors and integrators in mastering the configuration space of the kernel.\nIn this talk, Mathieu Acher will introduce TuxML an OSS tool based on Docker/Python to massively gather data about thousands of kernel configurations. Mathieu will describe how 200K+ configurations have been automatically built and how machine learning can exploit this information to predict properties of unseen Linux configurations, with different use cases (identification of influential/buggy options, finding of small kernels, etc.)\nThe vision is that a continuous understanding of the configuration space is undoubtedly beneficial for the Linux community, yet several technical challenges remain in terms of infrastructure and automation.</p>\n</blockquote>\n\n<p><a href=\"https://elinux.org/ELC_Europe_2019_Presentations\">Slides/papers can be found online</a>. \nYoutube video will follow soon!</p>","contentSnippet":"Mathieu Acher gave a 35’ talk at Embedded Linux Conference Europe 2019 (co-located with Open Source Summit 2019) in Lyon about “Learning the Linux Kernel Configuration Space: Results and Challenges”.\nAbstract below:\n\n\n  Given a configuration, can humans know in advance the size, the compilation time, or the boot time of a Linux kernel?\nOwing to the huge complexity of Linux (there are more than 15000 options with hard constraints and subtle interactions), machines should rather assist contributors and integrators in mastering the configuration space of the kernel.\nIn this talk, Mathieu Acher will introduce TuxML an OSS tool based on Docker/Python to massively gather data about thousands of kernel configurations. Mathieu will describe how 200K+ configurations have been automatically built and how machine learning can exploit this information to predict properties of unseen Linux configurations, with different use cases (identification of influential/buggy options, finding of small kernels, etc.)\nThe vision is that a continuous understanding of the configuration space is undoubtedly beneficial for the Linux community, yet several technical challenges remain in terms of infrastructure and automation.\n\n\nSlides/papers can be found online. \nYoutube video will follow soon!","id":"https://varyvary.github.io/dissemination/2019/10/30/ELCETuxML","isoDate":"2019-10-30T09:54:29.000Z"},{"title":"Most influential paper award at SLE 2019","link":"https://varyvary.github.io/dissemination/2019/10/22/MIPSLE.html","pubDate":"2019-10-22T09:54:29.000Z","author":"VaryVary","content":"<p>Mathieu Acher, together with Philippe Collet, Philippe Lahire, and Robert B. France, received the most influential paper (MIP) award at <a href=\"http://www.sleconf.org/2019/\">SLE 2019</a> for their 2009 paper “Composing feature models”. A photo can be found <a href=\"https://twitter.com/sleconf/status/1186717638044590080\">online</a>\nThe two Philippe and Mathieu made a presentation in Athenes, Greece for:</p>\n<ul>\n  <li>briefly summarizing the original paper</li>\n  <li>discussing the impacts (w.r.t. software product lines, model-driven engineering, and software language engineering)</li>\n  <li>highlighting the continuous influence of Robert in this line of work: https://twitter.com/jgrayatua/status/1188776233372401664</li>\n</ul>\n\n<p><a href=\"https://hal.archives-ouvertes.fr/hal-00415767\">Paper is available</a> as well as <a href=\"https://fr.slideshare.net/PhilCollet/sle-2019-mip-award-sle-2009-composing-feature-models\">slides</a></p>","contentSnippet":"Mathieu Acher, together with Philippe Collet, Philippe Lahire, and Robert B. France, received the most influential paper (MIP) award at SLE 2019 for their 2009 paper “Composing feature models”. A photo can be found online\nThe two Philippe and Mathieu made a presentation in Athenes, Greece for:\n\n  briefly summarizing the original paper\n  discussing the impacts (w.r.t. software product lines, model-driven engineering, and software language engineering)\n  highlighting the continuous influence of Robert in this line of work: https://twitter.com/jgrayatua/status/1188776233372401664\n\n\nPaper is available as well as slides","id":"https://varyvary.github.io/dissemination/2019/10/22/MIPSLE","isoDate":"2019-10-22T09:54:29.000Z"},{"title":"Tutorial, workshops, paper, and organization at SPLC 2019","link":"https://varyvary.github.io/dissemination/2019/09/08/SPLC19.html","pubDate":"2019-09-08T09:54:29.000Z","author":"VaryVary","content":"<p>The VaryVary team has been very busy at <a href=\"https://splc2019.net/\">SPLC</a>, the major venue on software product lines and variability, with:</p>\n<ul>\n  <li>a tutorial about “Machine learning and configurable systems: A gentle introduction” material is available online with <a href=\"https://github.com/VaryVary/ML-configurable-SPLCTutorial\">slides, data, exercices</a>. The tutorial was well attended (around 20 people) and there were interesting interactions.</li>\n  <li>3 workshops: <a href=\"http://spltea.irisa.fr/\">SPLTea</a>, <a href=\"http://reveworkshop.github.io\">REVE</a>, and <a href=\"https://modevar.github.io/program/\">MODEVAR</a> on different topics (teaching, reverse engineering, and modeling) and again a good audience for both</li>\n  <li>a paper “Towards quality assurance of software product lines with adversarial configurations” in the main research track <a href=\"https://hal.inria.fr/hal-02287616\">preprint</a></li>\n  <li>Juliana was chair of the student volunteers and Hugo was also student volunteer</li>\n  <li>duties with SPLC steering committee</li>\n</ul>\n\n<p>SPLC was a success with a very nice organisation, a great program mixing industry, journal first articles, and regular papers, without mentionning the co-location with ECSA.</p>","contentSnippet":"The VaryVary team has been very busy at SPLC, the major venue on software product lines and variability, with:\n\n  a tutorial about “Machine learning and configurable systems: A gentle introduction” material is available online with slides, data, exercices. The tutorial was well attended (around 20 people) and there were interesting interactions.\n  3 workshops: SPLTea, REVE, and MODEVAR on different topics (teaching, reverse engineering, and modeling) and again a good audience for both\n  a paper “Towards quality assurance of software product lines with adversarial configurations” in the main research track preprint\n  Juliana was chair of the student volunteers and Hugo was also student volunteer\n  duties with SPLC steering committee\n\n\nSPLC was a success with a very nice organisation, a great program mixing industry, journal first articles, and regular papers, without mentionning the co-location with ECSA.","id":"https://varyvary.github.io/dissemination/2019/09/08/SPLC19","isoDate":"2019-09-08T09:54:29.000Z"},{"title":"Course at EJCP 2019 about Software Variability and Artificial Intelligence","link":"https://varyvary.github.io/dissemination/2019/06/28/course-EJCP19.html","pubDate":"2019-06-28T09:54:29.000Z","author":"VaryVary","content":"<p>Mathieu Acher gave a course at <a href=\"http://ejcp2019.icube.unistra.fr/\">EJCP</a> (summer school for PhD students in computer science) about “Software Variability and Artificial Intelligence”. \nIt was mainly a replay of 2018, but with some new examples and exercices. \nA lot of great questions from the audience and nice interactions. EJCP was also a very nice event spanning different topics (Coccinelle, Coq, frama-c, constraint programming, etc.)</p>\n\n<p><a href=\"http://ejcp2019.icube.unistra.fr/slides/ma.pdf\">Slides are available online</a></p>\n\n<p>Abstract:</p>\n\n<blockquote>\n  <p>Most modern software systems are subject to variation or come in many variants. Web browsers like Firefox or Chrome are available on different operating systems, in different languages, while users can configure 2000+ preferences or install numerous 3rd parties extensions (or plugins). Web servers like Apache, operating systems like the Linux kernel, or a video encoder like x264 are other examples of software systems that are highly configurable at compile-time or at run-time for delivering the expected functionality andmeeting the various desires of users.\nVariability (“the ability of a software system or artifact to be efficiently extended, changed, customized or configured for use in a particular context”) is therefore a crucial property of software systems. Organizations capable of mastering variability can deliver high-quality variants (or products) in a short amount of time and thus attract numerous customers, new use-cases or usage contexts. A hard problem for end-users or software developers is to master the combinatorial explosion induced by variability: Hundreds of configuration options can be combined, each potentially with distinct functionality and effects on execution time, memory footprint, quality of the result, etc. The first part of this course will introduce variability-intensive systems, their applications and challenges, in various software contexts. We will use intuitive examples (like a generator of LaTeX paper variants) and real-world systems (like the Linux kernel).\nA second objective of this course is to show the relevance of Artificial Intelligence (AI) techniques for exploring and taming such enormous variability spaces. In particular, we will introduce how (1) satisfiability and constraint programming solvers can be used to properly model and reason about variability; (2) how machine learning can be used to discover constraints and predict the variability behavior of configurable systems or software product lines.</p>\n</blockquote>","contentSnippet":"Mathieu Acher gave a course at EJCP (summer school for PhD students in computer science) about “Software Variability and Artificial Intelligence”. \nIt was mainly a replay of 2018, but with some new examples and exercices. \nA lot of great questions from the audience and nice interactions. EJCP was also a very nice event spanning different topics (Coccinelle, Coq, frama-c, constraint programming, etc.)\n\nSlides are available online\n\nAbstract:\n\n\n  Most modern software systems are subject to variation or come in many variants. Web browsers like Firefox or Chrome are available on different operating systems, in different languages, while users can configure 2000+ preferences or install numerous 3rd parties extensions (or plugins). Web servers like Apache, operating systems like the Linux kernel, or a video encoder like x264 are other examples of software systems that are highly configurable at compile-time or at run-time for delivering the expected functionality andmeeting the various desires of users.\nVariability (“the ability of a software system or artifact to be efficiently extended, changed, customized or configured for use in a particular context”) is therefore a crucial property of software systems. Organizations capable of mastering variability can deliver high-quality variants (or products) in a short amount of time and thus attract numerous customers, new use-cases or usage contexts. A hard problem for end-users or software developers is to master the combinatorial explosion induced by variability: Hundreds of configuration options can be combined, each potentially with distinct functionality and effects on execution time, memory footprint, quality of the result, etc. The first part of this course will introduce variability-intensive systems, their applications and challenges, in various software contexts. We will use intuitive examples (like a generator of LaTeX paper variants) and real-world systems (like the Linux kernel).\nA second objective of this course is to show the relevance of Artificial Intelligence (AI) techniques for exploring and taming such enormous variability spaces. In particular, we will introduce how (1) satisfiability and constraint programming solvers can be used to properly model and reason about variability; (2) how machine learning can be used to discover constraints and predict the variability behavior of configurable systems or software product lines.","id":"https://varyvary.github.io/dissemination/2019/06/28/course-EJCP19","isoDate":"2019-06-28T09:54:29.000Z"},{"title":"Survey about Learning Software Configuration Spaces","link":"https://varyvary.github.io/publication/survey/2019/06/07/Survey.html","pubDate":"2019-06-07T09:54:29.000Z","author":"VaryVary","content":"<p>After months of effort, a <a href=\"https://hal.inria.fr/hal-02148791\">preprint</a> of “Learning Software Configuration Spaces: A Systematic Literature Review” is available online. \nWe reviewed numerous works closely related to the VaryVary project. \nWe hope that this survey will help researchers and practitioners that have to deal with software variability and configurations.</p>\n\n<p>Abstract below:</p>\n<blockquote>\n  <p>Most modern software systems (operating systems like Linux or Android, Web browsers like Firefox or Chrome, video encoders like ffmpeg, x264 or VLC, mobile and cloud applications, etc.) are highly-configurable. Hundreds of configuration options, features, or plugins can be combined, each potentially with distinct functionality and effects on execution time, security, energy consumption, etc. Due to the combinatorial explosion and the cost of executing software, it is quickly impossible to exhaustively explore the whole configuration space. Hence, numerous works have investigated the idea of learning it from a small sample of configurations’ measurements. The pattern “sampling, measuring, learning” has emerged in the literature, with several practical interests for both software developers and end-users of configurable systems. In this survey, we report on the different application objectives (e.g., performance prediction, configuration optimization, constraint mining), use-cases, targeted software systems and application domains. We review the various strategies employed to gather a representative and cost-effective sample. We describe automated software techniques used to measure functional and non-functional properties of configurations. We classify machine learning algorithms and how they relate to the pursued application. Finally, we also describe how researchers evaluate the quality of the learning process. The findings from this systematic review show that the potential application objective is important; there are a vast number of case studies reported in the literature from the basis of several domains and software systems. Yet, the huge variant space of configurable systems is still challenging and calls to further investigate the synergies between artificial intelligence and software engineering.</p>\n</blockquote>","contentSnippet":"After months of effort, a preprint of “Learning Software Configuration Spaces: A Systematic Literature Review” is available online. \nWe reviewed numerous works closely related to the VaryVary project. \nWe hope that this survey will help researchers and practitioners that have to deal with software variability and configurations.\n\nAbstract below:\n\n  Most modern software systems (operating systems like Linux or Android, Web browsers like Firefox or Chrome, video encoders like ffmpeg, x264 or VLC, mobile and cloud applications, etc.) are highly-configurable. Hundreds of configuration options, features, or plugins can be combined, each potentially with distinct functionality and effects on execution time, security, energy consumption, etc. Due to the combinatorial explosion and the cost of executing software, it is quickly impossible to exhaustively explore the whole configuration space. Hence, numerous works have investigated the idea of learning it from a small sample of configurations’ measurements. The pattern “sampling, measuring, learning” has emerged in the literature, with several practical interests for both software developers and end-users of configurable systems. In this survey, we report on the different application objectives (e.g., performance prediction, configuration optimization, constraint mining), use-cases, targeted software systems and application domains. We review the various strategies employed to gather a representative and cost-effective sample. We describe automated software techniques used to measure functional and non-functional properties of configurations. We classify machine learning algorithms and how they relate to the pursued application. Finally, we also describe how researchers evaluate the quality of the learning process. The findings from this systematic review show that the potential application objective is important; there are a vast number of case studies reported in the literature from the basis of several domains and software systems. Yet, the huge variant space of configurable systems is still challenging and calls to further investigate the synergies between artificial intelligence and software engineering.","id":"https://varyvary.github.io/publication/survey/2019/06/07/Survey","isoDate":"2019-06-07T09:54:29.000Z"},{"title":"Multimorphic Testing at Deep Test","link":"https://varyvary.github.io/publication/workshop/testing/2019/05/25/DeepTest.html","pubDate":"2019-05-25T09:54:29.000Z","author":"VaryVary","content":"<p>Paul Temple and Jean-Marc Jézéquel were at <a href=\"https://deeptestconf.github.io/\">DeepTest</a>, perhaps the most attended workshop at ICSE. \nThey have presented “Applying Multimorphic Testing to Deep Learning Systems”. \nIt’s an ongoing work and the workshop was informal.</p>\n\n<p>Multimorphic testing (MMT) aims to assess the effectiveness of a test suite for revealing performance variations of a system. We’ve promising empirical results in different contexts/domains see <a href=\"https://hal.inria.fr/hal-01730163v1\">ICSE’18 poster</a> and PhD thesis of <a href=\"http://www.theses.fr/2018REN1S087\">Paul</a>. \nThe question is now: does MMT work for deep neural network-based systems?</p>","contentSnippet":"Paul Temple and Jean-Marc Jézéquel were at DeepTest, perhaps the most attended workshop at ICSE. \nThey have presented “Applying Multimorphic Testing to Deep Learning Systems”. \nIt’s an ongoing work and the workshop was informal.\n\nMultimorphic testing (MMT) aims to assess the effectiveness of a test suite for revealing performance variations of a system. We’ve promising empirical results in different contexts/domains see ICSE’18 poster and PhD thesis of Paul. \nThe question is now: does MMT work for deep neural network-based systems?","id":"https://varyvary.github.io/publication/workshop/testing/2019/05/25/DeepTest","isoDate":"2019-05-25T09:54:29.000Z"},{"title":"Variability in the Video Domain","link":"https://varyvary.github.io/publication/video/synthesis/2019/03/23/VaryVideo.html","pubDate":"2019-03-23T09:54:29.000Z","author":"VaryVary","content":"<p>The article “Modeling Variability in the Video Domain: Language and Experience Report” has been (finally) published in a journal issue of the Software Quality Journal (Springer journal). \nIt’s a joint work with colleagues at University of Sevilla (Jose Galindo and David Benavides).<br />\nThis paper has a long story: in 2014 (yes, 5 years ago) we published a <a href=\"https://hal.inria.fr/hal-01023159\">technical report</a> about our language. \nSince then, we have continuously improved the article, maybe more emphasizing the process and the underlying difficulties of modeling variability.\nAnyway, it’s available <a href=\"https://link.springer.com/article/10.1007/s11219-017-9400-8\">online</a> and the <a href=\"https://hal.inria.fr/hal-01688247\">preprint is available</a>.</p>\n\n<p>We are pursuing the work with the video generator, either for improving its <a href=\"https://hal.inria.fr/hal-01659137\">quality</a> or for <a href=\"https://hal.inria.fr/hal-01323446\">exploiting video variants</a>.</p>\n\n<p><img src=\"/assets/videos.png\" alt=\"Extraction process\" /></p>\n\n<p>Abstract below:</p>\n<blockquote>\n  <p>In an industrial project, we addressed the challenge of developing a software-based video generator such that consumers and providers of video processing algorithms can benchmark them on a wide range of video variants. \nThis article aims to report on our positive experience in modeling, controlling, and implementing software variability in the video domain. \nWe describe how we have designed and developed a variability modeling language, called VM, resulting from the close collaboration with industrial partners during 2 years. \nWe expose the specific requirements and advanced variability constructs; we developed and used to characterize and derive variations of video sequences. \nThe results of our experiments and industrial experience show that our solution is effective to model complex variability information and supports the synthesis of hundreds of realistic video variants. \nFrom the software language perspective, we learned that basic variability mechanisms are useful but not enough; attributes and multi-features are of prior importance; meta-information and specific constructs are relevant for scalable and purposeful reasoning over variability models. \nFrom the video domain and software perspective, we report on the practical benefits of a variability approach. With more automation and control, practitioners can now envision benchmarking video algorithms over large, diverse, controlled, yet realistic datasets (videos that mimic real recorded videos)—something impossible at the beginning of the project.</p>\n</blockquote>","contentSnippet":"The article “Modeling Variability in the Video Domain: Language and Experience Report” has been (finally) published in a journal issue of the Software Quality Journal (Springer journal). \nIt’s a joint work with colleagues at University of Sevilla (Jose Galindo and David Benavides).\nThis paper has a long story: in 2014 (yes, 5 years ago) we published a technical report about our language. \nSince then, we have continuously improved the article, maybe more emphasizing the process and the underlying difficulties of modeling variability.\nAnyway, it’s available online and the preprint is available.\n\nWe are pursuing the work with the video generator, either for improving its quality or for exploiting video variants.\n\n\n\nAbstract below:\n\n  In an industrial project, we addressed the challenge of developing a software-based video generator such that consumers and providers of video processing algorithms can benchmark them on a wide range of video variants. \nThis article aims to report on our positive experience in modeling, controlling, and implementing software variability in the video domain. \nWe describe how we have designed and developed a variability modeling language, called VM, resulting from the close collaboration with industrial partners during 2 years. \nWe expose the specific requirements and advanced variability constructs; we developed and used to characterize and derive variations of video sequences. \nThe results of our experiments and industrial experience show that our solution is effective to model complex variability information and supports the synthesis of hundreds of realistic video variants. \nFrom the software language perspective, we learned that basic variability mechanisms are useful but not enough; attributes and multi-features are of prior importance; meta-information and specific constructs are relevant for scalable and purposeful reasoning over variability models. \nFrom the video domain and software perspective, we report on the practical benefits of a variability approach. With more automation and control, practitioners can now envision benchmarking video algorithms over large, diverse, controlled, yet realistic datasets (videos that mimic real recorded videos)—something impossible at the beginning of the project.","id":"https://varyvary.github.io/publication/video/synthesis/2019/03/23/VaryVideo","isoDate":"2019-03-23T09:54:29.000Z"},{"title":"Juliana and Hugo at FOSD meeting","link":"https://varyvary.github.io/dissemination/2019/03/12/FOSD.html","pubDate":"2019-03-12T09:54:29.000Z","author":"VaryVary","content":"<p>At the yearly <a href=\"https://digital-bauhaus.github.io/website-FOSD-2019/\">FOSD meeting</a> (a true workshop about variability, software product lines and configurable systems), Hugo Martin will give a talk entitled “Machine Learning for Performance Specialization of Configurable Systems”. \nIt’s a substantial improvement/extension of ideas/experiments presented in this <a href=\"https://hal.inria.fr/hal-01467299\">technical report</a>.</p>\n\n<p>Juliana Alves Pereira will talk about “Machine Learning for Exploring Software Configuration Spaces: A Systematic Literature Review”. \nIt’s an ongoing effort in which we have spent time to understand and classify the numerous recent works in the field.</p>\n\n<p>Hugo (PhD student) and Juliana (post-doc) are two key members of VaryVary: stay tuned for their results!</p>","contentSnippet":"At the yearly FOSD meeting (a true workshop about variability, software product lines and configurable systems), Hugo Martin will give a talk entitled “Machine Learning for Performance Specialization of Configurable Systems”. \nIt’s a substantial improvement/extension of ideas/experiments presented in this technical report.\n\nJuliana Alves Pereira will talk about “Machine Learning for Exploring Software Configuration Spaces: A Systematic Literature Review”. \nIt’s an ongoing effort in which we have spent time to understand and classify the numerous recent works in the field.\n\nHugo (PhD student) and Juliana (post-doc) are two key members of VaryVary: stay tuned for their results!","id":"https://varyvary.github.io/dissemination/2019/03/12/FOSD","isoDate":"2019-03-12T09:54:29.000Z"},{"title":"3D Printing, Machine Learning, and Variability at VaMoS","link":"https://varyvary.github.io/dissemination/learning/solving/2019/01/12/3DPrinting.html","pubDate":"2019-01-12T09:54:29.000Z","author":"VaryVary","content":"<p><a href=\"https://vamos2019.github.io/\">VaMoS 2019</a> is one of the best international workshop about software engineering: great papers, talks, nice interactions, etc. \nAnd variability everywhere, the core topic! I am a little bit biased because I like VaMoS very much. It is already the 13th edition of the International Workshop on Variability Modelling of Software-Intensive Systems. It will be working conference in the future, a nice complement to <a href=\"https://splc2019.net\">SPLC</a>, the major venue when you’re interested in software product lines, configurable systems, and variability.</p>\n\n<p>Last year, I’ve presented <a href=\"https://hal.inria.fr/hal-01659161\">VaryLaTeX</a> a learning approach to generate papers that are not desk-reject, typically when you want to meet pages’ limits. This year, Maxime Cordy will present “Towards Learning-Aided Configuration in 3D Printing: Feasibility Study and Application to Defect Prediction” <a href=\"https://hal.inria.fr/hal-01990767\">preprint available</a>.</p>\n\n<p>The goal of this paper is to prevent the customization of ill-formed 3D models. We combine automated techniques with learning to predict defects, and we did it on <a href=\"https://www.thingiverse.com/\">Thingiverse</a> a popular place for makers. The abstract:</p>\n\n<blockquote>\n  <p>Configurators rely on logical constraints over parameters to aid users and determine the validity of a configuration. \nHowever, for some domains, capturing such configuration knowledge is hard, if not infeasible. \nThis is the case in the 3D printing industry, where parametric 3D object models contain the list of parameters and their value domains, but no explicit constraints. \nThis calls for a complementary approach that learns what configurations are valid based on previous experiences. \nIn this paper, we report on preliminary experiments showing the capability of state-of-the-art classification algorithms to assist the configuration process. \nWhile machine learning holds its promises when it comes to evaluation scores, an in-depth analysis reveals the opportunity to combine the classifiers with constraint solvers.</p>\n</blockquote>\n\n<p>Don’t hesitate to contact me if you’re interested in this subject.</p>\n\n<p>Best,</p>\n\n<p>Mathieu Acher</p>","contentSnippet":"VaMoS 2019 is one of the best international workshop about software engineering: great papers, talks, nice interactions, etc. \nAnd variability everywhere, the core topic! I am a little bit biased because I like VaMoS very much. It is already the 13th edition of the International Workshop on Variability Modelling of Software-Intensive Systems. It will be working conference in the future, a nice complement to SPLC, the major venue when you’re interested in software product lines, configurable systems, and variability.\n\nLast year, I’ve presented VaryLaTeX a learning approach to generate papers that are not desk-reject, typically when you want to meet pages’ limits. This year, Maxime Cordy will present “Towards Learning-Aided Configuration in 3D Printing: Feasibility Study and Application to Defect Prediction” preprint available.\n\nThe goal of this paper is to prevent the customization of ill-formed 3D models. We combine automated techniques with learning to predict defects, and we did it on Thingiverse a popular place for makers. The abstract:\n\n\n  Configurators rely on logical constraints over parameters to aid users and determine the validity of a configuration. \nHowever, for some domains, capturing such configuration knowledge is hard, if not infeasible. \nThis is the case in the 3D printing industry, where parametric 3D object models contain the list of parameters and their value domains, but no explicit constraints. \nThis calls for a complementary approach that learns what configurations are valid based on previous experiences. \nIn this paper, we report on preliminary experiments showing the capability of state-of-the-art classification algorithms to assist the configuration process. \nWhile machine learning holds its promises when it comes to evaluation scores, an in-depth analysis reveals the opportunity to combine the classifiers with constraint solvers.\n\n\nDon’t hesitate to contact me if you’re interested in this subject.\n\nBest,\n\nMathieu Acher","id":"https://varyvary.github.io/dissemination/learning/solving/2019/01/12/3DPrinting","isoDate":"2019-01-12T09:54:29.000Z"},{"title":"Uniform Sampling for Configurable Systems","link":"https://varyvary.github.io/dissemination/solving/sampling/2018/12/20/UniformSampling.html","pubDate":"2018-12-20T09:54:29.000Z","author":"VaryVary","content":"<p>“Uniform Sampling of SAT Solutions for Configurable Systems: Are We There Yet?” is accepted at <a href=\"http://icst2019.xjtu.edu.cn/\">ICST 2019</a>, the 12th IEEE International Conference on Software Testing, Verification and Validation (a top conference in software testing).</p>\n\n<p>The answer to the question is in the paper: <a href=\"https://hal.inria.fr/hal-01991857\">preprint is available</a> ;)</p>\n\n<p>We are working hard to continue this work.</p>\n\n<blockquote>\n  <p>Uniform or near-uniform generation of solutions for large satisfiability formulas is a problem of theoretical and practical interest for the testing community. \nRecent works proposed two algorithms (namely UniGen and QuickSampler) for reaching a good compromise between execution time and uniformity guarantees, with empirical evidence on SAT benchmarks. \nIn the context of highly-configurable software systems (e.g., Linux), it is unclear whether UniGen and QuickSampler can scale and sample uniform software configurations. \nIn this paper, we perform a thorough experiment on 128 real-world feature models. We find that UniGen is unable to produce SAT solutions out of such feature models. \nFurthermore, we show that QuickSampler does not generate uniform samples and that some features are either never part of the sample or too frequently present. \nFinally, using a case study, we characterize the impacts of these results on the ability to find bugs in a configurable system. \nOverall, our results suggest that we are not there: more research is needed to explore the cost-effectiveness of uniform sampling when testing large configurable systems.</p>\n</blockquote>","contentSnippet":"“Uniform Sampling of SAT Solutions for Configurable Systems: Are We There Yet?” is accepted at ICST 2019, the 12th IEEE International Conference on Software Testing, Verification and Validation (a top conference in software testing).\n\nThe answer to the question is in the paper: preprint is available ;)\n\nWe are working hard to continue this work.\n\n\n  Uniform or near-uniform generation of solutions for large satisfiability formulas is a problem of theoretical and practical interest for the testing community. \nRecent works proposed two algorithms (namely UniGen and QuickSampler) for reaching a good compromise between execution time and uniformity guarantees, with empirical evidence on SAT benchmarks. \nIn the context of highly-configurable software systems (e.g., Linux), it is unclear whether UniGen and QuickSampler can scale and sample uniform software configurations. \nIn this paper, we perform a thorough experiment on 128 real-world feature models. We find that UniGen is unable to produce SAT solutions out of such feature models. \nFurthermore, we show that QuickSampler does not generate uniform samples and that some features are either never part of the sample or too frequently present. \nFinally, using a case study, we characterize the impacts of these results on the ability to find bugs in a configurable system. \nOverall, our results suggest that we are not there: more research is needed to explore the cost-effectiveness of uniform sampling when testing large configurable systems.","id":"https://varyvary.github.io/dissemination/solving/sampling/2018/12/20/UniformSampling","isoDate":"2018-12-20T09:54:29.000Z"}]